
lab6.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ae54  080001c0  080001c0  000011c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000414  0800b018  0800b018  0000c018  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b42c  0800b42c  0000d1d8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b42c  0800b42c  0000c42c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b434  0800b434  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b434  0800b434  0000c434  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b438  0800b438  0000c438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b43c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003fc  200001d8  0800b614  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200005d4  0800b614  0000d5d4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000162aa  00000000  00000000  0000d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002af4  00000000  00000000  000234b2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001218  00000000  00000000  00025fa8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000e04  00000000  00000000  000271c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002c8e1  00000000  00000000  00027fc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015503  00000000  00000000  000548a5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00113839  00000000  00000000  00069da8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017d5e1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005cf0  00000000  00000000  0017d624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a2  00000000  00000000  00183314  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	@ (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	@ (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	00000000 	.word	0x00000000
 80001e0:	0800affc 	.word	0x0800affc

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	@ (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	@ (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	@ (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	200001dc 	.word	0x200001dc
 80001fc:	0800affc 	.word	0x0800affc

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <strlen>:
 80002a0:	4603      	mov	r3, r0
 80002a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d1fb      	bne.n	80002a2 <strlen+0x2>
 80002aa:	1a18      	subs	r0, r3, r0
 80002ac:	3801      	subs	r0, #1
 80002ae:	4770      	bx	lr

080002b0 <__aeabi_drsub>:
 80002b0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002b4:	e002      	b.n	80002bc <__adddf3>
 80002b6:	bf00      	nop

080002b8 <__aeabi_dsub>:
 80002b8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002bc <__adddf3>:
 80002bc:	b530      	push	{r4, r5, lr}
 80002be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002c6:	ea94 0f05 	teq	r4, r5
 80002ca:	bf08      	it	eq
 80002cc:	ea90 0f02 	teqeq	r0, r2
 80002d0:	bf1f      	itttt	ne
 80002d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002e2:	f000 80e2 	beq.w	80004aa <__adddf3+0x1ee>
 80002e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ee:	bfb8      	it	lt
 80002f0:	426d      	neglt	r5, r5
 80002f2:	dd0c      	ble.n	800030e <__adddf3+0x52>
 80002f4:	442c      	add	r4, r5
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	ea82 0000 	eor.w	r0, r2, r0
 8000302:	ea83 0101 	eor.w	r1, r3, r1
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	2d36      	cmp	r5, #54	@ 0x36
 8000310:	bf88      	it	hi
 8000312:	bd30      	pophi	{r4, r5, pc}
 8000314:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000318:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800031c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000320:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000324:	d002      	beq.n	800032c <__adddf3+0x70>
 8000326:	4240      	negs	r0, r0
 8000328:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800032c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000330:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000334:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000338:	d002      	beq.n	8000340 <__adddf3+0x84>
 800033a:	4252      	negs	r2, r2
 800033c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000340:	ea94 0f05 	teq	r4, r5
 8000344:	f000 80a7 	beq.w	8000496 <__adddf3+0x1da>
 8000348:	f1a4 0401 	sub.w	r4, r4, #1
 800034c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000350:	db0d      	blt.n	800036e <__adddf3+0xb2>
 8000352:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000356:	fa22 f205 	lsr.w	r2, r2, r5
 800035a:	1880      	adds	r0, r0, r2
 800035c:	f141 0100 	adc.w	r1, r1, #0
 8000360:	fa03 f20e 	lsl.w	r2, r3, lr
 8000364:	1880      	adds	r0, r0, r2
 8000366:	fa43 f305 	asr.w	r3, r3, r5
 800036a:	4159      	adcs	r1, r3
 800036c:	e00e      	b.n	800038c <__adddf3+0xd0>
 800036e:	f1a5 0520 	sub.w	r5, r5, #32
 8000372:	f10e 0e20 	add.w	lr, lr, #32
 8000376:	2a01      	cmp	r2, #1
 8000378:	fa03 fc0e 	lsl.w	ip, r3, lr
 800037c:	bf28      	it	cs
 800037e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000382:	fa43 f305 	asr.w	r3, r3, r5
 8000386:	18c0      	adds	r0, r0, r3
 8000388:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800038c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000390:	d507      	bpl.n	80003a2 <__adddf3+0xe6>
 8000392:	f04f 0e00 	mov.w	lr, #0
 8000396:	f1dc 0c00 	rsbs	ip, ip, #0
 800039a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800039e:	eb6e 0101 	sbc.w	r1, lr, r1
 80003a2:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80003a6:	d31b      	bcc.n	80003e0 <__adddf3+0x124>
 80003a8:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80003ac:	d30c      	bcc.n	80003c8 <__adddf3+0x10c>
 80003ae:	0849      	lsrs	r1, r1, #1
 80003b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003b8:	f104 0401 	add.w	r4, r4, #1
 80003bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003c0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003c4:	f080 809a 	bcs.w	80004fc <__adddf3+0x240>
 80003c8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003cc:	bf08      	it	eq
 80003ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003d2:	f150 0000 	adcs.w	r0, r0, #0
 80003d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003da:	ea41 0105 	orr.w	r1, r1, r5
 80003de:	bd30      	pop	{r4, r5, pc}
 80003e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003e4:	4140      	adcs	r0, r0
 80003e6:	eb41 0101 	adc.w	r1, r1, r1
 80003ea:	3c01      	subs	r4, #1
 80003ec:	bf28      	it	cs
 80003ee:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003f2:	d2e9      	bcs.n	80003c8 <__adddf3+0x10c>
 80003f4:	f091 0f00 	teq	r1, #0
 80003f8:	bf04      	itt	eq
 80003fa:	4601      	moveq	r1, r0
 80003fc:	2000      	moveq	r0, #0
 80003fe:	fab1 f381 	clz	r3, r1
 8000402:	bf08      	it	eq
 8000404:	3320      	addeq	r3, #32
 8000406:	f1a3 030b 	sub.w	r3, r3, #11
 800040a:	f1b3 0220 	subs.w	r2, r3, #32
 800040e:	da0c      	bge.n	800042a <__adddf3+0x16e>
 8000410:	320c      	adds	r2, #12
 8000412:	dd08      	ble.n	8000426 <__adddf3+0x16a>
 8000414:	f102 0c14 	add.w	ip, r2, #20
 8000418:	f1c2 020c 	rsb	r2, r2, #12
 800041c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000420:	fa21 f102 	lsr.w	r1, r1, r2
 8000424:	e00c      	b.n	8000440 <__adddf3+0x184>
 8000426:	f102 0214 	add.w	r2, r2, #20
 800042a:	bfd8      	it	le
 800042c:	f1c2 0c20 	rsble	ip, r2, #32
 8000430:	fa01 f102 	lsl.w	r1, r1, r2
 8000434:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000438:	bfdc      	itt	le
 800043a:	ea41 010c 	orrle.w	r1, r1, ip
 800043e:	4090      	lslle	r0, r2
 8000440:	1ae4      	subs	r4, r4, r3
 8000442:	bfa2      	ittt	ge
 8000444:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000448:	4329      	orrge	r1, r5
 800044a:	bd30      	popge	{r4, r5, pc}
 800044c:	ea6f 0404 	mvn.w	r4, r4
 8000450:	3c1f      	subs	r4, #31
 8000452:	da1c      	bge.n	800048e <__adddf3+0x1d2>
 8000454:	340c      	adds	r4, #12
 8000456:	dc0e      	bgt.n	8000476 <__adddf3+0x1ba>
 8000458:	f104 0414 	add.w	r4, r4, #20
 800045c:	f1c4 0220 	rsb	r2, r4, #32
 8000460:	fa20 f004 	lsr.w	r0, r0, r4
 8000464:	fa01 f302 	lsl.w	r3, r1, r2
 8000468:	ea40 0003 	orr.w	r0, r0, r3
 800046c:	fa21 f304 	lsr.w	r3, r1, r4
 8000470:	ea45 0103 	orr.w	r1, r5, r3
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f1c4 040c 	rsb	r4, r4, #12
 800047a:	f1c4 0220 	rsb	r2, r4, #32
 800047e:	fa20 f002 	lsr.w	r0, r0, r2
 8000482:	fa01 f304 	lsl.w	r3, r1, r4
 8000486:	ea40 0003 	orr.w	r0, r0, r3
 800048a:	4629      	mov	r1, r5
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	fa21 f004 	lsr.w	r0, r1, r4
 8000492:	4629      	mov	r1, r5
 8000494:	bd30      	pop	{r4, r5, pc}
 8000496:	f094 0f00 	teq	r4, #0
 800049a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800049e:	bf06      	itte	eq
 80004a0:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80004a4:	3401      	addeq	r4, #1
 80004a6:	3d01      	subne	r5, #1
 80004a8:	e74e      	b.n	8000348 <__adddf3+0x8c>
 80004aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ae:	bf18      	it	ne
 80004b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004b4:	d029      	beq.n	800050a <__adddf3+0x24e>
 80004b6:	ea94 0f05 	teq	r4, r5
 80004ba:	bf08      	it	eq
 80004bc:	ea90 0f02 	teqeq	r0, r2
 80004c0:	d005      	beq.n	80004ce <__adddf3+0x212>
 80004c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004c6:	bf04      	itt	eq
 80004c8:	4619      	moveq	r1, r3
 80004ca:	4610      	moveq	r0, r2
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	ea91 0f03 	teq	r1, r3
 80004d2:	bf1e      	ittt	ne
 80004d4:	2100      	movne	r1, #0
 80004d6:	2000      	movne	r0, #0
 80004d8:	bd30      	popne	{r4, r5, pc}
 80004da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004de:	d105      	bne.n	80004ec <__adddf3+0x230>
 80004e0:	0040      	lsls	r0, r0, #1
 80004e2:	4149      	adcs	r1, r1
 80004e4:	bf28      	it	cs
 80004e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ea:	bd30      	pop	{r4, r5, pc}
 80004ec:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004f0:	bf3c      	itt	cc
 80004f2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004f6:	bd30      	popcc	{r4, r5, pc}
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004fc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd30      	pop	{r4, r5, pc}
 800050a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800050e:	bf1a      	itte	ne
 8000510:	4619      	movne	r1, r3
 8000512:	4610      	movne	r0, r2
 8000514:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000518:	bf1c      	itt	ne
 800051a:	460b      	movne	r3, r1
 800051c:	4602      	movne	r2, r0
 800051e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000522:	bf06      	itte	eq
 8000524:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000528:	ea91 0f03 	teqeq	r1, r3
 800052c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000530:	bd30      	pop	{r4, r5, pc}
 8000532:	bf00      	nop

08000534 <__aeabi_ui2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f04f 0500 	mov.w	r5, #0
 800054c:	f04f 0100 	mov.w	r1, #0
 8000550:	e750      	b.n	80003f4 <__adddf3+0x138>
 8000552:	bf00      	nop

08000554 <__aeabi_i2d>:
 8000554:	f090 0f00 	teq	r0, #0
 8000558:	bf04      	itt	eq
 800055a:	2100      	moveq	r1, #0
 800055c:	4770      	bxeq	lr
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000564:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000568:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800056c:	bf48      	it	mi
 800056e:	4240      	negmi	r0, r0
 8000570:	f04f 0100 	mov.w	r1, #0
 8000574:	e73e      	b.n	80003f4 <__adddf3+0x138>
 8000576:	bf00      	nop

08000578 <__aeabi_f2d>:
 8000578:	0042      	lsls	r2, r0, #1
 800057a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800057e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000582:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000586:	bf1f      	itttt	ne
 8000588:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800058c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000590:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000594:	4770      	bxne	lr
 8000596:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800059a:	bf08      	it	eq
 800059c:	4770      	bxeq	lr
 800059e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80005a2:	bf04      	itt	eq
 80005a4:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80005a8:	4770      	bxeq	lr
 80005aa:	b530      	push	{r4, r5, lr}
 80005ac:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005b0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005b4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005b8:	e71c      	b.n	80003f4 <__adddf3+0x138>
 80005ba:	bf00      	nop

080005bc <__aeabi_ul2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	e00a      	b.n	80005e2 <__aeabi_l2d+0x16>

080005cc <__aeabi_l2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005da:	d502      	bpl.n	80005e2 <__aeabi_l2d+0x16>
 80005dc:	4240      	negs	r0, r0
 80005de:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005e2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005e6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ee:	f43f aed8 	beq.w	80003a2 <__adddf3+0xe6>
 80005f2:	f04f 0203 	mov.w	r2, #3
 80005f6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005fa:	bf18      	it	ne
 80005fc:	3203      	addne	r2, #3
 80005fe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000602:	bf18      	it	ne
 8000604:	3203      	addne	r2, #3
 8000606:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800060a:	f1c2 0320 	rsb	r3, r2, #32
 800060e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000612:	fa20 f002 	lsr.w	r0, r0, r2
 8000616:	fa01 fe03 	lsl.w	lr, r1, r3
 800061a:	ea40 000e 	orr.w	r0, r0, lr
 800061e:	fa21 f102 	lsr.w	r1, r1, r2
 8000622:	4414      	add	r4, r2
 8000624:	e6bd      	b.n	80003a2 <__adddf3+0xe6>
 8000626:	bf00      	nop

08000628 <__aeabi_dmul>:
 8000628:	b570      	push	{r4, r5, r6, lr}
 800062a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800062e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000632:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000636:	bf1d      	ittte	ne
 8000638:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800063c:	ea94 0f0c 	teqne	r4, ip
 8000640:	ea95 0f0c 	teqne	r5, ip
 8000644:	f000 f8de 	bleq	8000804 <__aeabi_dmul+0x1dc>
 8000648:	442c      	add	r4, r5
 800064a:	ea81 0603 	eor.w	r6, r1, r3
 800064e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000652:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000656:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800065a:	bf18      	it	ne
 800065c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000660:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000664:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000668:	d038      	beq.n	80006dc <__aeabi_dmul+0xb4>
 800066a:	fba0 ce02 	umull	ip, lr, r0, r2
 800066e:	f04f 0500 	mov.w	r5, #0
 8000672:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000676:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800067a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800067e:	f04f 0600 	mov.w	r6, #0
 8000682:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000686:	f09c 0f00 	teq	ip, #0
 800068a:	bf18      	it	ne
 800068c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000690:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000694:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000698:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800069c:	d204      	bcs.n	80006a8 <__aeabi_dmul+0x80>
 800069e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006a2:	416d      	adcs	r5, r5
 80006a4:	eb46 0606 	adc.w	r6, r6, r6
 80006a8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006b0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006b4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006b8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006bc:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006c0:	bf88      	it	hi
 80006c2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006c6:	d81e      	bhi.n	8000706 <__aeabi_dmul+0xde>
 80006c8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006cc:	bf08      	it	eq
 80006ce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006d2:	f150 0000 	adcs.w	r0, r0, #0
 80006d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006e0:	ea46 0101 	orr.w	r1, r6, r1
 80006e4:	ea40 0002 	orr.w	r0, r0, r2
 80006e8:	ea81 0103 	eor.w	r1, r1, r3
 80006ec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006f0:	bfc2      	ittt	gt
 80006f2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006f6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006fa:	bd70      	popgt	{r4, r5, r6, pc}
 80006fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000700:	f04f 0e00 	mov.w	lr, #0
 8000704:	3c01      	subs	r4, #1
 8000706:	f300 80ab 	bgt.w	8000860 <__aeabi_dmul+0x238>
 800070a:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 800070e:	bfde      	ittt	le
 8000710:	2000      	movle	r0, #0
 8000712:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000716:	bd70      	pople	{r4, r5, r6, pc}
 8000718:	f1c4 0400 	rsb	r4, r4, #0
 800071c:	3c20      	subs	r4, #32
 800071e:	da35      	bge.n	800078c <__aeabi_dmul+0x164>
 8000720:	340c      	adds	r4, #12
 8000722:	dc1b      	bgt.n	800075c <__aeabi_dmul+0x134>
 8000724:	f104 0414 	add.w	r4, r4, #20
 8000728:	f1c4 0520 	rsb	r5, r4, #32
 800072c:	fa00 f305 	lsl.w	r3, r0, r5
 8000730:	fa20 f004 	lsr.w	r0, r0, r4
 8000734:	fa01 f205 	lsl.w	r2, r1, r5
 8000738:	ea40 0002 	orr.w	r0, r0, r2
 800073c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000740:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000744:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000748:	fa21 f604 	lsr.w	r6, r1, r4
 800074c:	eb42 0106 	adc.w	r1, r2, r6
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 040c 	rsb	r4, r4, #12
 8000760:	f1c4 0520 	rsb	r5, r4, #32
 8000764:	fa00 f304 	lsl.w	r3, r0, r4
 8000768:	fa20 f005 	lsr.w	r0, r0, r5
 800076c:	fa01 f204 	lsl.w	r2, r1, r4
 8000770:	ea40 0002 	orr.w	r0, r0, r2
 8000774:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000778:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800077c:	f141 0100 	adc.w	r1, r1, #0
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 0520 	rsb	r5, r4, #32
 8000790:	fa00 f205 	lsl.w	r2, r0, r5
 8000794:	ea4e 0e02 	orr.w	lr, lr, r2
 8000798:	fa20 f304 	lsr.w	r3, r0, r4
 800079c:	fa01 f205 	lsl.w	r2, r1, r5
 80007a0:	ea43 0302 	orr.w	r3, r3, r2
 80007a4:	fa21 f004 	lsr.w	r0, r1, r4
 80007a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007ac:	fa21 f204 	lsr.w	r2, r1, r4
 80007b0:	ea20 0002 	bic.w	r0, r0, r2
 80007b4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007bc:	bf08      	it	eq
 80007be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
 80007c4:	f094 0f00 	teq	r4, #0
 80007c8:	d10f      	bne.n	80007ea <__aeabi_dmul+0x1c2>
 80007ca:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ce:	0040      	lsls	r0, r0, #1
 80007d0:	eb41 0101 	adc.w	r1, r1, r1
 80007d4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3c01      	subeq	r4, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1a6>
 80007de:	ea41 0106 	orr.w	r1, r1, r6
 80007e2:	f095 0f00 	teq	r5, #0
 80007e6:	bf18      	it	ne
 80007e8:	4770      	bxne	lr
 80007ea:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ee:	0052      	lsls	r2, r2, #1
 80007f0:	eb43 0303 	adc.w	r3, r3, r3
 80007f4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007f8:	bf08      	it	eq
 80007fa:	3d01      	subeq	r5, #1
 80007fc:	d0f7      	beq.n	80007ee <__aeabi_dmul+0x1c6>
 80007fe:	ea43 0306 	orr.w	r3, r3, r6
 8000802:	4770      	bx	lr
 8000804:	ea94 0f0c 	teq	r4, ip
 8000808:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800080c:	bf18      	it	ne
 800080e:	ea95 0f0c 	teqne	r5, ip
 8000812:	d00c      	beq.n	800082e <__aeabi_dmul+0x206>
 8000814:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000818:	bf18      	it	ne
 800081a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081e:	d1d1      	bne.n	80007c4 <__aeabi_dmul+0x19c>
 8000820:	ea81 0103 	eor.w	r1, r1, r3
 8000824:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000828:	f04f 0000 	mov.w	r0, #0
 800082c:	bd70      	pop	{r4, r5, r6, pc}
 800082e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000832:	bf06      	itte	eq
 8000834:	4610      	moveq	r0, r2
 8000836:	4619      	moveq	r1, r3
 8000838:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800083c:	d019      	beq.n	8000872 <__aeabi_dmul+0x24a>
 800083e:	ea94 0f0c 	teq	r4, ip
 8000842:	d102      	bne.n	800084a <__aeabi_dmul+0x222>
 8000844:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000848:	d113      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800084a:	ea95 0f0c 	teq	r5, ip
 800084e:	d105      	bne.n	800085c <__aeabi_dmul+0x234>
 8000850:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000854:	bf1c      	itt	ne
 8000856:	4610      	movne	r0, r2
 8000858:	4619      	movne	r1, r3
 800085a:	d10a      	bne.n	8000872 <__aeabi_dmul+0x24a>
 800085c:	ea81 0103 	eor.w	r1, r1, r3
 8000860:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000864:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000868:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	bd70      	pop	{r4, r5, r6, pc}
 8000872:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000876:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800087a:	bd70      	pop	{r4, r5, r6, pc}

0800087c <__aeabi_ddiv>:
 800087c:	b570      	push	{r4, r5, r6, lr}
 800087e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000882:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000886:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800088a:	bf1d      	ittte	ne
 800088c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000890:	ea94 0f0c 	teqne	r4, ip
 8000894:	ea95 0f0c 	teqne	r5, ip
 8000898:	f000 f8a7 	bleq	80009ea <__aeabi_ddiv+0x16e>
 800089c:	eba4 0405 	sub.w	r4, r4, r5
 80008a0:	ea81 0e03 	eor.w	lr, r1, r3
 80008a4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008a8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ac:	f000 8088 	beq.w	80009c0 <__aeabi_ddiv+0x144>
 80008b0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008b4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008b8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008bc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008c0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008c4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008c8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008cc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008d0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008d4:	429d      	cmp	r5, r3
 80008d6:	bf08      	it	eq
 80008d8:	4296      	cmpeq	r6, r2
 80008da:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008de:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008e2:	d202      	bcs.n	80008ea <__aeabi_ddiv+0x6e>
 80008e4:	085b      	lsrs	r3, r3, #1
 80008e6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ea:	1ab6      	subs	r6, r6, r2
 80008ec:	eb65 0503 	sbc.w	r5, r5, r3
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008fa:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000958:	ea55 0e06 	orrs.w	lr, r5, r6
 800095c:	d018      	beq.n	8000990 <__aeabi_ddiv+0x114>
 800095e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000962:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000966:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800096a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800096e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000972:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000976:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800097a:	d1c0      	bne.n	80008fe <__aeabi_ddiv+0x82>
 800097c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000980:	d10b      	bne.n	800099a <__aeabi_ddiv+0x11e>
 8000982:	ea41 0100 	orr.w	r1, r1, r0
 8000986:	f04f 0000 	mov.w	r0, #0
 800098a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800098e:	e7b6      	b.n	80008fe <__aeabi_ddiv+0x82>
 8000990:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000994:	bf04      	itt	eq
 8000996:	4301      	orreq	r1, r0
 8000998:	2000      	moveq	r0, #0
 800099a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800099e:	bf88      	it	hi
 80009a0:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80009a4:	f63f aeaf 	bhi.w	8000706 <__aeabi_dmul+0xde>
 80009a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ac:	bf04      	itt	eq
 80009ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009b6:	f150 0000 	adcs.w	r0, r0, #0
 80009ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009be:	bd70      	pop	{r4, r5, r6, pc}
 80009c0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009cc:	bfc2      	ittt	gt
 80009ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	popgt	{r4, r5, r6, pc}
 80009d8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009dc:	f04f 0e00 	mov.w	lr, #0
 80009e0:	3c01      	subs	r4, #1
 80009e2:	e690      	b.n	8000706 <__aeabi_dmul+0xde>
 80009e4:	ea45 0e06 	orr.w	lr, r5, r6
 80009e8:	e68d      	b.n	8000706 <__aeabi_dmul+0xde>
 80009ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ee:	ea94 0f0c 	teq	r4, ip
 80009f2:	bf08      	it	eq
 80009f4:	ea95 0f0c 	teqeq	r5, ip
 80009f8:	f43f af3b 	beq.w	8000872 <__aeabi_dmul+0x24a>
 80009fc:	ea94 0f0c 	teq	r4, ip
 8000a00:	d10a      	bne.n	8000a18 <__aeabi_ddiv+0x19c>
 8000a02:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a06:	f47f af34 	bne.w	8000872 <__aeabi_dmul+0x24a>
 8000a0a:	ea95 0f0c 	teq	r5, ip
 8000a0e:	f47f af25 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a12:	4610      	mov	r0, r2
 8000a14:	4619      	mov	r1, r3
 8000a16:	e72c      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a18:	ea95 0f0c 	teq	r5, ip
 8000a1c:	d106      	bne.n	8000a2c <__aeabi_ddiv+0x1b0>
 8000a1e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a22:	f43f aefd 	beq.w	8000820 <__aeabi_dmul+0x1f8>
 8000a26:	4610      	mov	r0, r2
 8000a28:	4619      	mov	r1, r3
 8000a2a:	e722      	b.n	8000872 <__aeabi_dmul+0x24a>
 8000a2c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a30:	bf18      	it	ne
 8000a32:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a36:	f47f aec5 	bne.w	80007c4 <__aeabi_dmul+0x19c>
 8000a3a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a3e:	f47f af0d 	bne.w	800085c <__aeabi_dmul+0x234>
 8000a42:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a46:	f47f aeeb 	bne.w	8000820 <__aeabi_dmul+0x1f8>
 8000a4a:	e712      	b.n	8000872 <__aeabi_dmul+0x24a>

08000a4c <__gedf2>:
 8000a4c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a50:	e006      	b.n	8000a60 <__cmpdf2+0x4>
 8000a52:	bf00      	nop

08000a54 <__ledf2>:
 8000a54:	f04f 0c01 	mov.w	ip, #1
 8000a58:	e002      	b.n	8000a60 <__cmpdf2+0x4>
 8000a5a:	bf00      	nop

08000a5c <__cmpdf2>:
 8000a5c:	f04f 0c01 	mov.w	ip, #1
 8000a60:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a64:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a68:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a76:	d01b      	beq.n	8000ab0 <__cmpdf2+0x54>
 8000a78:	b001      	add	sp, #4
 8000a7a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a7e:	bf0c      	ite	eq
 8000a80:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a84:	ea91 0f03 	teqne	r1, r3
 8000a88:	bf02      	ittt	eq
 8000a8a:	ea90 0f02 	teqeq	r0, r2
 8000a8e:	2000      	moveq	r0, #0
 8000a90:	4770      	bxeq	lr
 8000a92:	f110 0f00 	cmn.w	r0, #0
 8000a96:	ea91 0f03 	teq	r1, r3
 8000a9a:	bf58      	it	pl
 8000a9c:	4299      	cmppl	r1, r3
 8000a9e:	bf08      	it	eq
 8000aa0:	4290      	cmpeq	r0, r2
 8000aa2:	bf2c      	ite	cs
 8000aa4:	17d8      	asrcs	r0, r3, #31
 8000aa6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aaa:	f040 0001 	orr.w	r0, r0, #1
 8000aae:	4770      	bx	lr
 8000ab0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d102      	bne.n	8000ac0 <__cmpdf2+0x64>
 8000aba:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000abe:	d107      	bne.n	8000ad0 <__cmpdf2+0x74>
 8000ac0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d1d6      	bne.n	8000a78 <__cmpdf2+0x1c>
 8000aca:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ace:	d0d3      	beq.n	8000a78 <__cmpdf2+0x1c>
 8000ad0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdrcmple>:
 8000ad8:	4684      	mov	ip, r0
 8000ada:	4610      	mov	r0, r2
 8000adc:	4662      	mov	r2, ip
 8000ade:	468c      	mov	ip, r1
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	4663      	mov	r3, ip
 8000ae4:	e000      	b.n	8000ae8 <__aeabi_cdcmpeq>
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdcmpeq>:
 8000ae8:	b501      	push	{r0, lr}
 8000aea:	f7ff ffb7 	bl	8000a5c <__cmpdf2>
 8000aee:	2800      	cmp	r0, #0
 8000af0:	bf48      	it	mi
 8000af2:	f110 0f00 	cmnmi.w	r0, #0
 8000af6:	bd01      	pop	{r0, pc}

08000af8 <__aeabi_dcmpeq>:
 8000af8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000afc:	f7ff fff4 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b00:	bf0c      	ite	eq
 8000b02:	2001      	moveq	r0, #1
 8000b04:	2000      	movne	r0, #0
 8000b06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0a:	bf00      	nop

08000b0c <__aeabi_dcmplt>:
 8000b0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b10:	f7ff ffea 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b14:	bf34      	ite	cc
 8000b16:	2001      	movcc	r0, #1
 8000b18:	2000      	movcs	r0, #0
 8000b1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1e:	bf00      	nop

08000b20 <__aeabi_dcmple>:
 8000b20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b24:	f7ff ffe0 	bl	8000ae8 <__aeabi_cdcmpeq>
 8000b28:	bf94      	ite	ls
 8000b2a:	2001      	movls	r0, #1
 8000b2c:	2000      	movhi	r0, #0
 8000b2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b32:	bf00      	nop

08000b34 <__aeabi_dcmpge>:
 8000b34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b38:	f7ff ffce 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b3c:	bf94      	ite	ls
 8000b3e:	2001      	movls	r0, #1
 8000b40:	2000      	movhi	r0, #0
 8000b42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b46:	bf00      	nop

08000b48 <__aeabi_dcmpgt>:
 8000b48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b4c:	f7ff ffc4 	bl	8000ad8 <__aeabi_cdrcmple>
 8000b50:	bf34      	ite	cc
 8000b52:	2001      	movcc	r0, #1
 8000b54:	2000      	movcs	r0, #0
 8000b56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5a:	bf00      	nop

08000b5c <__aeabi_dcmpun>:
 8000b5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x10>
 8000b66:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b6a:	d10a      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b6c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x20>
 8000b76:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b7a:	d102      	bne.n	8000b82 <__aeabi_dcmpun+0x26>
 8000b7c:	f04f 0000 	mov.w	r0, #0
 8000b80:	4770      	bx	lr
 8000b82:	f04f 0001 	mov.w	r0, #1
 8000b86:	4770      	bx	lr

08000b88 <__aeabi_d2iz>:
 8000b88:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b8c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b90:	d215      	bcs.n	8000bbe <__aeabi_d2iz+0x36>
 8000b92:	d511      	bpl.n	8000bb8 <__aeabi_d2iz+0x30>
 8000b94:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b9c:	d912      	bls.n	8000bc4 <__aeabi_d2iz+0x3c>
 8000b9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ba2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000ba6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000baa:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000bae:	fa23 f002 	lsr.w	r0, r3, r2
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	4770      	bx	lr
 8000bb8:	f04f 0000 	mov.w	r0, #0
 8000bbc:	4770      	bx	lr
 8000bbe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bc2:	d105      	bne.n	8000bd0 <__aeabi_d2iz+0x48>
 8000bc4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bc8:	bf08      	it	eq
 8000bca:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop

08000bd8 <__aeabi_uldivmod>:
 8000bd8:	b953      	cbnz	r3, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bda:	b94a      	cbnz	r2, 8000bf0 <__aeabi_uldivmod+0x18>
 8000bdc:	2900      	cmp	r1, #0
 8000bde:	bf08      	it	eq
 8000be0:	2800      	cmpeq	r0, #0
 8000be2:	bf1c      	itt	ne
 8000be4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000be8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bec:	f000 b988 	b.w	8000f00 <__aeabi_idiv0>
 8000bf0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bf4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bf8:	f000 f806 	bl	8000c08 <__udivmoddi4>
 8000bfc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c04:	b004      	add	sp, #16
 8000c06:	4770      	bx	lr

08000c08 <__udivmoddi4>:
 8000c08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c0c:	9d08      	ldr	r5, [sp, #32]
 8000c0e:	468e      	mov	lr, r1
 8000c10:	4604      	mov	r4, r0
 8000c12:	4688      	mov	r8, r1
 8000c14:	2b00      	cmp	r3, #0
 8000c16:	d14a      	bne.n	8000cae <__udivmoddi4+0xa6>
 8000c18:	428a      	cmp	r2, r1
 8000c1a:	4617      	mov	r7, r2
 8000c1c:	d962      	bls.n	8000ce4 <__udivmoddi4+0xdc>
 8000c1e:	fab2 f682 	clz	r6, r2
 8000c22:	b14e      	cbz	r6, 8000c38 <__udivmoddi4+0x30>
 8000c24:	f1c6 0320 	rsb	r3, r6, #32
 8000c28:	fa01 f806 	lsl.w	r8, r1, r6
 8000c2c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c30:	40b7      	lsls	r7, r6
 8000c32:	ea43 0808 	orr.w	r8, r3, r8
 8000c36:	40b4      	lsls	r4, r6
 8000c38:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c3c:	fa1f fc87 	uxth.w	ip, r7
 8000c40:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c44:	0c23      	lsrs	r3, r4, #16
 8000c46:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c4a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c4e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c52:	429a      	cmp	r2, r3
 8000c54:	d909      	bls.n	8000c6a <__udivmoddi4+0x62>
 8000c56:	18fb      	adds	r3, r7, r3
 8000c58:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000c5c:	f080 80ea 	bcs.w	8000e34 <__udivmoddi4+0x22c>
 8000c60:	429a      	cmp	r2, r3
 8000c62:	f240 80e7 	bls.w	8000e34 <__udivmoddi4+0x22c>
 8000c66:	3902      	subs	r1, #2
 8000c68:	443b      	add	r3, r7
 8000c6a:	1a9a      	subs	r2, r3, r2
 8000c6c:	b2a3      	uxth	r3, r4
 8000c6e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c72:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c7a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c7e:	459c      	cmp	ip, r3
 8000c80:	d909      	bls.n	8000c96 <__udivmoddi4+0x8e>
 8000c82:	18fb      	adds	r3, r7, r3
 8000c84:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000c88:	f080 80d6 	bcs.w	8000e38 <__udivmoddi4+0x230>
 8000c8c:	459c      	cmp	ip, r3
 8000c8e:	f240 80d3 	bls.w	8000e38 <__udivmoddi4+0x230>
 8000c92:	443b      	add	r3, r7
 8000c94:	3802      	subs	r0, #2
 8000c96:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c9a:	eba3 030c 	sub.w	r3, r3, ip
 8000c9e:	2100      	movs	r1, #0
 8000ca0:	b11d      	cbz	r5, 8000caa <__udivmoddi4+0xa2>
 8000ca2:	40f3      	lsrs	r3, r6
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	e9c5 3200 	strd	r3, r2, [r5]
 8000caa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cae:	428b      	cmp	r3, r1
 8000cb0:	d905      	bls.n	8000cbe <__udivmoddi4+0xb6>
 8000cb2:	b10d      	cbz	r5, 8000cb8 <__udivmoddi4+0xb0>
 8000cb4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cb8:	2100      	movs	r1, #0
 8000cba:	4608      	mov	r0, r1
 8000cbc:	e7f5      	b.n	8000caa <__udivmoddi4+0xa2>
 8000cbe:	fab3 f183 	clz	r1, r3
 8000cc2:	2900      	cmp	r1, #0
 8000cc4:	d146      	bne.n	8000d54 <__udivmoddi4+0x14c>
 8000cc6:	4573      	cmp	r3, lr
 8000cc8:	d302      	bcc.n	8000cd0 <__udivmoddi4+0xc8>
 8000cca:	4282      	cmp	r2, r0
 8000ccc:	f200 8105 	bhi.w	8000eda <__udivmoddi4+0x2d2>
 8000cd0:	1a84      	subs	r4, r0, r2
 8000cd2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cd6:	2001      	movs	r0, #1
 8000cd8:	4690      	mov	r8, r2
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	d0e5      	beq.n	8000caa <__udivmoddi4+0xa2>
 8000cde:	e9c5 4800 	strd	r4, r8, [r5]
 8000ce2:	e7e2      	b.n	8000caa <__udivmoddi4+0xa2>
 8000ce4:	2a00      	cmp	r2, #0
 8000ce6:	f000 8090 	beq.w	8000e0a <__udivmoddi4+0x202>
 8000cea:	fab2 f682 	clz	r6, r2
 8000cee:	2e00      	cmp	r6, #0
 8000cf0:	f040 80a4 	bne.w	8000e3c <__udivmoddi4+0x234>
 8000cf4:	1a8a      	subs	r2, r1, r2
 8000cf6:	0c03      	lsrs	r3, r0, #16
 8000cf8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cfc:	b280      	uxth	r0, r0
 8000cfe:	b2bc      	uxth	r4, r7
 8000d00:	2101      	movs	r1, #1
 8000d02:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d06:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d0e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d907      	bls.n	8000d26 <__udivmoddi4+0x11e>
 8000d16:	18fb      	adds	r3, r7, r3
 8000d18:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000d1c:	d202      	bcs.n	8000d24 <__udivmoddi4+0x11c>
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	f200 80e0 	bhi.w	8000ee4 <__udivmoddi4+0x2dc>
 8000d24:	46c4      	mov	ip, r8
 8000d26:	1a9b      	subs	r3, r3, r2
 8000d28:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d2c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d30:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d34:	fb02 f404 	mul.w	r4, r2, r4
 8000d38:	429c      	cmp	r4, r3
 8000d3a:	d907      	bls.n	8000d4c <__udivmoddi4+0x144>
 8000d3c:	18fb      	adds	r3, r7, r3
 8000d3e:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000d42:	d202      	bcs.n	8000d4a <__udivmoddi4+0x142>
 8000d44:	429c      	cmp	r4, r3
 8000d46:	f200 80ca 	bhi.w	8000ede <__udivmoddi4+0x2d6>
 8000d4a:	4602      	mov	r2, r0
 8000d4c:	1b1b      	subs	r3, r3, r4
 8000d4e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d52:	e7a5      	b.n	8000ca0 <__udivmoddi4+0x98>
 8000d54:	f1c1 0620 	rsb	r6, r1, #32
 8000d58:	408b      	lsls	r3, r1
 8000d5a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	fa0e f401 	lsl.w	r4, lr, r1
 8000d64:	fa20 f306 	lsr.w	r3, r0, r6
 8000d68:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d6c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d70:	4323      	orrs	r3, r4
 8000d72:	fa00 f801 	lsl.w	r8, r0, r1
 8000d76:	fa1f fc87 	uxth.w	ip, r7
 8000d7a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d7e:	0c1c      	lsrs	r4, r3, #16
 8000d80:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d84:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d88:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d92:	d909      	bls.n	8000da8 <__udivmoddi4+0x1a0>
 8000d94:	193c      	adds	r4, r7, r4
 8000d96:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000d9a:	f080 809c 	bcs.w	8000ed6 <__udivmoddi4+0x2ce>
 8000d9e:	45a6      	cmp	lr, r4
 8000da0:	f240 8099 	bls.w	8000ed6 <__udivmoddi4+0x2ce>
 8000da4:	3802      	subs	r0, #2
 8000da6:	443c      	add	r4, r7
 8000da8:	eba4 040e 	sub.w	r4, r4, lr
 8000dac:	fa1f fe83 	uxth.w	lr, r3
 8000db0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000db4:	fb09 4413 	mls	r4, r9, r3, r4
 8000db8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dbc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dc0:	45a4      	cmp	ip, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1ce>
 8000dc4:	193c      	adds	r4, r7, r4
 8000dc6:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000dca:	f080 8082 	bcs.w	8000ed2 <__udivmoddi4+0x2ca>
 8000dce:	45a4      	cmp	ip, r4
 8000dd0:	d97f      	bls.n	8000ed2 <__udivmoddi4+0x2ca>
 8000dd2:	3b02      	subs	r3, #2
 8000dd4:	443c      	add	r4, r7
 8000dd6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dda:	eba4 040c 	sub.w	r4, r4, ip
 8000dde:	fba0 ec02 	umull	lr, ip, r0, r2
 8000de2:	4564      	cmp	r4, ip
 8000de4:	4673      	mov	r3, lr
 8000de6:	46e1      	mov	r9, ip
 8000de8:	d362      	bcc.n	8000eb0 <__udivmoddi4+0x2a8>
 8000dea:	d05f      	beq.n	8000eac <__udivmoddi4+0x2a4>
 8000dec:	b15d      	cbz	r5, 8000e06 <__udivmoddi4+0x1fe>
 8000dee:	ebb8 0203 	subs.w	r2, r8, r3
 8000df2:	eb64 0409 	sbc.w	r4, r4, r9
 8000df6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dfa:	fa22 f301 	lsr.w	r3, r2, r1
 8000dfe:	431e      	orrs	r6, r3
 8000e00:	40cc      	lsrs	r4, r1
 8000e02:	e9c5 6400 	strd	r6, r4, [r5]
 8000e06:	2100      	movs	r1, #0
 8000e08:	e74f      	b.n	8000caa <__udivmoddi4+0xa2>
 8000e0a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e0e:	0c01      	lsrs	r1, r0, #16
 8000e10:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e14:	b280      	uxth	r0, r0
 8000e16:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e1a:	463b      	mov	r3, r7
 8000e1c:	4638      	mov	r0, r7
 8000e1e:	463c      	mov	r4, r7
 8000e20:	46b8      	mov	r8, r7
 8000e22:	46be      	mov	lr, r7
 8000e24:	2620      	movs	r6, #32
 8000e26:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e2a:	eba2 0208 	sub.w	r2, r2, r8
 8000e2e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e32:	e766      	b.n	8000d02 <__udivmoddi4+0xfa>
 8000e34:	4601      	mov	r1, r0
 8000e36:	e718      	b.n	8000c6a <__udivmoddi4+0x62>
 8000e38:	4610      	mov	r0, r2
 8000e3a:	e72c      	b.n	8000c96 <__udivmoddi4+0x8e>
 8000e3c:	f1c6 0220 	rsb	r2, r6, #32
 8000e40:	fa2e f302 	lsr.w	r3, lr, r2
 8000e44:	40b7      	lsls	r7, r6
 8000e46:	40b1      	lsls	r1, r6
 8000e48:	fa20 f202 	lsr.w	r2, r0, r2
 8000e4c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e50:	430a      	orrs	r2, r1
 8000e52:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e56:	b2bc      	uxth	r4, r7
 8000e58:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e5c:	0c11      	lsrs	r1, r2, #16
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb08 f904 	mul.w	r9, r8, r4
 8000e66:	40b0      	lsls	r0, r6
 8000e68:	4589      	cmp	r9, r1
 8000e6a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e6e:	b280      	uxth	r0, r0
 8000e70:	d93e      	bls.n	8000ef0 <__udivmoddi4+0x2e8>
 8000e72:	1879      	adds	r1, r7, r1
 8000e74:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000e78:	d201      	bcs.n	8000e7e <__udivmoddi4+0x276>
 8000e7a:	4589      	cmp	r9, r1
 8000e7c:	d81f      	bhi.n	8000ebe <__udivmoddi4+0x2b6>
 8000e7e:	eba1 0109 	sub.w	r1, r1, r9
 8000e82:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e86:	fb09 f804 	mul.w	r8, r9, r4
 8000e8a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e8e:	b292      	uxth	r2, r2
 8000e90:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e94:	4542      	cmp	r2, r8
 8000e96:	d229      	bcs.n	8000eec <__udivmoddi4+0x2e4>
 8000e98:	18ba      	adds	r2, r7, r2
 8000e9a:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000e9e:	d2c4      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea0:	4542      	cmp	r2, r8
 8000ea2:	d2c2      	bcs.n	8000e2a <__udivmoddi4+0x222>
 8000ea4:	f1a9 0102 	sub.w	r1, r9, #2
 8000ea8:	443a      	add	r2, r7
 8000eaa:	e7be      	b.n	8000e2a <__udivmoddi4+0x222>
 8000eac:	45f0      	cmp	r8, lr
 8000eae:	d29d      	bcs.n	8000dec <__udivmoddi4+0x1e4>
 8000eb0:	ebbe 0302 	subs.w	r3, lr, r2
 8000eb4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000eb8:	3801      	subs	r0, #1
 8000eba:	46e1      	mov	r9, ip
 8000ebc:	e796      	b.n	8000dec <__udivmoddi4+0x1e4>
 8000ebe:	eba7 0909 	sub.w	r9, r7, r9
 8000ec2:	4449      	add	r1, r9
 8000ec4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ec8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ecc:	fb09 f804 	mul.w	r8, r9, r4
 8000ed0:	e7db      	b.n	8000e8a <__udivmoddi4+0x282>
 8000ed2:	4673      	mov	r3, lr
 8000ed4:	e77f      	b.n	8000dd6 <__udivmoddi4+0x1ce>
 8000ed6:	4650      	mov	r0, sl
 8000ed8:	e766      	b.n	8000da8 <__udivmoddi4+0x1a0>
 8000eda:	4608      	mov	r0, r1
 8000edc:	e6fd      	b.n	8000cda <__udivmoddi4+0xd2>
 8000ede:	443b      	add	r3, r7
 8000ee0:	3a02      	subs	r2, #2
 8000ee2:	e733      	b.n	8000d4c <__udivmoddi4+0x144>
 8000ee4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ee8:	443b      	add	r3, r7
 8000eea:	e71c      	b.n	8000d26 <__udivmoddi4+0x11e>
 8000eec:	4649      	mov	r1, r9
 8000eee:	e79c      	b.n	8000e2a <__udivmoddi4+0x222>
 8000ef0:	eba1 0109 	sub.w	r1, r1, r9
 8000ef4:	46c4      	mov	ip, r8
 8000ef6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000efa:	fb09 f804 	mul.w	r8, r9, r4
 8000efe:	e7c4      	b.n	8000e8a <__udivmoddi4+0x282>

08000f00 <__aeabi_idiv0>:
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop

08000f04 <send_motion_packet>:
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */



void send_motion_packet(uint8_t motion_state, uint8_t lidar_x_upper, uint8_t lidar_x_lower, uint8_t lidar_y_upper, uint8_t lidar_y_lower) {
 8000f04:	b590      	push	{r4, r7, lr}
 8000f06:	b085      	sub	sp, #20
 8000f08:	af00      	add	r7, sp, #0
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	4608      	mov	r0, r1
 8000f0e:	4611      	mov	r1, r2
 8000f10:	461a      	mov	r2, r3
 8000f12:	4623      	mov	r3, r4
 8000f14:	71fb      	strb	r3, [r7, #7]
 8000f16:	4603      	mov	r3, r0
 8000f18:	71bb      	strb	r3, [r7, #6]
 8000f1a:	460b      	mov	r3, r1
 8000f1c:	717b      	strb	r3, [r7, #5]
 8000f1e:	4613      	mov	r3, r2
 8000f20:	713b      	strb	r3, [r7, #4]

	uint8_t packet[7];

	packet[0] = 0xAA;
 8000f22:	23aa      	movs	r3, #170	@ 0xaa
 8000f24:	723b      	strb	r3, [r7, #8]

	packet[1] = motion_state;
 8000f26:	79fb      	ldrb	r3, [r7, #7]
 8000f28:	727b      	strb	r3, [r7, #9]

	packet[2] = lidar_x_upper;
 8000f2a:	79bb      	ldrb	r3, [r7, #6]
 8000f2c:	72bb      	strb	r3, [r7, #10]

	packet[3] = lidar_x_lower;
 8000f2e:	797b      	ldrb	r3, [r7, #5]
 8000f30:	72fb      	strb	r3, [r7, #11]

	packet[4] = lidar_y_upper;
 8000f32:	793b      	ldrb	r3, [r7, #4]
 8000f34:	733b      	strb	r3, [r7, #12]

	packet[5] = lidar_y_lower;
 8000f36:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f3a:	737b      	strb	r3, [r7, #13]

	packet[6] = 0x00;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	73bb      	strb	r3, [r7, #14]


	printf("motion state: %d; x: %d, y: %d\n\r", motion_state, ((lidar_x_upper<<8)|lidar_x_lower), ((lidar_y_upper<<8)| lidar_y_lower));
 8000f40:	79f9      	ldrb	r1, [r7, #7]
 8000f42:	79bb      	ldrb	r3, [r7, #6]
 8000f44:	021a      	lsls	r2, r3, #8
 8000f46:	797b      	ldrb	r3, [r7, #5]
 8000f48:	ea42 0003 	orr.w	r0, r2, r3
 8000f4c:	793b      	ldrb	r3, [r7, #4]
 8000f4e:	021a      	lsls	r2, r3, #8
 8000f50:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	4602      	mov	r2, r0
 8000f58:	4807      	ldr	r0, [pc, #28]	@ (8000f78 <send_motion_packet+0x74>)
 8000f5a:	f008 f8d3 	bl	8009104 <iprintf>



	HAL_UART_Transmit(&huart2, packet, 7, HAL_MAX_DELAY);
 8000f5e:	f107 0108 	add.w	r1, r7, #8
 8000f62:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f66:	2207      	movs	r2, #7
 8000f68:	4804      	ldr	r0, [pc, #16]	@ (8000f7c <send_motion_packet+0x78>)
 8000f6a:	f005 faad 	bl	80064c8 <HAL_UART_Transmit>

}
 8000f6e:	bf00      	nop
 8000f70:	3714      	adds	r7, #20
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd90      	pop	{r4, r7, pc}
 8000f76:	bf00      	nop
 8000f78:	0800b018 	.word	0x0800b018
 8000f7c:	20000344 	.word	0x20000344

08000f80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f80:	b590      	push	{r4, r7, lr}
 8000f82:	b0ab      	sub	sp, #172	@ 0xac
 8000f84:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f86:	f001 f95e 	bl	8002246 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f8a:	f000 f9fb 	bl	8001384 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f8e:	f000 fbc7 	bl	8001720 <MX_GPIO_Init>
  MX_I2C1_Init();
 8000f92:	f000 faa1 	bl	80014d8 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 8000f96:	f000 fadf 	bl	8001558 <MX_LPUART1_UART_Init>
  MX_USART2_UART_Init();
 8000f9a:	f000 fb29 	bl	80015f0 <MX_USART2_UART_Init>
  MX_ADC1_Init();
 8000f9e:	f000 fa37 	bl	8001410 <MX_ADC1_Init>
  MX_USART3_UART_Init();
 8000fa2:	f000 fb71 	bl	8001688 <MX_USART3_UART_Init>





   buf[0] = 0x20;
 8000fa6:	2320      	movs	r3, #32
 8000fa8:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48





   buf[1] = 0x97;
 8000fac:	2397      	movs	r3, #151	@ 0x97
 8000fae:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49





   HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &buf[0], 2, 1000);
 8000fb2:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8000fb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fba:	9300      	str	r3, [sp, #0]
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	2132      	movs	r1, #50	@ 0x32
 8000fc0:	48b2      	ldr	r0, [pc, #712]	@ (800128c <main+0x30c>)
 8000fc2:	f003 f821 	bl	8004008 <HAL_I2C_Master_Transmit>



   float accel_buffer[SAMPLE_WINDOW];

   int index = 0;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

   int sample_count = 0;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

   HAL_UART_Receive_IT(&huart3, lidar_buf, 4);
 8000fd2:	2204      	movs	r2, #4
 8000fd4:	49ae      	ldr	r1, [pc, #696]	@ (8001290 <main+0x310>)
 8000fd6:	48af      	ldr	r0, [pc, #700]	@ (8001294 <main+0x314>)
 8000fd8:	f005 fb04 	bl	80065e4 <HAL_UART_Receive_IT>

   int count = 0;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94



   printf("New Start\n\r");
 8000fe2:	48ad      	ldr	r0, [pc, #692]	@ (8001298 <main+0x318>)
 8000fe4:	f008 f88e 	bl	8009104 <iprintf>

   uint8_t motion_state = STATE_IDLE;
 8000fe8:	2301      	movs	r3, #1
 8000fea:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93


   HAL_NVIC_SetPriority(ADC1_IRQn, 1, 0);
 8000fee:	2200      	movs	r2, #0
 8000ff0:	2101      	movs	r1, #1
 8000ff2:	2012      	movs	r0, #18
 8000ff4:	f002 fce9 	bl	80039ca <HAL_NVIC_SetPriority>
   HAL_ADC_Start_IT(&hadc1);
 8000ff8:	48a8      	ldr	r0, [pc, #672]	@ (800129c <main+0x31c>)
 8000ffa:	f001 fccd 	bl	8002998 <HAL_ADC_Start_IT>



	    // Read all 3 axes at once (6 bytes from 0x28 = OUT_X_L_A)

	    uint8_t reg = 0xA8; // auto-increment enabled
 8000ffe:	23a8      	movs	r3, #168	@ 0xa8
 8001000:	72fb      	strb	r3, [r7, #11]

	    HAL_I2C_Master_Transmit(&hi2c1, SAD_W_M, &reg, 1, 1000);
 8001002:	f107 020b 	add.w	r2, r7, #11
 8001006:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	2301      	movs	r3, #1
 800100e:	2132      	movs	r1, #50	@ 0x32
 8001010:	489e      	ldr	r0, [pc, #632]	@ (800128c <main+0x30c>)
 8001012:	f002 fff9 	bl	8004008 <HAL_I2C_Master_Transmit>

	    uint8_t data[6];

	    HAL_I2C_Master_Receive(&hi2c1, SAD_R_M, data, 6, 1000);
 8001016:	1d3a      	adds	r2, r7, #4
 8001018:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800101c:	9300      	str	r3, [sp, #0]
 800101e:	2306      	movs	r3, #6
 8001020:	2133      	movs	r1, #51	@ 0x33
 8001022:	489a      	ldr	r0, [pc, #616]	@ (800128c <main+0x30c>)
 8001024:	f003 f908 	bl	8004238 <HAL_I2C_Master_Receive>



	    int16_t x_raw = (int16_t)((data[1] << 8) | data[0]);
 8001028:	797b      	ldrb	r3, [r7, #5]
 800102a:	b21b      	sxth	r3, r3
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	b21a      	sxth	r2, r3
 8001030:	793b      	ldrb	r3, [r7, #4]
 8001032:	b21b      	sxth	r3, r3
 8001034:	4313      	orrs	r3, r2
 8001036:	f8a7 307e 	strh.w	r3, [r7, #126]	@ 0x7e

	    int16_t y_raw = (int16_t)((data[3] << 8) | data[2]);
 800103a:	79fb      	ldrb	r3, [r7, #7]
 800103c:	b21b      	sxth	r3, r3
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b21a      	sxth	r2, r3
 8001042:	79bb      	ldrb	r3, [r7, #6]
 8001044:	b21b      	sxth	r3, r3
 8001046:	4313      	orrs	r3, r2
 8001048:	f8a7 307c 	strh.w	r3, [r7, #124]	@ 0x7c

	    int16_t z_raw = (int16_t)((data[5] << 8) | data[4]);
 800104c:	7a7b      	ldrb	r3, [r7, #9]
 800104e:	b21b      	sxth	r3, r3
 8001050:	021b      	lsls	r3, r3, #8
 8001052:	b21a      	sxth	r2, r3
 8001054:	7a3b      	ldrb	r3, [r7, #8]
 8001056:	b21b      	sxth	r3, r3
 8001058:	4313      	orrs	r3, r2
 800105a:	f8a7 307a 	strh.w	r3, [r7, #122]	@ 0x7a



	    float x = x_raw * 0.00006104f;
 800105e:	f9b7 307e 	ldrsh.w	r3, [r7, #126]	@ 0x7e
 8001062:	ee07 3a90 	vmov	s15, r3
 8001066:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800106a:	ed9f 7a8d 	vldr	s14, [pc, #564]	@ 80012a0 <main+0x320>
 800106e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001072:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74

	    float y = y_raw * 0.00006104f;
 8001076:	f9b7 307c 	ldrsh.w	r3, [r7, #124]	@ 0x7c
 800107a:	ee07 3a90 	vmov	s15, r3
 800107e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001082:	ed9f 7a87 	vldr	s14, [pc, #540]	@ 80012a0 <main+0x320>
 8001086:	ee67 7a87 	vmul.f32	s15, s15, s14
 800108a:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70

	    float z = z_raw * 0.00006104f;
 800108e:	f9b7 307a 	ldrsh.w	r3, [r7, #122]	@ 0x7a
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800109a:	ed9f 7a81 	vldr	s14, [pc, #516]	@ 80012a0 <main+0x320>
 800109e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80010a2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c



	    // Calculate total movement (simplified magnitude)

	    float magnitude = fabsf(x) + fabsf(y) + fabsf(z);
 80010a6:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 80010aa:	eeb0 7ae7 	vabs.f32	s14, s15
 80010ae:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80010b2:	eef0 7ae7 	vabs.f32	s15, s15
 80010b6:	ee37 7a27 	vadd.f32	s14, s14, s15
 80010ba:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80010be:	eef0 7ae7 	vabs.f32	s15, s15
 80010c2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010c6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68



	    // Save to buffer

	    accel_buffer[index] = magnitude;
 80010ca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010ce:	009b      	lsls	r3, r3, #2
 80010d0:	33a0      	adds	r3, #160	@ 0xa0
 80010d2:	443b      	add	r3, r7
 80010d4:	3b94      	subs	r3, #148	@ 0x94
 80010d6:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80010d8:	601a      	str	r2, [r3, #0]

	    index = (index + 1) % SAMPLE_WINDOW;
 80010da:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80010de:	1c5a      	adds	r2, r3, #1
 80010e0:	4b70      	ldr	r3, [pc, #448]	@ (80012a4 <main+0x324>)
 80010e2:	fb83 1302 	smull	r1, r3, r3, r2
 80010e6:	4413      	add	r3, r2
 80010e8:	10d9      	asrs	r1, r3, #3
 80010ea:	17d3      	asrs	r3, r2, #31
 80010ec:	1ac9      	subs	r1, r1, r3
 80010ee:	460b      	mov	r3, r1
 80010f0:	011b      	lsls	r3, r3, #4
 80010f2:	1a5b      	subs	r3, r3, r1
 80010f4:	1ad3      	subs	r3, r2, r3
 80010f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

	    sample_count++;
 80010fa:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80010fe:	3301      	adds	r3, #1
 8001100:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98

	    // Default to IDLE



	    if (sample_count >= SAMPLE_WINDOW)
 8001104:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8001108:	2b0e      	cmp	r3, #14
 800110a:	dd70      	ble.n	80011ee <main+0x26e>

	    {

	        float mean = 0.0f;
 800110c:	f04f 0300 	mov.w	r3, #0
 8001110:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c

	        float max = accel_buffer[0];
 8001114:	68fb      	ldr	r3, [r7, #12]
 8001116:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	        float min = accel_buffer[0];
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84



	        for (int i = 0; i < SAMPLE_WINDOW; i++)
 8001120:	2300      	movs	r3, #0
 8001122:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001126:	e02c      	b.n	8001182 <main+0x202>

	        {

	            float val = accel_buffer[i];
 8001128:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	33a0      	adds	r3, #160	@ 0xa0
 8001130:	443b      	add	r3, r7
 8001132:	3b94      	subs	r3, #148	@ 0x94
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	663b      	str	r3, [r7, #96]	@ 0x60

	            mean += val;
 8001138:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 800113c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8001140:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001144:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c

	            if (val > max) max = val;
 8001148:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 800114c:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001150:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001158:	dd02      	ble.n	8001160 <main+0x1e0>
 800115a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800115c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

	            if (val < min) min = val;
 8001160:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8001164:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001168:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800116c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001170:	d502      	bpl.n	8001178 <main+0x1f8>
 8001172:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001174:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
	        for (int i = 0; i < SAMPLE_WINDOW; i++)
 8001178:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800117c:	3301      	adds	r3, #1
 800117e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001182:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001186:	2b0e      	cmp	r3, #14
 8001188:	ddce      	ble.n	8001128 <main+0x1a8>

	        }

	        mean /= SAMPLE_WINDOW;
 800118a:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 800118e:	eef2 6a0e 	vmov.f32	s13, #46	@ 0x41700000  15.0
 8001192:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001196:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c



	        float peak_to_peak = max - min;
 800119a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 800119e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80011a2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80011a6:	edc7 7a19 	vstr	s15, [r7, #100]	@ 0x64



	        //Motion classification
	        if (count >= 2) {
 80011aa:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80011ae:	2b01      	cmp	r3, #1
 80011b0:	dd03      	ble.n	80011ba <main+0x23a>
				motion_state = STATE_DRAG;
 80011b2:	2303      	movs	r3, #3
 80011b4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
 80011b8:	e016      	b.n	80011e8 <main+0x268>

				//printf("DRAG detected! P2P=%.4f, Var=%.6f\n\r", peak_to_peak, variance);
			}	else if ((peak_to_peak > TAP_P2P_THRESHOLD) || (ADC_VAL > 150))	{
 80011ba:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 80011be:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 80012a8 <main+0x328>
 80011c2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011ca:	dc03      	bgt.n	80011d4 <main+0x254>
 80011cc:	4b37      	ldr	r3, [pc, #220]	@ (80012ac <main+0x32c>)
 80011ce:	881b      	ldrh	r3, [r3, #0]
 80011d0:	2b96      	cmp	r3, #150	@ 0x96
 80011d2:	d906      	bls.n	80011e2 <main+0x262>

	    	    //printf("Lidar receive state: %d\n\r", lidar_ready);

	    	    motion_state = STATE_TAP;
 80011d4:	2302      	movs	r3, #2
 80011d6:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93
	    	    count = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80011e0:	e002      	b.n	80011e8 <main+0x268>



	            //printf("IDLE. Var=%.6f | P2P=%.4f\n\r", variance, peak_to_peak);

	            motion_state = STATE_IDLE;
 80011e2:	2301      	movs	r3, #1
 80011e4:	f887 3093 	strb.w	r3, [r7, #147]	@ 0x93

	        }



	        sample_count = 0;
 80011e8:	2300      	movs	r3, #0
 80011ea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
	    }




	    if (lidar_ready) {
 80011ee:	4b30      	ldr	r3, [pc, #192]	@ (80012b0 <main+0x330>)
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	f000 809f 	beq.w	8001336 <main+0x3b6>
	        lidar_ready = 0;
 80011f8:	4b2d      	ldr	r3, [pc, #180]	@ (80012b0 <main+0x330>)
 80011fa:	2200      	movs	r2, #0
 80011fc:	601a      	str	r2, [r3, #0]

	        uint8_t x_up = lidar_buf[0];
 80011fe:	4b24      	ldr	r3, [pc, #144]	@ (8001290 <main+0x310>)
 8001200:	781b      	ldrb	r3, [r3, #0]
 8001202:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
	        uint8_t x_lo = lidar_buf[1];
 8001206:	4b22      	ldr	r3, [pc, #136]	@ (8001290 <main+0x310>)
 8001208:	785b      	ldrb	r3, [r3, #1]
 800120a:	f887 305e 	strb.w	r3, [r7, #94]	@ 0x5e
	        uint8_t y_up = lidar_buf[2];
 800120e:	4b20      	ldr	r3, [pc, #128]	@ (8001290 <main+0x310>)
 8001210:	789b      	ldrb	r3, [r3, #2]
 8001212:	f887 305d 	strb.w	r3, [r7, #93]	@ 0x5d
	        uint8_t y_lo = lidar_buf[3];
 8001216:	4b1e      	ldr	r3, [pc, #120]	@ (8001290 <main+0x310>)
 8001218:	78db      	ldrb	r3, [r3, #3]
 800121a:	f887 305c 	strb.w	r3, [r7, #92]	@ 0x5c

	        int is_zero = (x_up == 0 && x_lo == 0 && y_up == 0 && y_lo == 0);
 800121e:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 8001222:	2b00      	cmp	r3, #0
 8001224:	d10d      	bne.n	8001242 <main+0x2c2>
 8001226:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 800122a:	2b00      	cmp	r3, #0
 800122c:	d109      	bne.n	8001242 <main+0x2c2>
 800122e:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001232:	2b00      	cmp	r3, #0
 8001234:	d105      	bne.n	8001242 <main+0x2c2>
 8001236:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800123a:	2b00      	cmp	r3, #0
 800123c:	d101      	bne.n	8001242 <main+0x2c2>
 800123e:	2301      	movs	r3, #1
 8001240:	e000      	b.n	8001244 <main+0x2c4>
 8001242:	2300      	movs	r3, #0
 8001244:	65bb      	str	r3, [r7, #88]	@ 0x58
	        int was_prev_valid = (prev_lidar_x_upper != 0 || prev_lidar_x_lower != 0 || prev_lidar_y_upper != 0 || prev_lidar_y_lower != 0);
 8001246:	4b1b      	ldr	r3, [pc, #108]	@ (80012b4 <main+0x334>)
 8001248:	781b      	ldrb	r3, [r3, #0]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d10b      	bne.n	8001266 <main+0x2e6>
 800124e:	4b1a      	ldr	r3, [pc, #104]	@ (80012b8 <main+0x338>)
 8001250:	781b      	ldrb	r3, [r3, #0]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d107      	bne.n	8001266 <main+0x2e6>
 8001256:	4b19      	ldr	r3, [pc, #100]	@ (80012bc <main+0x33c>)
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b00      	cmp	r3, #0
 800125c:	d103      	bne.n	8001266 <main+0x2e6>
 800125e:	4b18      	ldr	r3, [pc, #96]	@ (80012c0 <main+0x340>)
 8001260:	781b      	ldrb	r3, [r3, #0]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <main+0x2ea>
 8001266:	2301      	movs	r3, #1
 8001268:	e000      	b.n	800126c <main+0x2ec>
 800126a:	2300      	movs	r3, #0
 800126c:	657b      	str	r3, [r7, #84]	@ 0x54

	        if (is_zero && was_prev_valid && ignore_once == 0) {
 800126e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001270:	2b00      	cmp	r3, #0
 8001272:	d029      	beq.n	80012c8 <main+0x348>
 8001274:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001276:	2b00      	cmp	r3, #0
 8001278:	d026      	beq.n	80012c8 <main+0x348>
 800127a:	4b12      	ldr	r3, [pc, #72]	@ (80012c4 <main+0x344>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	2b00      	cmp	r3, #0
 8001280:	d122      	bne.n	80012c8 <main+0x348>
	            // Ignore this reading and keep the previous coordinates
	            ignore_once = 1;
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <main+0x344>)
 8001284:	2201      	movs	r2, #1
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	e050      	b.n	800132c <main+0x3ac>
 800128a:	bf00      	nop
 800128c:	2000025c 	.word	0x2000025c
 8001290:	2000046c 	.word	0x2000046c
 8001294:	200003d8 	.word	0x200003d8
 8001298:	0800b03c 	.word	0x0800b03c
 800129c:	200001f4 	.word	0x200001f4
 80012a0:	3880029a 	.word	0x3880029a
 80012a4:	88888889 	.word	0x88888889
 80012a8:	3dcccccd 	.word	0x3dcccccd
 80012ac:	2000047c 	.word	0x2000047c
 80012b0:	20000470 	.word	0x20000470
 80012b4:	20000474 	.word	0x20000474
 80012b8:	20000475 	.word	0x20000475
 80012bc:	20000476 	.word	0x20000476
 80012c0:	20000477 	.word	0x20000477
 80012c4:	20000478 	.word	0x20000478
	        } else {
	            // Use new data (even if it’s (0,0) a second time)
	            lidar_x_upper = x_up;
 80012c8:	4a22      	ldr	r2, [pc, #136]	@ (8001354 <main+0x3d4>)
 80012ca:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80012ce:	7013      	strb	r3, [r2, #0]
	            lidar_x_lower = x_lo;
 80012d0:	4a21      	ldr	r2, [pc, #132]	@ (8001358 <main+0x3d8>)
 80012d2:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80012d6:	7013      	strb	r3, [r2, #0]
	            lidar_y_upper = y_up;
 80012d8:	4a20      	ldr	r2, [pc, #128]	@ (800135c <main+0x3dc>)
 80012da:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 80012de:	7013      	strb	r3, [r2, #0]
	            lidar_y_lower = y_lo;
 80012e0:	4a1f      	ldr	r2, [pc, #124]	@ (8001360 <main+0x3e0>)
 80012e2:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 80012e6:	7013      	strb	r3, [r2, #0]

	            // Update previous valid coordinates
	            if (!is_zero) {
 80012e8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d112      	bne.n	8001314 <main+0x394>
	                prev_lidar_x_upper = x_up;
 80012ee:	4a1d      	ldr	r2, [pc, #116]	@ (8001364 <main+0x3e4>)
 80012f0:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
 80012f4:	7013      	strb	r3, [r2, #0]
	                prev_lidar_x_lower = x_lo;
 80012f6:	4a1c      	ldr	r2, [pc, #112]	@ (8001368 <main+0x3e8>)
 80012f8:	f897 305e 	ldrb.w	r3, [r7, #94]	@ 0x5e
 80012fc:	7013      	strb	r3, [r2, #0]
	                prev_lidar_y_upper = y_up;
 80012fe:	4a1b      	ldr	r2, [pc, #108]	@ (800136c <main+0x3ec>)
 8001300:	f897 305d 	ldrb.w	r3, [r7, #93]	@ 0x5d
 8001304:	7013      	strb	r3, [r2, #0]
	                prev_lidar_y_lower = y_lo;
 8001306:	4a1a      	ldr	r2, [pc, #104]	@ (8001370 <main+0x3f0>)
 8001308:	f897 305c 	ldrb.w	r3, [r7, #92]	@ 0x5c
 800130c:	7013      	strb	r3, [r2, #0]
	                ignore_once = 0;
 800130e:	4b19      	ldr	r3, [pc, #100]	@ (8001374 <main+0x3f4>)
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
	            }

	            if (!is_zero) count++;
 8001314:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001316:	2b00      	cmp	r3, #0
 8001318:	d105      	bne.n	8001326 <main+0x3a6>
 800131a:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800131e:	3301      	adds	r3, #1
 8001320:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8001324:	e002      	b.n	800132c <main+0x3ac>
	            else count = -99999;
 8001326:	4b14      	ldr	r3, [pc, #80]	@ (8001378 <main+0x3f8>)
 8001328:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
	        }

	        HAL_UART_Receive_IT(&huart3, lidar_buf, 4);
 800132c:	2204      	movs	r2, #4
 800132e:	4913      	ldr	r1, [pc, #76]	@ (800137c <main+0x3fc>)
 8001330:	4813      	ldr	r0, [pc, #76]	@ (8001380 <main+0x400>)
 8001332:	f005 f957 	bl	80065e4 <HAL_UART_Receive_IT>


//	    if (!(lidar_x_upper != 0 || lidar_x_lower != 0 || lidar_y_upper != 0 || lidar_y_lower != 0)) {
//	    	motion_state = STATE_IDLE;
//	    }
	    send_motion_packet(motion_state, prev_lidar_x_upper, prev_lidar_x_lower, prev_lidar_y_upper, prev_lidar_y_lower);
 8001336:	4b0b      	ldr	r3, [pc, #44]	@ (8001364 <main+0x3e4>)
 8001338:	7819      	ldrb	r1, [r3, #0]
 800133a:	4b0b      	ldr	r3, [pc, #44]	@ (8001368 <main+0x3e8>)
 800133c:	781a      	ldrb	r2, [r3, #0]
 800133e:	4b0b      	ldr	r3, [pc, #44]	@ (800136c <main+0x3ec>)
 8001340:	781c      	ldrb	r4, [r3, #0]
 8001342:	4b0b      	ldr	r3, [pc, #44]	@ (8001370 <main+0x3f0>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	f897 0093 	ldrb.w	r0, [r7, #147]	@ 0x93
 800134a:	9300      	str	r3, [sp, #0]
 800134c:	4623      	mov	r3, r4
 800134e:	f7ff fdd9 	bl	8000f04 <send_motion_packet>
  {
 8001352:	e654      	b.n	8000ffe <main+0x7e>
 8001354:	20000000 	.word	0x20000000
 8001358:	20000001 	.word	0x20000001
 800135c:	20000002 	.word	0x20000002
 8001360:	20000003 	.word	0x20000003
 8001364:	20000474 	.word	0x20000474
 8001368:	20000475 	.word	0x20000475
 800136c:	20000476 	.word	0x20000476
 8001370:	20000477 	.word	0x20000477
 8001374:	20000478 	.word	0x20000478
 8001378:	fffe7961 	.word	0xfffe7961
 800137c:	2000046c 	.word	0x2000046c
 8001380:	200003d8 	.word	0x200003d8

08001384 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	b096      	sub	sp, #88	@ 0x58
 8001388:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800138a:	f107 0314 	add.w	r3, r7, #20
 800138e:	2244      	movs	r2, #68	@ 0x44
 8001390:	2100      	movs	r1, #0
 8001392:	4618      	mov	r0, r3
 8001394:	f007 fec8 	bl	8009128 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	601a      	str	r2, [r3, #0]
 800139e:	605a      	str	r2, [r3, #4]
 80013a0:	609a      	str	r2, [r3, #8]
 80013a2:	60da      	str	r2, [r3, #12]
 80013a4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80013a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80013aa:	f003 fb99 	bl	8004ae0 <HAL_PWREx_ControlVoltageScaling>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80013b4:	f000 fbdc 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80013b8:	2310      	movs	r3, #16
 80013ba:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80013bc:	2301      	movs	r3, #1
 80013be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80013c0:	2300      	movs	r3, #0
 80013c2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80013c4:	2360      	movs	r3, #96	@ 0x60
 80013c6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013cc:	f107 0314 	add.w	r3, r7, #20
 80013d0:	4618      	mov	r0, r3
 80013d2:	f003 fc39 	bl	8004c48 <HAL_RCC_OscConfig>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80013dc:	f000 fbc8 	bl	8001b70 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013e0:	230f      	movs	r3, #15
 80013e2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013e8:	2300      	movs	r3, #0
 80013ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80013ec:	2300      	movs	r3, #0
 80013ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80013f0:	2300      	movs	r3, #0
 80013f2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80013f4:	463b      	mov	r3, r7
 80013f6:	2100      	movs	r1, #0
 80013f8:	4618      	mov	r0, r3
 80013fa:	f004 f83f 	bl	800547c <HAL_RCC_ClockConfig>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8001404:	f000 fbb4 	bl	8001b70 <Error_Handler>
  }
}
 8001408:	bf00      	nop
 800140a:	3758      	adds	r7, #88	@ 0x58
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}

08001410 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0



  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001416:	463b      	mov	r3, r7
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
 8001424:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001426:	4b29      	ldr	r3, [pc, #164]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001428:	4a29      	ldr	r2, [pc, #164]	@ (80014d0 <MX_ADC1_Init+0xc0>)
 800142a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800142c:	4b27      	ldr	r3, [pc, #156]	@ (80014cc <MX_ADC1_Init+0xbc>)
 800142e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8001432:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001434:	4b25      	ldr	r3, [pc, #148]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001436:	2200      	movs	r2, #0
 8001438:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800143a:	4b24      	ldr	r3, [pc, #144]	@ (80014cc <MX_ADC1_Init+0xbc>)
 800143c:	2200      	movs	r2, #0
 800143e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001440:	4b22      	ldr	r3, [pc, #136]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001442:	2200      	movs	r2, #0
 8001444:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001446:	4b21      	ldr	r3, [pc, #132]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001448:	2204      	movs	r2, #4
 800144a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800144c:	4b1f      	ldr	r3, [pc, #124]	@ (80014cc <MX_ADC1_Init+0xbc>)
 800144e:	2200      	movs	r2, #0
 8001450:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001452:	4b1e      	ldr	r3, [pc, #120]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001454:	2201      	movs	r2, #1
 8001456:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8001458:	4b1c      	ldr	r3, [pc, #112]	@ (80014cc <MX_ADC1_Init+0xbc>)
 800145a:	2201      	movs	r2, #1
 800145c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800145e:	4b1b      	ldr	r3, [pc, #108]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001460:	2200      	movs	r2, #0
 8001462:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001466:	4b19      	ldr	r3, [pc, #100]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001468:	2200      	movs	r2, #0
 800146a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800146c:	4b17      	ldr	r3, [pc, #92]	@ (80014cc <MX_ADC1_Init+0xbc>)
 800146e:	2200      	movs	r2, #0
 8001470:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001472:	4b16      	ldr	r3, [pc, #88]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001474:	2200      	movs	r2, #0
 8001476:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800147a:	4b14      	ldr	r3, [pc, #80]	@ (80014cc <MX_ADC1_Init+0xbc>)
 800147c:	2200      	movs	r2, #0
 800147e:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8001480:	4b12      	ldr	r3, [pc, #72]	@ (80014cc <MX_ADC1_Init+0xbc>)
 8001482:	2200      	movs	r2, #0
 8001484:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001488:	4810      	ldr	r0, [pc, #64]	@ (80014cc <MX_ADC1_Init+0xbc>)
 800148a:	f001 f93f 	bl	800270c <HAL_ADC_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8001494:	f000 fb6c 	bl	8001b70 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8001498:	4b0e      	ldr	r3, [pc, #56]	@ (80014d4 <MX_ADC1_Init+0xc4>)
 800149a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800149c:	2306      	movs	r3, #6
 800149e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80014a0:	2307      	movs	r3, #7
 80014a2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80014a4:	237f      	movs	r3, #127	@ 0x7f
 80014a6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80014a8:	2304      	movs	r3, #4
 80014aa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80014ac:	2300      	movs	r3, #0
 80014ae:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80014b0:	463b      	mov	r3, r7
 80014b2:	4619      	mov	r1, r3
 80014b4:	4805      	ldr	r0, [pc, #20]	@ (80014cc <MX_ADC1_Init+0xbc>)
 80014b6:	f001 fcf9 	bl	8002eac <HAL_ADC_ConfigChannel>
 80014ba:	4603      	mov	r3, r0
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d001      	beq.n	80014c4 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 80014c0:	f000 fb56 	bl	8001b70 <Error_Handler>



  /* USER CODE END ADC1_Init 2 */

}
 80014c4:	bf00      	nop
 80014c6:	3718      	adds	r7, #24
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	200001f4 	.word	0x200001f4
 80014d0:	50040000 	.word	0x50040000
 80014d4:	04300002 	.word	0x04300002

080014d8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_Init 1 */



  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80014dc:	4b1b      	ldr	r3, [pc, #108]	@ (800154c <MX_I2C1_Init+0x74>)
 80014de:	4a1c      	ldr	r2, [pc, #112]	@ (8001550 <MX_I2C1_Init+0x78>)
 80014e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00100D14;
 80014e2:	4b1a      	ldr	r3, [pc, #104]	@ (800154c <MX_I2C1_Init+0x74>)
 80014e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001554 <MX_I2C1_Init+0x7c>)
 80014e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80014e8:	4b18      	ldr	r3, [pc, #96]	@ (800154c <MX_I2C1_Init+0x74>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80014ee:	4b17      	ldr	r3, [pc, #92]	@ (800154c <MX_I2C1_Init+0x74>)
 80014f0:	2201      	movs	r2, #1
 80014f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80014f4:	4b15      	ldr	r3, [pc, #84]	@ (800154c <MX_I2C1_Init+0x74>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80014fa:	4b14      	ldr	r3, [pc, #80]	@ (800154c <MX_I2C1_Init+0x74>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001500:	4b12      	ldr	r3, [pc, #72]	@ (800154c <MX_I2C1_Init+0x74>)
 8001502:	2200      	movs	r2, #0
 8001504:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001506:	4b11      	ldr	r3, [pc, #68]	@ (800154c <MX_I2C1_Init+0x74>)
 8001508:	2200      	movs	r2, #0
 800150a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800150c:	4b0f      	ldr	r3, [pc, #60]	@ (800154c <MX_I2C1_Init+0x74>)
 800150e:	2200      	movs	r2, #0
 8001510:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001512:	480e      	ldr	r0, [pc, #56]	@ (800154c <MX_I2C1_Init+0x74>)
 8001514:	f002 fcdc 	bl	8003ed0 <HAL_I2C_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800151e:	f000 fb27 	bl	8001b70 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001522:	2100      	movs	r1, #0
 8001524:	4809      	ldr	r0, [pc, #36]	@ (800154c <MX_I2C1_Init+0x74>)
 8001526:	f003 fa23 	bl	8004970 <HAL_I2CEx_ConfigAnalogFilter>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001530:	f000 fb1e 	bl	8001b70 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001534:	2100      	movs	r1, #0
 8001536:	4805      	ldr	r0, [pc, #20]	@ (800154c <MX_I2C1_Init+0x74>)
 8001538:	f003 fa65 	bl	8004a06 <HAL_I2CEx_ConfigDigitalFilter>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001542:	f000 fb15 	bl	8001b70 <Error_Handler>



  /* USER CODE END I2C1_Init 2 */

}
 8001546:	bf00      	nop
 8001548:	bd80      	pop	{r7, pc}
 800154a:	bf00      	nop
 800154c:	2000025c 	.word	0x2000025c
 8001550:	40005400 	.word	0x40005400
 8001554:	00100d14 	.word	0x00100d14

08001558 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_Init 1 */



  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800155c:	4b22      	ldr	r3, [pc, #136]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800155e:	4a23      	ldr	r2, [pc, #140]	@ (80015ec <MX_LPUART1_UART_Init+0x94>)
 8001560:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001562:	4b21      	ldr	r3, [pc, #132]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001564:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001568:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800156a:	4b1f      	ldr	r3, [pc, #124]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800156c:	2200      	movs	r2, #0
 800156e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001570:	4b1d      	ldr	r3, [pc, #116]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001572:	2200      	movs	r2, #0
 8001574:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8001576:	4b1c      	ldr	r3, [pc, #112]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001578:	2200      	movs	r2, #0
 800157a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800157c:	4b1a      	ldr	r3, [pc, #104]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800157e:	220c      	movs	r2, #12
 8001580:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001582:	4b19      	ldr	r3, [pc, #100]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001584:	2200      	movs	r2, #0
 8001586:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001588:	4b17      	ldr	r3, [pc, #92]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800158a:	2200      	movs	r2, #0
 800158c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800158e:	4b16      	ldr	r3, [pc, #88]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001590:	2200      	movs	r2, #0
 8001592:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001594:	4b14      	ldr	r3, [pc, #80]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 8001596:	2200      	movs	r2, #0
 8001598:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800159a:	4b13      	ldr	r3, [pc, #76]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 800159c:	2200      	movs	r2, #0
 800159e:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80015a0:	4811      	ldr	r0, [pc, #68]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 80015a2:	f004 ff41 	bl	8006428 <HAL_UART_Init>
 80015a6:	4603      	mov	r3, r0
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d001      	beq.n	80015b0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80015ac:	f000 fae0 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015b0:	2100      	movs	r1, #0
 80015b2:	480d      	ldr	r0, [pc, #52]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 80015b4:	f006 ffc3 	bl	800853e <HAL_UARTEx_SetTxFifoThreshold>
 80015b8:	4603      	mov	r3, r0
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d001      	beq.n	80015c2 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015be:	f000 fad7 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015c2:	2100      	movs	r1, #0
 80015c4:	4808      	ldr	r0, [pc, #32]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 80015c6:	f006 fff8 	bl	80085ba <HAL_UARTEx_SetRxFifoThreshold>
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d001      	beq.n	80015d4 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015d0:	f000 face 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80015d4:	4804      	ldr	r0, [pc, #16]	@ (80015e8 <MX_LPUART1_UART_Init+0x90>)
 80015d6:	f006 ff79 	bl	80084cc <HAL_UARTEx_DisableFifoMode>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015e0:	f000 fac6 	bl	8001b70 <Error_Handler>



  /* USER CODE END LPUART1_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	200002b0 	.word	0x200002b0
 80015ec:	40008000 	.word	0x40008000

080015f0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 1 */



  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015f4:	4b22      	ldr	r3, [pc, #136]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 80015f6:	4a23      	ldr	r2, [pc, #140]	@ (8001684 <MX_USART2_UART_Init+0x94>)
 80015f8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 80015fa:	4b21      	ldr	r3, [pc, #132]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 80015fc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8001600:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001602:	4b1f      	ldr	r3, [pc, #124]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001604:	2200      	movs	r2, #0
 8001606:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001608:	4b1d      	ldr	r3, [pc, #116]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800160a:	2200      	movs	r2, #0
 800160c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800160e:	4b1c      	ldr	r3, [pc, #112]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001610:	2200      	movs	r2, #0
 8001612:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001614:	4b1a      	ldr	r3, [pc, #104]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001616:	220c      	movs	r2, #12
 8001618:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161a:	4b19      	ldr	r3, [pc, #100]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800161c:	2200      	movs	r2, #0
 800161e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	4b17      	ldr	r3, [pc, #92]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001622:	2200      	movs	r2, #0
 8001624:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001626:	4b16      	ldr	r3, [pc, #88]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001628:	2200      	movs	r2, #0
 800162a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800162c:	4b14      	ldr	r3, [pc, #80]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800162e:	2200      	movs	r2, #0
 8001630:	625a      	str	r2, [r3, #36]	@ 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001632:	4b13      	ldr	r3, [pc, #76]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 8001634:	2200      	movs	r2, #0
 8001636:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001638:	4811      	ldr	r0, [pc, #68]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800163a:	f004 fef5 	bl	8006428 <HAL_UART_Init>
 800163e:	4603      	mov	r3, r0
 8001640:	2b00      	cmp	r3, #0
 8001642:	d001      	beq.n	8001648 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001644:	f000 fa94 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001648:	2100      	movs	r1, #0
 800164a:	480d      	ldr	r0, [pc, #52]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800164c:	f006 ff77 	bl	800853e <HAL_UARTEx_SetTxFifoThreshold>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001656:	f000 fa8b 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800165a:	2100      	movs	r1, #0
 800165c:	4808      	ldr	r0, [pc, #32]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800165e:	f006 ffac 	bl	80085ba <HAL_UARTEx_SetRxFifoThreshold>
 8001662:	4603      	mov	r3, r0
 8001664:	2b00      	cmp	r3, #0
 8001666:	d001      	beq.n	800166c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001668:	f000 fa82 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 800166c:	4804      	ldr	r0, [pc, #16]	@ (8001680 <MX_USART2_UART_Init+0x90>)
 800166e:	f006 ff2d 	bl	80084cc <HAL_UARTEx_DisableFifoMode>
 8001672:	4603      	mov	r3, r0
 8001674:	2b00      	cmp	r3, #0
 8001676:	d001      	beq.n	800167c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001678:	f000 fa7a 	bl	8001b70 <Error_Handler>



  /* USER CODE END USART2_Init 2 */

}
 800167c:	bf00      	nop
 800167e:	bd80      	pop	{r7, pc}
 8001680:	20000344 	.word	0x20000344
 8001684:	40004400 	.word	0x40004400

08001688 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_Init 1 */



  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800168c:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 800168e:	4a23      	ldr	r2, [pc, #140]	@ (800171c <MX_USART3_UART_Init+0x94>)
 8001690:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001692:	4b21      	ldr	r3, [pc, #132]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 8001694:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001698:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800169a:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 800169c:	2200      	movs	r2, #0
 800169e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80016a0:	4b1d      	ldr	r3, [pc, #116]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80016a6:	4b1c      	ldr	r3, [pc, #112]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80016ac:	4b1a      	ldr	r3, [pc, #104]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016ae:	220c      	movs	r2, #12
 80016b0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016b2:	4b19      	ldr	r3, [pc, #100]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80016b8:	4b17      	ldr	r3, [pc, #92]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016ba:	2200      	movs	r2, #0
 80016bc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80016be:	4b16      	ldr	r3, [pc, #88]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016c0:	2200      	movs	r2, #0
 80016c2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80016c4:	4b14      	ldr	r3, [pc, #80]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016c6:	2200      	movs	r2, #0
 80016c8:	625a      	str	r2, [r3, #36]	@ 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80016ca:	4b13      	ldr	r3, [pc, #76]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016cc:	2200      	movs	r2, #0
 80016ce:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80016d0:	4811      	ldr	r0, [pc, #68]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016d2:	f004 fea9 	bl	8006428 <HAL_UART_Init>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80016dc:	f000 fa48 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016e0:	2100      	movs	r1, #0
 80016e2:	480d      	ldr	r0, [pc, #52]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016e4:	f006 ff2b 	bl	800853e <HAL_UARTEx_SetTxFifoThreshold>
 80016e8:	4603      	mov	r3, r0
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d001      	beq.n	80016f2 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80016ee:	f000 fa3f 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80016f2:	2100      	movs	r1, #0
 80016f4:	4808      	ldr	r0, [pc, #32]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 80016f6:	f006 ff60 	bl	80085ba <HAL_UARTEx_SetRxFifoThreshold>
 80016fa:	4603      	mov	r3, r0
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d001      	beq.n	8001704 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001700:	f000 fa36 	bl	8001b70 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001704:	4804      	ldr	r0, [pc, #16]	@ (8001718 <MX_USART3_UART_Init+0x90>)
 8001706:	f006 fee1 	bl	80084cc <HAL_UARTEx_DisableFifoMode>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8001710:	f000 fa2e 	bl	8001b70 <Error_Handler>



  /* USER CODE END USART3_Init 2 */

}
 8001714:	bf00      	nop
 8001716:	bd80      	pop	{r7, pc}
 8001718:	200003d8 	.word	0x200003d8
 800171c:	40004800 	.word	0x40004800

08001720 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b08e      	sub	sp, #56	@ 0x38
 8001724:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001726:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800172a:	2200      	movs	r2, #0
 800172c:	601a      	str	r2, [r3, #0]
 800172e:	605a      	str	r2, [r3, #4]
 8001730:	609a      	str	r2, [r3, #8]
 8001732:	60da      	str	r2, [r3, #12]
 8001734:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */

/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001736:	4bb1      	ldr	r3, [pc, #708]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001738:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800173a:	4ab0      	ldr	r2, [pc, #704]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800173c:	f043 0310 	orr.w	r3, r3, #16
 8001740:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001742:	4bae      	ldr	r3, [pc, #696]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001744:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001746:	f003 0310 	and.w	r3, r3, #16
 800174a:	623b      	str	r3, [r7, #32]
 800174c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800174e:	4bab      	ldr	r3, [pc, #684]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001750:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001752:	4aaa      	ldr	r2, [pc, #680]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001754:	f043 0304 	orr.w	r3, r3, #4
 8001758:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800175a:	4ba8      	ldr	r3, [pc, #672]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800175c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800175e:	f003 0304 	and.w	r3, r3, #4
 8001762:	61fb      	str	r3, [r7, #28]
 8001764:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001766:	4ba5      	ldr	r3, [pc, #660]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001768:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800176a:	4aa4      	ldr	r2, [pc, #656]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800176c:	f043 0320 	orr.w	r3, r3, #32
 8001770:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001772:	4ba2      	ldr	r3, [pc, #648]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001776:	f003 0320 	and.w	r3, r3, #32
 800177a:	61bb      	str	r3, [r7, #24]
 800177c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800177e:	4b9f      	ldr	r3, [pc, #636]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001780:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001782:	4a9e      	ldr	r2, [pc, #632]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001784:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001788:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800178a:	4b9c      	ldr	r3, [pc, #624]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800178c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800178e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	4b99      	ldr	r3, [pc, #612]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 8001798:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179a:	4a98      	ldr	r2, [pc, #608]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 800179c:	f043 0301 	orr.w	r3, r3, #1
 80017a0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a2:	4b96      	ldr	r3, [pc, #600]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017a6:	f003 0301 	and.w	r3, r3, #1
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017ae:	4b93      	ldr	r3, [pc, #588]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017b2:	4a92      	ldr	r2, [pc, #584]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017b4:	f043 0302 	orr.w	r3, r3, #2
 80017b8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ba:	4b90      	ldr	r3, [pc, #576]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017be:	f003 0302 	and.w	r3, r3, #2
 80017c2:	60fb      	str	r3, [r7, #12]
 80017c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80017c6:	4b8d      	ldr	r3, [pc, #564]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017c8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ca:	4a8c      	ldr	r2, [pc, #560]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017cc:	f043 0308 	orr.w	r3, r3, #8
 80017d0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017d2:	4b8a      	ldr	r3, [pc, #552]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	60bb      	str	r3, [r7, #8]
 80017dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80017de:	4b87      	ldr	r3, [pc, #540]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017e0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017e2:	4a86      	ldr	r2, [pc, #536]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80017e8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017ea:	4b84      	ldr	r3, [pc, #528]	@ (80019fc <MX_GPIO_Init+0x2dc>)
 80017ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 80017f6:	f003 fa17 	bl	8004c28 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017fa:	230c      	movs	r3, #12
 80017fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fe:	2302      	movs	r3, #2
 8001800:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001802:	2300      	movs	r3, #0
 8001804:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001806:	2300      	movs	r3, #0
 8001808:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800180a:	230d      	movs	r3, #13
 800180c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800180e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001812:	4619      	mov	r1, r3
 8001814:	487a      	ldr	r0, [pc, #488]	@ (8001a00 <MX_GPIO_Init+0x2e0>)
 8001816:	f002 f9c9 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800181a:	2307      	movs	r3, #7
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800181e:	2312      	movs	r3, #18
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001826:	2303      	movs	r3, #3
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800182a:	2304      	movs	r3, #4
 800182c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800182e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001832:	4619      	mov	r1, r3
 8001834:	4873      	ldr	r0, [pc, #460]	@ (8001a04 <MX_GPIO_Init+0x2e4>)
 8001836:	f002 f9b9 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800183a:	2380      	movs	r3, #128	@ 0x80
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183e:	2302      	movs	r3, #2
 8001840:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001842:	2300      	movs	r3, #0
 8001844:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001846:	2300      	movs	r3, #0
 8001848:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800184a:	230d      	movs	r3, #13
 800184c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800184e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001852:	4619      	mov	r1, r3
 8001854:	486b      	ldr	r0, [pc, #428]	@ (8001a04 <MX_GPIO_Init+0x2e4>)
 8001856:	f002 f9a9 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800185a:	2301      	movs	r3, #1
 800185c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185e:	2302      	movs	r3, #2
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001862:	2300      	movs	r3, #0
 8001864:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001866:	2300      	movs	r3, #0
 8001868:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800186a:	2301      	movs	r3, #1
 800186c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001878:	f002 f998 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800187c:	23f0      	movs	r3, #240	@ 0xf0
 800187e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001880:	2302      	movs	r3, #2
 8001882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001884:	2300      	movs	r3, #0
 8001886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001888:	2303      	movs	r3, #3
 800188a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800188c:	2305      	movs	r3, #5
 800188e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001890:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001894:	4619      	mov	r1, r3
 8001896:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800189a:	f002 f987 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800189e:	2301      	movs	r3, #1
 80018a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018aa:	2300      	movs	r3, #0
 80018ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80018ae:	2302      	movs	r3, #2
 80018b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018b6:	4619      	mov	r1, r3
 80018b8:	4853      	ldr	r0, [pc, #332]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 80018ba:	f002 f977 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 80018be:	2344      	movs	r3, #68	@ 0x44
 80018c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80018c2:	2303      	movs	r3, #3
 80018c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018ce:	4619      	mov	r1, r3
 80018d0:	484d      	ldr	r0, [pc, #308]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 80018d2:	f002 f96b 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 80018d6:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 80018da:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018dc:	2302      	movs	r3, #2
 80018de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018e0:	2300      	movs	r3, #0
 80018e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018e4:	2300      	movs	r3, #0
 80018e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80018e8:	2301      	movs	r3, #1
 80018ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80018ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80018f0:	4619      	mov	r1, r3
 80018f2:	4843      	ldr	r0, [pc, #268]	@ (8001a00 <MX_GPIO_Init+0x2e0>)
 80018f4:	f002 f95a 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80018f8:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80018fc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018fe:	2302      	movs	r3, #2
 8001900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001902:	2300      	movs	r3, #0
 8001904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001906:	2300      	movs	r3, #0
 8001908:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 800190a:	2303      	movs	r3, #3
 800190c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800190e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001912:	4619      	mov	r1, r3
 8001914:	483a      	ldr	r0, [pc, #232]	@ (8001a00 <MX_GPIO_Init+0x2e0>)
 8001916:	f002 f949 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800191a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800191e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800192c:	2301      	movs	r3, #1
 800192e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001934:	4619      	mov	r1, r3
 8001936:	4834      	ldr	r0, [pc, #208]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 8001938:	f002 f938 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 800193c:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 8001940:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001942:	2302      	movs	r3, #2
 8001944:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001946:	2300      	movs	r3, #0
 8001948:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800194a:	2300      	movs	r3, #0
 800194c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800194e:	230d      	movs	r3, #13
 8001950:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001952:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001956:	4619      	mov	r1, r3
 8001958:	482b      	ldr	r0, [pc, #172]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 800195a:	f002 f927 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800195e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001962:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001964:	2302      	movs	r3, #2
 8001966:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001968:	2300      	movs	r3, #0
 800196a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800196c:	2300      	movs	r3, #0
 800196e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 8001970:	230e      	movs	r3, #14
 8001972:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001974:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001978:	4619      	mov	r1, r3
 800197a:	4823      	ldr	r0, [pc, #140]	@ (8001a08 <MX_GPIO_Init+0x2e8>)
 800197c:	f002 f916 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001980:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8001984:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001986:	2302      	movs	r3, #2
 8001988:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198a:	2300      	movs	r3, #0
 800198c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800198e:	2300      	movs	r3, #0
 8001990:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001992:	2302      	movs	r3, #2
 8001994:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001996:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800199a:	4619      	mov	r1, r3
 800199c:	481b      	ldr	r0, [pc, #108]	@ (8001a0c <MX_GPIO_Init+0x2ec>)
 800199e:	f002 f905 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80019a2:	2340      	movs	r3, #64	@ 0x40
 80019a4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a6:	2302      	movs	r3, #2
 80019a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019aa:	2300      	movs	r3, #0
 80019ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ae:	2300      	movs	r3, #0
 80019b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80019b2:	230d      	movs	r3, #13
 80019b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019ba:	4619      	mov	r1, r3
 80019bc:	4814      	ldr	r0, [pc, #80]	@ (8001a10 <MX_GPIO_Init+0x2f0>)
 80019be:	f002 f8f5 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019c2:	2380      	movs	r3, #128	@ 0x80
 80019c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019c6:	2302      	movs	r3, #2
 80019c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ca:	2300      	movs	r3, #0
 80019cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019ce:	2300      	movs	r3, #0
 80019d0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80019d2:	2302      	movs	r3, #2
 80019d4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80019da:	4619      	mov	r1, r3
 80019dc:	480c      	ldr	r0, [pc, #48]	@ (8001a10 <MX_GPIO_Init+0x2f0>)
 80019de:	f002 f8e5 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80019e2:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80019e6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019e8:	2302      	movs	r3, #2
 80019ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ec:	2300      	movs	r3, #0
 80019ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019f0:	2303      	movs	r3, #3
 80019f2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80019f4:	230c      	movs	r3, #12
 80019f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80019f8:	e00c      	b.n	8001a14 <MX_GPIO_Init+0x2f4>
 80019fa:	bf00      	nop
 80019fc:	40021000 	.word	0x40021000
 8001a00:	48001000 	.word	0x48001000
 8001a04:	48001400 	.word	0x48001400
 8001a08:	48000400 	.word	0x48000400
 8001a0c:	48000c00 	.word	0x48000c00
 8001a10:	48000800 	.word	0x48000800
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a18:	4619      	mov	r1, r3
 8001a1a:	4833      	ldr	r0, [pc, #204]	@ (8001ae8 <MX_GPIO_Init+0x3c8>)
 8001a1c:	f002 f8c6 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8001a20:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8001a24:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a26:	2302      	movs	r3, #2
 8001a28:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001a32:	230a      	movs	r3, #10
 8001a34:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a36:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a3a:	4619      	mov	r1, r3
 8001a3c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a40:	f002 f8b4 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001a44:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001a48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a52:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a56:	4619      	mov	r1, r3
 8001a58:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001a5c:	f002 f8a6 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001a60:	2301      	movs	r3, #1
 8001a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a64:	2302      	movs	r3, #2
 8001a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a6c:	2303      	movs	r3, #3
 8001a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a70:	2309      	movs	r3, #9
 8001a72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a78:	4619      	mov	r1, r3
 8001a7a:	481c      	ldr	r0, [pc, #112]	@ (8001aec <MX_GPIO_Init+0x3cc>)
 8001a7c:	f002 f896 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a80:	2304      	movs	r3, #4
 8001a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a84:	2302      	movs	r3, #2
 8001a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a8c:	2303      	movs	r3, #3
 8001a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8001a90:	230c      	movs	r3, #12
 8001a92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4814      	ldr	r0, [pc, #80]	@ (8001aec <MX_GPIO_Init+0x3cc>)
 8001a9c:	f002 f886 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001aa0:	2338      	movs	r3, #56	@ 0x38
 8001aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aa4:	2302      	movs	r3, #2
 8001aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001aac:	2303      	movs	r3, #3
 8001aae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001ab0:	2306      	movs	r3, #6
 8001ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ab8:	4619      	mov	r1, r3
 8001aba:	480d      	ldr	r0, [pc, #52]	@ (8001af0 <MX_GPIO_Init+0x3d0>)
 8001abc:	f002 f876 	bl	8003bac <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ac0:	2301      	movs	r3, #1
 8001ac2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001acc:	2300      	movs	r3, #0
 8001ace:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001ad0:	2302      	movs	r3, #2
 8001ad2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001ad4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001ad8:	4619      	mov	r1, r3
 8001ada:	4806      	ldr	r0, [pc, #24]	@ (8001af4 <MX_GPIO_Init+0x3d4>)
 8001adc:	f002 f866 	bl	8003bac <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8001ae0:	bf00      	nop
 8001ae2:	3738      	adds	r7, #56	@ 0x38
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	bd80      	pop	{r7, pc}
 8001ae8:	48000800 	.word	0x48000800
 8001aec:	48000c00 	.word	0x48000c00
 8001af0:	48000400 	.word	0x48000400
 8001af4:	48001000 	.word	0x48001000

08001af8 <__io_putchar>:

#endif /* __GNUC__ */

PUTCHAR_PROTOTYPE

{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b082      	sub	sp, #8
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]

  HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 0xFFFF);
 8001b00:	1d39      	adds	r1, r7, #4
 8001b02:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001b06:	2201      	movs	r2, #1
 8001b08:	4803      	ldr	r0, [pc, #12]	@ (8001b18 <__io_putchar+0x20>)
 8001b0a:	f004 fcdd 	bl	80064c8 <HAL_UART_Transmit>

  return ch;
 8001b0e:	687b      	ldr	r3, [r7, #4]

}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3708      	adds	r7, #8
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bd80      	pop	{r7, pc}
 8001b18:	200002b0 	.word	0x200002b0

08001b1c <HAL_UART_RxCpltCallback>:



void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8001b1c:	b480      	push	{r7}
 8001b1e:	b083      	sub	sp, #12
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]

	if(huart == &huart3){
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	4a06      	ldr	r2, [pc, #24]	@ (8001b40 <HAL_UART_RxCpltCallback+0x24>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d102      	bne.n	8001b32 <HAL_UART_RxCpltCallback+0x16>

		lidar_ready = 1;
 8001b2c:	4b05      	ldr	r3, [pc, #20]	@ (8001b44 <HAL_UART_RxCpltCallback+0x28>)
 8001b2e:	2201      	movs	r2, #1
 8001b30:	601a      	str	r2, [r3, #0]

	}

}
 8001b32:	bf00      	nop
 8001b34:	370c      	adds	r7, #12
 8001b36:	46bd      	mov	sp, r7
 8001b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b3c:	4770      	bx	lr
 8001b3e:	bf00      	nop
 8001b40:	200003d8 	.word	0x200003d8
 8001b44:	20000470 	.word	0x20000470

08001b48 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
	  ADC_VAL = HAL_ADC_GetValue(&hadc1);
 8001b50:	4805      	ldr	r0, [pc, #20]	@ (8001b68 <HAL_ADC_ConvCpltCallback+0x20>)
 8001b52:	f000 ffd5 	bl	8002b00 <HAL_ADC_GetValue>
 8001b56:	4603      	mov	r3, r0
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b04      	ldr	r3, [pc, #16]	@ (8001b6c <HAL_ADC_ConvCpltCallback+0x24>)
 8001b5c:	801a      	strh	r2, [r3, #0]
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	200001f4 	.word	0x200001f4
 8001b6c:	2000047c 	.word	0x2000047c

08001b70 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b70:	b480      	push	{r7}
 8001b72:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b74:	b672      	cpsid	i
}
 8001b76:	bf00      	nop

  /* User can add his own implementation to report the HAL error return state */

  __disable_irq();

  while (1)
 8001b78:	bf00      	nop
 8001b7a:	e7fd      	b.n	8001b78 <Error_Handler+0x8>

08001b7c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	b083      	sub	sp, #12
 8001b80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b82:	4b0f      	ldr	r3, [pc, #60]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b86:	4a0e      	ldr	r2, [pc, #56]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b8e:	4b0c      	ldr	r3, [pc, #48]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b90:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b92:	f003 0301 	and.w	r3, r3, #1
 8001b96:	607b      	str	r3, [r7, #4]
 8001b98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9a:	4b09      	ldr	r3, [pc, #36]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001b9c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001b9e:	4a08      	ldr	r2, [pc, #32]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001ba0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ba4:	6593      	str	r3, [r2, #88]	@ 0x58
 8001ba6:	4b06      	ldr	r3, [pc, #24]	@ (8001bc0 <HAL_MspInit+0x44>)
 8001ba8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001baa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001bae:	603b      	str	r3, [r7, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001bb2:	bf00      	nop
 8001bb4:	370c      	adds	r7, #12
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbc:	4770      	bx	lr
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000

08001bc4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b0b0      	sub	sp, #192	@ 0xc0
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bcc:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	601a      	str	r2, [r3, #0]
 8001bd4:	605a      	str	r2, [r3, #4]
 8001bd6:	609a      	str	r2, [r3, #8]
 8001bd8:	60da      	str	r2, [r3, #12]
 8001bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001bdc:	f107 0318 	add.w	r3, r7, #24
 8001be0:	2294      	movs	r2, #148	@ 0x94
 8001be2:	2100      	movs	r1, #0
 8001be4:	4618      	mov	r0, r3
 8001be6:	f007 fa9f 	bl	8009128 <memset>
  if(hadc->Instance==ADC1)
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	4a47      	ldr	r2, [pc, #284]	@ (8001d0c <HAL_ADC_MspInit+0x148>)
 8001bf0:	4293      	cmp	r3, r2
 8001bf2:	f040 8086 	bne.w	8001d02 <HAL_ADC_MspInit+0x13e>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8001bf6:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8001bfa:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8001bfc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8001c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8001c04:	2301      	movs	r3, #1
 8001c06:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8001c08:	2301      	movs	r3, #1
 8001c0a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8001c0c:	2310      	movs	r3, #16
 8001c0e:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV2;
 8001c10:	2302      	movs	r3, #2
 8001c12:	62bb      	str	r3, [r7, #40]	@ 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8001c14:	2302      	movs	r3, #2
 8001c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8001c18:	2302      	movs	r3, #2
 8001c1a:	633b      	str	r3, [r7, #48]	@ 0x30
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8001c1c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c20:	637b      	str	r3, [r7, #52]	@ 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001c22:	f107 0318 	add.w	r3, r7, #24
 8001c26:	4618      	mov	r0, r3
 8001c28:	f003 fee6 	bl	80059f8 <HAL_RCCEx_PeriphCLKConfig>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d001      	beq.n	8001c36 <HAL_ADC_MspInit+0x72>
    {
      Error_Handler();
 8001c32:	f7ff ff9d 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8001c36:	4b36      	ldr	r3, [pc, #216]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c3a:	4a35      	ldr	r2, [pc, #212]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c3c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8001c40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c42:	4b33      	ldr	r3, [pc, #204]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c46:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001c4a:	617b      	str	r3, [r7, #20]
 8001c4c:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c4e:	4b30      	ldr	r3, [pc, #192]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c52:	4a2f      	ldr	r2, [pc, #188]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c54:	f043 0304 	orr.w	r3, r3, #4
 8001c58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c5e:	f003 0304 	and.w	r3, r3, #4
 8001c62:	613b      	str	r3, [r7, #16]
 8001c64:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c66:	4b2a      	ldr	r3, [pc, #168]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c6a:	4a29      	ldr	r2, [pc, #164]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c6c:	f043 0301 	orr.w	r3, r3, #1
 8001c70:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c72:	4b27      	ldr	r3, [pc, #156]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c76:	f003 0301 	and.w	r3, r3, #1
 8001c7a:	60fb      	str	r3, [r7, #12]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7e:	4b24      	ldr	r3, [pc, #144]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c80:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c82:	4a23      	ldr	r2, [pc, #140]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c84:	f043 0302 	orr.w	r3, r3, #2
 8001c88:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001c8a:	4b21      	ldr	r3, [pc, #132]	@ (8001d10 <HAL_ADC_MspInit+0x14c>)
 8001c8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	60bb      	str	r3, [r7, #8]
 8001c94:	68bb      	ldr	r3, [r7, #8]
    PC3     ------> ADC1_IN4
    PA1     ------> ADC1_IN6
    PA3     ------> ADC1_IN8
    PB1     ------> ADC1_IN16
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001c96:	230f      	movs	r3, #15
 8001c98:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001c9c:	230b      	movs	r3, #11
 8001c9e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca8:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cac:	4619      	mov	r1, r3
 8001cae:	4819      	ldr	r0, [pc, #100]	@ (8001d14 <HAL_ADC_MspInit+0x150>)
 8001cb0:	f001 ff7c 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8001cb4:	230a      	movs	r3, #10
 8001cb6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cba:	230b      	movs	r3, #11
 8001cbc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cc6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cca:	4619      	mov	r1, r3
 8001ccc:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001cd0:	f001 ff6c 	bl	8003bac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cd4:	2302      	movs	r3, #2
 8001cd6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001cda:	230b      	movs	r3, #11
 8001cdc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ce6:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001cea:	4619      	mov	r1, r3
 8001cec:	480a      	ldr	r0, [pc, #40]	@ (8001d18 <HAL_ADC_MspInit+0x154>)
 8001cee:	f001 ff5d 	bl	8003bac <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_IRQn, 0, 0);
 8001cf2:	2200      	movs	r2, #0
 8001cf4:	2100      	movs	r1, #0
 8001cf6:	2012      	movs	r0, #18
 8001cf8:	f001 fe67 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_IRQn);
 8001cfc:	2012      	movs	r0, #18
 8001cfe:	f001 fe80 	bl	8003a02 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 8001d02:	bf00      	nop
 8001d04:	37c0      	adds	r7, #192	@ 0xc0
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	50040000 	.word	0x50040000
 8001d10:	40021000 	.word	0x40021000
 8001d14:	48000800 	.word	0x48000800
 8001d18:	48000400 	.word	0x48000400

08001d1c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b0ae      	sub	sp, #184	@ 0xb8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d24:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001d28:	2200      	movs	r2, #0
 8001d2a:	601a      	str	r2, [r3, #0]
 8001d2c:	605a      	str	r2, [r3, #4]
 8001d2e:	609a      	str	r2, [r3, #8]
 8001d30:	60da      	str	r2, [r3, #12]
 8001d32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001d34:	f107 0310 	add.w	r3, r7, #16
 8001d38:	2294      	movs	r2, #148	@ 0x94
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f007 f9f3 	bl	8009128 <memset>
  if(hi2c->Instance==I2C1)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	4a21      	ldr	r2, [pc, #132]	@ (8001dcc <HAL_I2C_MspInit+0xb0>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	d13b      	bne.n	8001dc4 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001d4c:	2340      	movs	r3, #64	@ 0x40
 8001d4e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001d50:	2300      	movs	r3, #0
 8001d52:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001d54:	f107 0310 	add.w	r3, r7, #16
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f003 fe4d 	bl	80059f8 <HAL_RCCEx_PeriphCLKConfig>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001d64:	f7ff ff04 	bl	8001b70 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d68:	4b19      	ldr	r3, [pc, #100]	@ (8001dd0 <HAL_I2C_MspInit+0xb4>)
 8001d6a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d6c:	4a18      	ldr	r2, [pc, #96]	@ (8001dd0 <HAL_I2C_MspInit+0xb4>)
 8001d6e:	f043 0302 	orr.w	r3, r3, #2
 8001d72:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d74:	4b16      	ldr	r3, [pc, #88]	@ (8001dd0 <HAL_I2C_MspInit+0xb4>)
 8001d76:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d78:	f003 0302 	and.w	r3, r3, #2
 8001d7c:	60fb      	str	r3, [r7, #12]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001d80:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001d84:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001d88:	2312      	movs	r3, #18
 8001d8a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001d94:	2303      	movs	r3, #3
 8001d96:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001d9a:	2304      	movs	r3, #4
 8001d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001da0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8001da4:	4619      	mov	r1, r3
 8001da6:	480b      	ldr	r0, [pc, #44]	@ (8001dd4 <HAL_I2C_MspInit+0xb8>)
 8001da8:	f001 ff00 	bl	8003bac <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dac:	4b08      	ldr	r3, [pc, #32]	@ (8001dd0 <HAL_I2C_MspInit+0xb4>)
 8001dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001db0:	4a07      	ldr	r2, [pc, #28]	@ (8001dd0 <HAL_I2C_MspInit+0xb4>)
 8001db2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001db6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001db8:	4b05      	ldr	r3, [pc, #20]	@ (8001dd0 <HAL_I2C_MspInit+0xb4>)
 8001dba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	60bb      	str	r3, [r7, #8]
 8001dc2:	68bb      	ldr	r3, [r7, #8]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8001dc4:	bf00      	nop
 8001dc6:	37b8      	adds	r7, #184	@ 0xb8
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40005400 	.word	0x40005400
 8001dd0:	40021000 	.word	0x40021000
 8001dd4:	48000400 	.word	0x48000400

08001dd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b0b2      	sub	sp, #200	@ 0xc8
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001de0:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001de4:	2200      	movs	r2, #0
 8001de6:	601a      	str	r2, [r3, #0]
 8001de8:	605a      	str	r2, [r3, #4]
 8001dea:	609a      	str	r2, [r3, #8]
 8001dec:	60da      	str	r2, [r3, #12]
 8001dee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001df0:	f107 0320 	add.w	r3, r7, #32
 8001df4:	2294      	movs	r2, #148	@ 0x94
 8001df6:	2100      	movs	r1, #0
 8001df8:	4618      	mov	r0, r3
 8001dfa:	f007 f995 	bl	8009128 <memset>
  if(huart->Instance==LPUART1)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	4a67      	ldr	r2, [pc, #412]	@ (8001fa0 <HAL_UART_MspInit+0x1c8>)
 8001e04:	4293      	cmp	r3, r2
 8001e06:	d13e      	bne.n	8001e86 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8001e08:	2320      	movs	r3, #32
 8001e0a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8001e0c:	2300      	movs	r3, #0
 8001e0e:	673b      	str	r3, [r7, #112]	@ 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e10:	f107 0320 	add.w	r3, r7, #32
 8001e14:	4618      	mov	r0, r3
 8001e16:	f003 fdef 	bl	80059f8 <HAL_RCCEx_PeriphCLKConfig>
 8001e1a:	4603      	mov	r3, r0
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d001      	beq.n	8001e24 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001e20:	f7ff fea6 	bl	8001b70 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8001e24:	4b5f      	ldr	r3, [pc, #380]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e28:	4a5e      	ldr	r2, [pc, #376]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001e2a:	f043 0301 	orr.w	r3, r3, #1
 8001e2e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001e30:	4b5c      	ldr	r3, [pc, #368]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001e32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001e34:	f003 0301 	and.w	r3, r3, #1
 8001e38:	61fb      	str	r3, [r7, #28]
 8001e3a:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001e3c:	4b59      	ldr	r3, [pc, #356]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001e3e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e40:	4a58      	ldr	r2, [pc, #352]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001e42:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001e46:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001e48:	4b56      	ldr	r3, [pc, #344]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001e4a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001e4c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e50:	61bb      	str	r3, [r7, #24]
 8001e52:	69bb      	ldr	r3, [r7, #24]
    HAL_PWREx_EnableVddIO2();
 8001e54:	f002 fee8 	bl	8004c28 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001e58:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001e5c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e60:	2302      	movs	r3, #2
 8001e62:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e66:	2300      	movs	r3, #0
 8001e68:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001e72:	2308      	movs	r3, #8
 8001e74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001e78:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	484a      	ldr	r0, [pc, #296]	@ (8001fa8 <HAL_UART_MspInit+0x1d0>)
 8001e80:	f001 fe94 	bl	8003bac <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e84:	e088      	b.n	8001f98 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART2)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a48      	ldr	r2, [pc, #288]	@ (8001fac <HAL_UART_MspInit+0x1d4>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d13b      	bne.n	8001f08 <HAL_UART_MspInit+0x130>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001e90:	2302      	movs	r3, #2
 8001e92:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001e94:	2300      	movs	r3, #0
 8001e96:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001e98:	f107 0320 	add.w	r3, r7, #32
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f003 fdab 	bl	80059f8 <HAL_RCCEx_PeriphCLKConfig>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d001      	beq.n	8001eac <HAL_UART_MspInit+0xd4>
      Error_Handler();
 8001ea8:	f7ff fe62 	bl	8001b70 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001eac:	4b3d      	ldr	r3, [pc, #244]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001eae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001eb0:	4a3c      	ldr	r2, [pc, #240]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001eb2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eb6:	6593      	str	r3, [r2, #88]	@ 0x58
 8001eb8:	4b3a      	ldr	r3, [pc, #232]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001eba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001ebc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ec0:	617b      	str	r3, [r7, #20]
 8001ec2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001ec4:	4b37      	ldr	r3, [pc, #220]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001ec6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ec8:	4a36      	ldr	r2, [pc, #216]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001eca:	f043 0308 	orr.w	r3, r3, #8
 8001ece:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ed0:	4b34      	ldr	r3, [pc, #208]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001ed2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001ed4:	f003 0308 	and.w	r3, r3, #8
 8001ed8:	613b      	str	r3, [r7, #16]
 8001eda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8001edc:	2378      	movs	r3, #120	@ 0x78
 8001ede:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ee2:	2302      	movs	r3, #2
 8001ee4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eee:	2303      	movs	r3, #3
 8001ef0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001ef4:	2307      	movs	r3, #7
 8001ef6:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001efa:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001efe:	4619      	mov	r1, r3
 8001f00:	482b      	ldr	r0, [pc, #172]	@ (8001fb0 <HAL_UART_MspInit+0x1d8>)
 8001f02:	f001 fe53 	bl	8003bac <HAL_GPIO_Init>
}
 8001f06:	e047      	b.n	8001f98 <HAL_UART_MspInit+0x1c0>
  else if(huart->Instance==USART3)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a29      	ldr	r2, [pc, #164]	@ (8001fb4 <HAL_UART_MspInit+0x1dc>)
 8001f0e:	4293      	cmp	r3, r2
 8001f10:	d142      	bne.n	8001f98 <HAL_UART_MspInit+0x1c0>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f12:	2304      	movs	r3, #4
 8001f14:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001f1a:	f107 0320 	add.w	r3, r7, #32
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f003 fd6a 	bl	80059f8 <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_UART_MspInit+0x156>
      Error_Handler();
 8001f2a:	f7ff fe21 	bl	8001b70 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f2e:	4b1d      	ldr	r3, [pc, #116]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001f30:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f32:	4a1c      	ldr	r2, [pc, #112]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f38:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3a:	4b1a      	ldr	r3, [pc, #104]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001f3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f42:	60fb      	str	r3, [r7, #12]
 8001f44:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f46:	4b17      	ldr	r3, [pc, #92]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001f48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f4a:	4a16      	ldr	r2, [pc, #88]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001f4c:	f043 0304 	orr.w	r3, r3, #4
 8001f50:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001f52:	4b14      	ldr	r3, [pc, #80]	@ (8001fa4 <HAL_UART_MspInit+0x1cc>)
 8001f54:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001f56:	f003 0304 	and.w	r3, r3, #4
 8001f5a:	60bb      	str	r3, [r7, #8]
 8001f5c:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001f5e:	2330      	movs	r3, #48	@ 0x30
 8001f60:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f64:	2302      	movs	r3, #2
 8001f66:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6a:	2300      	movs	r3, #0
 8001f6c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f70:	2303      	movs	r3, #3
 8001f72:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f76:	2307      	movs	r3, #7
 8001f78:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001f7c:	f107 03b4 	add.w	r3, r7, #180	@ 0xb4
 8001f80:	4619      	mov	r1, r3
 8001f82:	480d      	ldr	r0, [pc, #52]	@ (8001fb8 <HAL_UART_MspInit+0x1e0>)
 8001f84:	f001 fe12 	bl	8003bac <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f88:	2200      	movs	r2, #0
 8001f8a:	2100      	movs	r1, #0
 8001f8c:	2027      	movs	r0, #39	@ 0x27
 8001f8e:	f001 fd1c 	bl	80039ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f92:	2027      	movs	r0, #39	@ 0x27
 8001f94:	f001 fd35 	bl	8003a02 <HAL_NVIC_EnableIRQ>
}
 8001f98:	bf00      	nop
 8001f9a:	37c8      	adds	r7, #200	@ 0xc8
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bd80      	pop	{r7, pc}
 8001fa0:	40008000 	.word	0x40008000
 8001fa4:	40021000 	.word	0x40021000
 8001fa8:	48001800 	.word	0x48001800
 8001fac:	40004400 	.word	0x40004400
 8001fb0:	48000c00 	.word	0x48000c00
 8001fb4:	40004800 	.word	0x40004800
 8001fb8:	48000800 	.word	0x48000800

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr

08001ff2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ff2:	b480      	push	{r7}
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffe:	4770      	bx	lr

08002000 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002004:	bf00      	nop
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr

0800200e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800200e:	b580      	push	{r7, lr}
 8002010:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002012:	f000 f96d 	bl	80022f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
	...

0800201c <ADC1_IRQHandler>:

/**
  * @brief This function handles ADC1 global interrupt.
  */
void ADC1_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_IRQn 0 */

  /* USER CODE END ADC1_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002020:	4802      	ldr	r0, [pc, #8]	@ (800202c <ADC1_IRQHandler+0x10>)
 8002022:	f000 fd7a 	bl	8002b1a <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_IRQn 1 */

  /* USER CODE END ADC1_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	200001f4 	.word	0x200001f4

08002030 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002034:	4802      	ldr	r0, [pc, #8]	@ (8002040 <USART3_IRQHandler+0x10>)
 8002036:	f004 fb21 	bl	800667c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200003d8 	.word	0x200003d8

08002044 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002044:	b480      	push	{r7}
 8002046:	af00      	add	r7, sp, #0
  return 1;
 8002048:	2301      	movs	r3, #1
}
 800204a:	4618      	mov	r0, r3
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr

08002054 <_kill>:

int _kill(int pid, int sig)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
 800205c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800205e:	f007 f86b 	bl	8009138 <__errno>
 8002062:	4603      	mov	r3, r0
 8002064:	2216      	movs	r2, #22
 8002066:	601a      	str	r2, [r3, #0]
  return -1;
 8002068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800206c:	4618      	mov	r0, r3
 800206e:	3708      	adds	r7, #8
 8002070:	46bd      	mov	sp, r7
 8002072:	bd80      	pop	{r7, pc}

08002074 <_exit>:

void _exit (int status)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	b082      	sub	sp, #8
 8002078:	af00      	add	r7, sp, #0
 800207a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800207c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff ffe7 	bl	8002054 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002086:	bf00      	nop
 8002088:	e7fd      	b.n	8002086 <_exit+0x12>

0800208a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800208a:	b580      	push	{r7, lr}
 800208c:	b086      	sub	sp, #24
 800208e:	af00      	add	r7, sp, #0
 8002090:	60f8      	str	r0, [r7, #12]
 8002092:	60b9      	str	r1, [r7, #8]
 8002094:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002096:	2300      	movs	r3, #0
 8002098:	617b      	str	r3, [r7, #20]
 800209a:	e00a      	b.n	80020b2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800209c:	f3af 8000 	nop.w
 80020a0:	4601      	mov	r1, r0
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	1c5a      	adds	r2, r3, #1
 80020a6:	60ba      	str	r2, [r7, #8]
 80020a8:	b2ca      	uxtb	r2, r1
 80020aa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020ac:	697b      	ldr	r3, [r7, #20]
 80020ae:	3301      	adds	r3, #1
 80020b0:	617b      	str	r3, [r7, #20]
 80020b2:	697a      	ldr	r2, [r7, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	dbf0      	blt.n	800209c <_read+0x12>
  }

  return len;
 80020ba:	687b      	ldr	r3, [r7, #4]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	3718      	adds	r7, #24
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}

080020c4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b086      	sub	sp, #24
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	60f8      	str	r0, [r7, #12]
 80020cc:	60b9      	str	r1, [r7, #8]
 80020ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d0:	2300      	movs	r3, #0
 80020d2:	617b      	str	r3, [r7, #20]
 80020d4:	e009      	b.n	80020ea <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	60ba      	str	r2, [r7, #8]
 80020dc:	781b      	ldrb	r3, [r3, #0]
 80020de:	4618      	mov	r0, r3
 80020e0:	f7ff fd0a 	bl	8001af8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020e4:	697b      	ldr	r3, [r7, #20]
 80020e6:	3301      	adds	r3, #1
 80020e8:	617b      	str	r3, [r7, #20]
 80020ea:	697a      	ldr	r2, [r7, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	429a      	cmp	r2, r3
 80020f0:	dbf1      	blt.n	80020d6 <_write+0x12>
  }
  return len;
 80020f2:	687b      	ldr	r3, [r7, #4]
}
 80020f4:	4618      	mov	r0, r3
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}

080020fc <_close>:

int _close(int file)
{
 80020fc:	b480      	push	{r7}
 80020fe:	b083      	sub	sp, #12
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002104:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002108:	4618      	mov	r0, r3
 800210a:	370c      	adds	r7, #12
 800210c:	46bd      	mov	sp, r7
 800210e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002112:	4770      	bx	lr

08002114 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002124:	605a      	str	r2, [r3, #4]
  return 0;
 8002126:	2300      	movs	r3, #0
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <_isatty>:

int _isatty(int file)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800213c:	2301      	movs	r3, #1
}
 800213e:	4618      	mov	r0, r3
 8002140:	370c      	adds	r7, #12
 8002142:	46bd      	mov	sp, r7
 8002144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002148:	4770      	bx	lr

0800214a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800214a:	b480      	push	{r7}
 800214c:	b085      	sub	sp, #20
 800214e:	af00      	add	r7, sp, #0
 8002150:	60f8      	str	r0, [r7, #12]
 8002152:	60b9      	str	r1, [r7, #8]
 8002154:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002156:	2300      	movs	r3, #0
}
 8002158:	4618      	mov	r0, r3
 800215a:	3714      	adds	r7, #20
 800215c:	46bd      	mov	sp, r7
 800215e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002162:	4770      	bx	lr

08002164 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002164:	b580      	push	{r7, lr}
 8002166:	b086      	sub	sp, #24
 8002168:	af00      	add	r7, sp, #0
 800216a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800216c:	4a14      	ldr	r2, [pc, #80]	@ (80021c0 <_sbrk+0x5c>)
 800216e:	4b15      	ldr	r3, [pc, #84]	@ (80021c4 <_sbrk+0x60>)
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002174:	697b      	ldr	r3, [r7, #20]
 8002176:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002178:	4b13      	ldr	r3, [pc, #76]	@ (80021c8 <_sbrk+0x64>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	2b00      	cmp	r3, #0
 800217e:	d102      	bne.n	8002186 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002180:	4b11      	ldr	r3, [pc, #68]	@ (80021c8 <_sbrk+0x64>)
 8002182:	4a12      	ldr	r2, [pc, #72]	@ (80021cc <_sbrk+0x68>)
 8002184:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002186:	4b10      	ldr	r3, [pc, #64]	@ (80021c8 <_sbrk+0x64>)
 8002188:	681a      	ldr	r2, [r3, #0]
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	4413      	add	r3, r2
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	429a      	cmp	r2, r3
 8002192:	d207      	bcs.n	80021a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002194:	f006 ffd0 	bl	8009138 <__errno>
 8002198:	4603      	mov	r3, r0
 800219a:	220c      	movs	r2, #12
 800219c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800219e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80021a2:	e009      	b.n	80021b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021a4:	4b08      	ldr	r3, [pc, #32]	@ (80021c8 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021aa:	4b07      	ldr	r3, [pc, #28]	@ (80021c8 <_sbrk+0x64>)
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	4413      	add	r3, r2
 80021b2:	4a05      	ldr	r2, [pc, #20]	@ (80021c8 <_sbrk+0x64>)
 80021b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021b6:	68fb      	ldr	r3, [r7, #12]
}
 80021b8:	4618      	mov	r0, r3
 80021ba:	3718      	adds	r7, #24
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}
 80021c0:	200a0000 	.word	0x200a0000
 80021c4:	00000400 	.word	0x00000400
 80021c8:	20000480 	.word	0x20000480
 80021cc:	200005d8 	.word	0x200005d8

080021d0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80021d4:	4b06      	ldr	r3, [pc, #24]	@ (80021f0 <SystemInit+0x20>)
 80021d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80021da:	4a05      	ldr	r2, [pc, #20]	@ (80021f0 <SystemInit+0x20>)
 80021dc:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80021e0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 80021e4:	bf00      	nop
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
 80021ee:	bf00      	nop
 80021f0:	e000ed00 	.word	0xe000ed00

080021f4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80021f4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800222c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80021f8:	f7ff ffea 	bl	80021d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80021fc:	480c      	ldr	r0, [pc, #48]	@ (8002230 <LoopForever+0x6>)
  ldr r1, =_edata
 80021fe:	490d      	ldr	r1, [pc, #52]	@ (8002234 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002200:	4a0d      	ldr	r2, [pc, #52]	@ (8002238 <LoopForever+0xe>)
  movs r3, #0
 8002202:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002204:	e002      	b.n	800220c <LoopCopyDataInit>

08002206 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002206:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002208:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800220a:	3304      	adds	r3, #4

0800220c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800220c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800220e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002210:	d3f9      	bcc.n	8002206 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002212:	4a0a      	ldr	r2, [pc, #40]	@ (800223c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002214:	4c0a      	ldr	r4, [pc, #40]	@ (8002240 <LoopForever+0x16>)
  movs r3, #0
 8002216:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002218:	e001      	b.n	800221e <LoopFillZerobss>

0800221a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800221a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800221c:	3204      	adds	r2, #4

0800221e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800221e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002220:	d3fb      	bcc.n	800221a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002222:	f006 ff8f 	bl	8009144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002226:	f7fe feab 	bl	8000f80 <main>

0800222a <LoopForever>:

LoopForever:
    b LoopForever
 800222a:	e7fe      	b.n	800222a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800222c:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8002230:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002234:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8002238:	0800b43c 	.word	0x0800b43c
  ldr r2, =_sbss
 800223c:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8002240:	200005d4 	.word	0x200005d4

08002244 <CAN1_RX0_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002244:	e7fe      	b.n	8002244 <CAN1_RX0_IRQHandler>

08002246 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002246:	b580      	push	{r7, lr}
 8002248:	b082      	sub	sp, #8
 800224a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800224c:	2300      	movs	r3, #0
 800224e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002250:	2003      	movs	r0, #3
 8002252:	f001 fbaf 	bl	80039b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002256:	2000      	movs	r0, #0
 8002258:	f000 f80e 	bl	8002278 <HAL_InitTick>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d002      	beq.n	8002268 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	71fb      	strb	r3, [r7, #7]
 8002266:	e001      	b.n	800226c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002268:	f7ff fc88 	bl	8001b7c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800226c:	79fb      	ldrb	r3, [r7, #7]
}
 800226e:	4618      	mov	r0, r3
 8002270:	3708      	adds	r7, #8
 8002272:	46bd      	mov	sp, r7
 8002274:	bd80      	pop	{r7, pc}
	...

08002278 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b084      	sub	sp, #16
 800227c:	af00      	add	r7, sp, #0
 800227e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002280:	2300      	movs	r3, #0
 8002282:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8002284:	4b17      	ldr	r3, [pc, #92]	@ (80022e4 <HAL_InitTick+0x6c>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d023      	beq.n	80022d4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800228c:	4b16      	ldr	r3, [pc, #88]	@ (80022e8 <HAL_InitTick+0x70>)
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	4b14      	ldr	r3, [pc, #80]	@ (80022e4 <HAL_InitTick+0x6c>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4619      	mov	r1, r3
 8002296:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800229a:	fbb3 f3f1 	udiv	r3, r3, r1
 800229e:	fbb2 f3f3 	udiv	r3, r2, r3
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 fbbb 	bl	8003a1e <HAL_SYSTICK_Config>
 80022a8:	4603      	mov	r3, r0
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d10f      	bne.n	80022ce <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b0f      	cmp	r3, #15
 80022b2:	d809      	bhi.n	80022c8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80022b4:	2200      	movs	r2, #0
 80022b6:	6879      	ldr	r1, [r7, #4]
 80022b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80022bc:	f001 fb85 	bl	80039ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80022c0:	4a0a      	ldr	r2, [pc, #40]	@ (80022ec <HAL_InitTick+0x74>)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	e007      	b.n	80022d8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80022c8:	2301      	movs	r3, #1
 80022ca:	73fb      	strb	r3, [r7, #15]
 80022cc:	e004      	b.n	80022d8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
 80022d2:	e001      	b.n	80022d8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80022d8:	7bfb      	ldrb	r3, [r7, #15]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3710      	adds	r7, #16
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	2000000c 	.word	0x2000000c
 80022e8:	20000004 	.word	0x20000004
 80022ec:	20000008 	.word	0x20000008

080022f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80022f0:	b480      	push	{r7}
 80022f2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80022f4:	4b06      	ldr	r3, [pc, #24]	@ (8002310 <HAL_IncTick+0x20>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	461a      	mov	r2, r3
 80022fa:	4b06      	ldr	r3, [pc, #24]	@ (8002314 <HAL_IncTick+0x24>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	4413      	add	r3, r2
 8002300:	4a04      	ldr	r2, [pc, #16]	@ (8002314 <HAL_IncTick+0x24>)
 8002302:	6013      	str	r3, [r2, #0]
}
 8002304:	bf00      	nop
 8002306:	46bd      	mov	sp, r7
 8002308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230c:	4770      	bx	lr
 800230e:	bf00      	nop
 8002310:	2000000c 	.word	0x2000000c
 8002314:	20000484 	.word	0x20000484

08002318 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  return uwTick;
 800231c:	4b03      	ldr	r3, [pc, #12]	@ (800232c <HAL_GetTick+0x14>)
 800231e:	681b      	ldr	r3, [r3, #0]
}
 8002320:	4618      	mov	r0, r3
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr
 800232a:	bf00      	nop
 800232c:	20000484 	.word	0x20000484

08002330 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002330:	b480      	push	{r7}
 8002332:	b083      	sub	sp, #12
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	689b      	ldr	r3, [r3, #8]
 800233e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8002342:	683b      	ldr	r3, [r7, #0]
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	609a      	str	r2, [r3, #8]
}
 800234a:	bf00      	nop
 800234c:	370c      	adds	r7, #12
 800234e:	46bd      	mov	sp, r7
 8002350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002354:	4770      	bx	lr

08002356 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
 800235e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	689b      	ldr	r3, [r3, #8]
 8002364:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	431a      	orrs	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	609a      	str	r2, [r3, #8]
}
 8002370:	bf00      	nop
 8002372:	370c      	adds	r7, #12
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800237c:	b480      	push	{r7}
 800237e:	b083      	sub	sp, #12
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	689b      	ldr	r3, [r3, #8]
 8002388:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800238c:	4618      	mov	r0, r3
 800238e:	370c      	adds	r7, #12
 8002390:	46bd      	mov	sp, r7
 8002392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002396:	4770      	bx	lr

08002398 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002398:	b480      	push	{r7}
 800239a:	b087      	sub	sp, #28
 800239c:	af00      	add	r7, sp, #0
 800239e:	60f8      	str	r0, [r7, #12]
 80023a0:	60b9      	str	r1, [r7, #8]
 80023a2:	607a      	str	r2, [r7, #4]
 80023a4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	3360      	adds	r3, #96	@ 0x60
 80023aa:	461a      	mov	r2, r3
 80023ac:	68bb      	ldr	r3, [r7, #8]
 80023ae:	009b      	lsls	r3, r3, #2
 80023b0:	4413      	add	r3, r2
 80023b2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b08      	ldr	r3, [pc, #32]	@ (80023dc <LL_ADC_SetOffset+0x44>)
 80023ba:	4013      	ands	r3, r2
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	4313      	orrs	r3, r2
 80023c8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80023cc:	697b      	ldr	r3, [r7, #20]
 80023ce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80023d0:	bf00      	nop
 80023d2:	371c      	adds	r7, #28
 80023d4:	46bd      	mov	sp, r7
 80023d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023da:	4770      	bx	lr
 80023dc:	03fff000 	.word	0x03fff000

080023e0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3360      	adds	r3, #96	@ 0x60
 80023ee:	461a      	mov	r2, r3
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	009b      	lsls	r3, r3, #2
 80023f4:	4413      	add	r3, r2
 80023f6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8002400:	4618      	mov	r0, r3
 8002402:	3714      	adds	r7, #20
 8002404:	46bd      	mov	sp, r7
 8002406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240a:	4770      	bx	lr

0800240c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	60f8      	str	r0, [r7, #12]
 8002414:	60b9      	str	r1, [r7, #8]
 8002416:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	3360      	adds	r3, #96	@ 0x60
 800241c:	461a      	mov	r2, r3
 800241e:	68bb      	ldr	r3, [r7, #8]
 8002420:	009b      	lsls	r3, r3, #2
 8002422:	4413      	add	r3, r2
 8002424:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	431a      	orrs	r2, r3
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002436:	bf00      	nop
 8002438:	371c      	adds	r7, #28
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr

08002442 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002442:	b480      	push	{r7}
 8002444:	b083      	sub	sp, #12
 8002446:	af00      	add	r7, sp, #0
 8002448:	6078      	str	r0, [r7, #4]
 800244a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	695b      	ldr	r3, [r3, #20]
 8002450:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8002454:	683b      	ldr	r3, [r7, #0]
 8002456:	431a      	orrs	r2, r3
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	615a      	str	r2, [r3, #20]
}
 800245c:	bf00      	nop
 800245e:	370c      	adds	r7, #12
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002468:	b480      	push	{r7}
 800246a:	b083      	sub	sp, #12
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	68db      	ldr	r3, [r3, #12]
 8002474:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8002478:	2b00      	cmp	r3, #0
 800247a:	d101      	bne.n	8002480 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800247c:	2301      	movs	r3, #1
 800247e:	e000      	b.n	8002482 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002480:	2300      	movs	r3, #0
}
 8002482:	4618      	mov	r0, r3
 8002484:	370c      	adds	r7, #12
 8002486:	46bd      	mov	sp, r7
 8002488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248c:	4770      	bx	lr

0800248e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800248e:	b480      	push	{r7}
 8002490:	b087      	sub	sp, #28
 8002492:	af00      	add	r7, sp, #0
 8002494:	60f8      	str	r0, [r7, #12]
 8002496:	60b9      	str	r1, [r7, #8]
 8002498:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	3330      	adds	r3, #48	@ 0x30
 800249e:	461a      	mov	r2, r3
 80024a0:	68bb      	ldr	r3, [r7, #8]
 80024a2:	0a1b      	lsrs	r3, r3, #8
 80024a4:	009b      	lsls	r3, r3, #2
 80024a6:	f003 030c 	and.w	r3, r3, #12
 80024aa:	4413      	add	r3, r2
 80024ac:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80024ae:	697b      	ldr	r3, [r7, #20]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	68bb      	ldr	r3, [r7, #8]
 80024b4:	f003 031f 	and.w	r3, r3, #31
 80024b8:	211f      	movs	r1, #31
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	401a      	ands	r2, r3
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	0e9b      	lsrs	r3, r3, #26
 80024c6:	f003 011f 	and.w	r1, r3, #31
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	f003 031f 	and.w	r3, r3, #31
 80024d0:	fa01 f303 	lsl.w	r3, r1, r3
 80024d4:	431a      	orrs	r2, r3
 80024d6:	697b      	ldr	r3, [r7, #20]
 80024d8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80024da:	bf00      	nop
 80024dc:	371c      	adds	r7, #28
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr

080024e6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80024e6:	b480      	push	{r7}
 80024e8:	b083      	sub	sp, #12
 80024ea:	af00      	add	r7, sp, #0
 80024ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80024f2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d101      	bne.n	80024fe <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 80024fa:	2301      	movs	r3, #1
 80024fc:	e000      	b.n	8002500 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 80024fe:	2300      	movs	r3, #0
}
 8002500:	4618      	mov	r0, r3
 8002502:	370c      	adds	r7, #12
 8002504:	46bd      	mov	sp, r7
 8002506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800250a:	4770      	bx	lr

0800250c <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800250c:	b480      	push	{r7}
 800250e:	b087      	sub	sp, #28
 8002510:	af00      	add	r7, sp, #0
 8002512:	60f8      	str	r0, [r7, #12]
 8002514:	60b9      	str	r1, [r7, #8]
 8002516:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	3314      	adds	r3, #20
 800251c:	461a      	mov	r2, r3
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	0e5b      	lsrs	r3, r3, #25
 8002522:	009b      	lsls	r3, r3, #2
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	4413      	add	r3, r2
 800252a:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	681a      	ldr	r2, [r3, #0]
 8002530:	68bb      	ldr	r3, [r7, #8]
 8002532:	0d1b      	lsrs	r3, r3, #20
 8002534:	f003 031f 	and.w	r3, r3, #31
 8002538:	2107      	movs	r1, #7
 800253a:	fa01 f303 	lsl.w	r3, r1, r3
 800253e:	43db      	mvns	r3, r3
 8002540:	401a      	ands	r2, r3
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	0d1b      	lsrs	r3, r3, #20
 8002546:	f003 031f 	and.w	r3, r3, #31
 800254a:	6879      	ldr	r1, [r7, #4]
 800254c:	fa01 f303 	lsl.w	r3, r1, r3
 8002550:	431a      	orrs	r2, r3
 8002552:	697b      	ldr	r3, [r7, #20]
 8002554:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002556:	bf00      	nop
 8002558:	371c      	adds	r7, #28
 800255a:	46bd      	mov	sp, r7
 800255c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002560:	4770      	bx	lr
	...

08002564 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002564:	b480      	push	{r7}
 8002566:	b085      	sub	sp, #20
 8002568:	af00      	add	r7, sp, #0
 800256a:	60f8      	str	r0, [r7, #12]
 800256c:	60b9      	str	r1, [r7, #8]
 800256e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800257c:	43db      	mvns	r3, r3
 800257e:	401a      	ands	r2, r3
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	f003 0318 	and.w	r3, r3, #24
 8002586:	4908      	ldr	r1, [pc, #32]	@ (80025a8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8002588:	40d9      	lsrs	r1, r3
 800258a:	68bb      	ldr	r3, [r7, #8]
 800258c:	400b      	ands	r3, r1
 800258e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002592:	431a      	orrs	r2, r3
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800259a:	bf00      	nop
 800259c:	3714      	adds	r7, #20
 800259e:	46bd      	mov	sp, r7
 80025a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a4:	4770      	bx	lr
 80025a6:	bf00      	nop
 80025a8:	0007ffff 	.word	0x0007ffff

080025ac <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b083      	sub	sp, #12
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 80025bc:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6093      	str	r3, [r2, #8]
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr

080025d0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	689b      	ldr	r3, [r3, #8]
 80025dc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80025e0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80025e4:	d101      	bne.n	80025ea <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80025e6:	2301      	movs	r3, #1
 80025e8:	e000      	b.n	80025ec <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80025ea:	2300      	movs	r3, #0
}
 80025ec:	4618      	mov	r0, r3
 80025ee:	370c      	adds	r7, #12
 80025f0:	46bd      	mov	sp, r7
 80025f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f6:	4770      	bx	lr

080025f8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80025f8:	b480      	push	{r7}
 80025fa:	b083      	sub	sp, #12
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	689b      	ldr	r3, [r3, #8]
 8002604:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8002608:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800260c:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002614:	bf00      	nop
 8002616:	370c      	adds	r7, #12
 8002618:	46bd      	mov	sp, r7
 800261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800261e:	4770      	bx	lr

08002620 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8002620:	b480      	push	{r7}
 8002622:	b083      	sub	sp, #12
 8002624:	af00      	add	r7, sp, #0
 8002626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002630:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002634:	d101      	bne.n	800263a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002636:	2301      	movs	r3, #1
 8002638:	e000      	b.n	800263c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	370c      	adds	r7, #12
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr

08002648 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002648:	b480      	push	{r7}
 800264a:	b083      	sub	sp, #12
 800264c:	af00      	add	r7, sp, #0
 800264e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	689b      	ldr	r3, [r3, #8]
 8002654:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8002658:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800265c:	f043 0201 	orr.w	r2, r3, #1
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002664:	bf00      	nop
 8002666:	370c      	adds	r7, #12
 8002668:	46bd      	mov	sp, r7
 800266a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266e:	4770      	bx	lr

08002670 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8002670:	b480      	push	{r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	f003 0301 	and.w	r3, r3, #1
 8002680:	2b01      	cmp	r3, #1
 8002682:	d101      	bne.n	8002688 <LL_ADC_IsEnabled+0x18>
 8002684:	2301      	movs	r3, #1
 8002686:	e000      	b.n	800268a <LL_ADC_IsEnabled+0x1a>
 8002688:	2300      	movs	r3, #0
}
 800268a:	4618      	mov	r0, r3
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr

08002696 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002696:	b480      	push	{r7}
 8002698:	b083      	sub	sp, #12
 800269a:	af00      	add	r7, sp, #0
 800269c:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80026a6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80026aa:	f043 0204 	orr.w	r2, r3, #4
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80026b2:	bf00      	nop
 80026b4:	370c      	adds	r7, #12
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr

080026be <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026be:	b480      	push	{r7}
 80026c0:	b083      	sub	sp, #12
 80026c2:	af00      	add	r7, sp, #0
 80026c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	689b      	ldr	r3, [r3, #8]
 80026ca:	f003 0304 	and.w	r3, r3, #4
 80026ce:	2b04      	cmp	r3, #4
 80026d0:	d101      	bne.n	80026d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80026d2:	2301      	movs	r3, #1
 80026d4:	e000      	b.n	80026d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80026d6:	2300      	movs	r3, #0
}
 80026d8:	4618      	mov	r0, r3
 80026da:	370c      	adds	r7, #12
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr

080026e4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80026e4:	b480      	push	{r7}
 80026e6:	b083      	sub	sp, #12
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	689b      	ldr	r3, [r3, #8]
 80026f0:	f003 0308 	and.w	r3, r3, #8
 80026f4:	2b08      	cmp	r3, #8
 80026f6:	d101      	bne.n	80026fc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80026f8:	2301      	movs	r3, #1
 80026fa:	e000      	b.n	80026fe <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	4618      	mov	r0, r3
 8002700:	370c      	adds	r7, #12
 8002702:	46bd      	mov	sp, r7
 8002704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002708:	4770      	bx	lr
	...

0800270c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b088      	sub	sp, #32
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002714:	2300      	movs	r3, #0
 8002716:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8002718:	2300      	movs	r3, #0
 800271a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2b00      	cmp	r3, #0
 8002720:	d101      	bne.n	8002726 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002722:	2301      	movs	r3, #1
 8002724:	e129      	b.n	800297a <HAL_ADC_Init+0x26e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	691b      	ldr	r3, [r3, #16]
 800272a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002730:	2b00      	cmp	r3, #0
 8002732:	d109      	bne.n	8002748 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002734:	6878      	ldr	r0, [r7, #4]
 8002736:	f7ff fa45 	bl	8001bc4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7ff ff3f 	bl	80025d0 <LL_ADC_IsDeepPowerDownEnabled>
 8002752:	4603      	mov	r3, r0
 8002754:	2b00      	cmp	r3, #0
 8002756:	d004      	beq.n	8002762 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	4618      	mov	r0, r3
 800275e:	f7ff ff25 	bl	80025ac <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	4618      	mov	r0, r3
 8002768:	f7ff ff5a 	bl	8002620 <LL_ADC_IsInternalRegulatorEnabled>
 800276c:	4603      	mov	r3, r0
 800276e:	2b00      	cmp	r3, #0
 8002770:	d115      	bne.n	800279e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	4618      	mov	r0, r3
 8002778:	f7ff ff3e 	bl	80025f8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800277c:	4b81      	ldr	r3, [pc, #516]	@ (8002984 <HAL_ADC_Init+0x278>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	099b      	lsrs	r3, r3, #6
 8002782:	4a81      	ldr	r2, [pc, #516]	@ (8002988 <HAL_ADC_Init+0x27c>)
 8002784:	fba2 2303 	umull	r2, r3, r2, r3
 8002788:	099b      	lsrs	r3, r3, #6
 800278a:	3301      	adds	r3, #1
 800278c:	005b      	lsls	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002790:	e002      	b.n	8002798 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	3b01      	subs	r3, #1
 8002796:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	2b00      	cmp	r3, #0
 800279c:	d1f9      	bne.n	8002792 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4618      	mov	r0, r3
 80027a4:	f7ff ff3c 	bl	8002620 <LL_ADC_IsInternalRegulatorEnabled>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10d      	bne.n	80027ca <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027b2:	f043 0210 	orr.w	r2, r3, #16
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027be:	f043 0201 	orr.w	r2, r3, #1
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f7ff ff75 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 80027d4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027da:	f003 0310 	and.w	r3, r3, #16
 80027de:	2b00      	cmp	r3, #0
 80027e0:	f040 80c2 	bne.w	8002968 <HAL_ADC_Init+0x25c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	f040 80be 	bne.w	8002968 <HAL_ADC_Init+0x25c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027f0:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80027f4:	f043 0202 	orr.w	r2, r3, #2
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	659a      	str	r2, [r3, #88]	@ 0x58
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff ff35 	bl	8002670 <LL_ADC_IsEnabled>
 8002806:	4603      	mov	r3, r0
 8002808:	2b00      	cmp	r3, #0
 800280a:	d10b      	bne.n	8002824 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800280c:	485f      	ldr	r0, [pc, #380]	@ (800298c <HAL_ADC_Init+0x280>)
 800280e:	f7ff ff2f 	bl	8002670 <LL_ADC_IsEnabled>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d105      	bne.n	8002824 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	685b      	ldr	r3, [r3, #4]
 800281c:	4619      	mov	r1, r3
 800281e:	485c      	ldr	r0, [pc, #368]	@ (8002990 <HAL_ADC_Init+0x284>)
 8002820:	f7ff fd86 	bl	8002330 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	7e5b      	ldrb	r3, [r3, #25]
 8002828:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800282e:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002834:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800283a:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002842:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002844:	4313      	orrs	r3, r2
 8002846:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800284e:	2b01      	cmp	r3, #1
 8002850:	d106      	bne.n	8002860 <HAL_ADC_Init+0x154>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002856:	3b01      	subs	r3, #1
 8002858:	045b      	lsls	r3, r3, #17
 800285a:	69ba      	ldr	r2, [r7, #24]
 800285c:	4313      	orrs	r3, r2
 800285e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002864:	2b00      	cmp	r3, #0
 8002866:	d009      	beq.n	800287c <HAL_ADC_Init+0x170>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800286c:	f403 7270 	and.w	r2, r3, #960	@ 0x3c0
                   | hadc->Init.ExternalTrigConvEdge
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002874:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002876:	69ba      	ldr	r2, [r7, #24]
 8002878:	4313      	orrs	r3, r2
 800287a:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	68da      	ldr	r2, [r3, #12]
 8002882:	4b44      	ldr	r3, [pc, #272]	@ (8002994 <HAL_ADC_Init+0x288>)
 8002884:	4013      	ands	r3, r2
 8002886:	687a      	ldr	r2, [r7, #4]
 8002888:	6812      	ldr	r2, [r2, #0]
 800288a:	69b9      	ldr	r1, [r7, #24]
 800288c:	430b      	orrs	r3, r1
 800288e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7ff ff25 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 800289a:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d140      	bne.n	8002924 <HAL_ADC_Init+0x218>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80028a2:	693b      	ldr	r3, [r7, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d13d      	bne.n	8002924 <HAL_ADC_Init+0x218>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	7e1b      	ldrb	r3, [r3, #24]
 80028b0:	039b      	lsls	r3, r3, #14
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028b2:	431a      	orrs	r2, r3
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80028ba:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80028bc:	4313      	orrs	r3, r2
 80028be:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	68db      	ldr	r3, [r3, #12]
 80028c6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80028ca:	f023 0306 	bic.w	r3, r3, #6
 80028ce:	687a      	ldr	r2, [r7, #4]
 80028d0:	6812      	ldr	r2, [r2, #0]
 80028d2:	69b9      	ldr	r1, [r7, #24]
 80028d4:	430b      	orrs	r3, r1
 80028d6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80028de:	2b01      	cmp	r3, #1
 80028e0:	d118      	bne.n	8002914 <HAL_ADC_Init+0x208>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	691b      	ldr	r3, [r3, #16]
 80028e8:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80028ec:	f023 0304 	bic.w	r3, r3, #4
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	6bd1      	ldr	r1, [r2, #60]	@ 0x3c
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80028f8:	4311      	orrs	r1, r2
 80028fa:	687a      	ldr	r2, [r7, #4]
 80028fc:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 80028fe:	4311      	orrs	r1, r2
 8002900:	687a      	ldr	r2, [r7, #4]
 8002902:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002904:	430a      	orrs	r2, r1
 8002906:	431a      	orrs	r2, r3
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f042 0201 	orr.w	r2, r2, #1
 8002910:	611a      	str	r2, [r3, #16]
 8002912:	e007      	b.n	8002924 <HAL_ADC_Init+0x218>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	691a      	ldr	r2, [r3, #16]
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	f022 0201 	bic.w	r2, r2, #1
 8002922:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	691b      	ldr	r3, [r3, #16]
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10c      	bne.n	8002946 <HAL_ADC_Init+0x23a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002932:	f023 010f 	bic.w	r1, r3, #15
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	69db      	ldr	r3, [r3, #28]
 800293a:	1e5a      	subs	r2, r3, #1
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	430a      	orrs	r2, r1
 8002942:	631a      	str	r2, [r3, #48]	@ 0x30
 8002944:	e007      	b.n	8002956 <HAL_ADC_Init+0x24a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f022 020f 	bic.w	r2, r2, #15
 8002954:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800295a:	f023 0303 	bic.w	r3, r3, #3
 800295e:	f043 0201 	orr.w	r2, r3, #1
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	659a      	str	r2, [r3, #88]	@ 0x58
 8002966:	e007      	b.n	8002978 <HAL_ADC_Init+0x26c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800296c:	f043 0210 	orr.w	r2, r3, #16
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002978:	7ffb      	ldrb	r3, [r7, #31]
}
 800297a:	4618      	mov	r0, r3
 800297c:	3720      	adds	r7, #32
 800297e:	46bd      	mov	sp, r7
 8002980:	bd80      	pop	{r7, pc}
 8002982:	bf00      	nop
 8002984:	20000004 	.word	0x20000004
 8002988:	053e2d63 	.word	0x053e2d63
 800298c:	50040000 	.word	0x50040000
 8002990:	50040300 	.word	0x50040300
 8002994:	fff0c007 	.word	0xfff0c007

08002998 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b084      	sub	sp, #16
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff fe8a 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	f040 80a0 	bne.w	8002af2 <HAL_ADC_Start_IT+0x15a>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 80029b8:	2b01      	cmp	r3, #1
 80029ba:	d101      	bne.n	80029c0 <HAL_ADC_Start_IT+0x28>
 80029bc:	2302      	movs	r3, #2
 80029be:	e09b      	b.n	8002af8 <HAL_ADC_Start_IT+0x160>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f000 fe6b 	bl	80036a4 <ADC_Enable>
 80029ce:	4603      	mov	r3, r0
 80029d0:	73fb      	strb	r3, [r7, #15]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f040 8087 	bne.w	8002ae8 <HAL_ADC_Start_IT+0x150>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029de:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80029e2:	f023 0301 	bic.w	r3, r3, #1
 80029e6:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	659a      	str	r2, [r3, #88]	@ 0x58
      }
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029f2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d006      	beq.n	8002a08 <HAL_ADC_Start_IT+0x70>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029fe:	f023 0206 	bic.w	r2, r3, #6
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002a06:	e002      	b.n	8002a0e <HAL_ADC_Start_IT+0x76>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	65da      	str	r2, [r3, #92]	@ 0x5c
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	221c      	movs	r2, #28
 8002a14:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f022 021c 	bic.w	r2, r2, #28
 8002a2c:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	695b      	ldr	r3, [r3, #20]
 8002a32:	2b08      	cmp	r3, #8
 8002a34:	d108      	bne.n	8002a48 <HAL_ADC_Start_IT+0xb0>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	685a      	ldr	r2, [r3, #4]
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	f042 0208 	orr.w	r2, r2, #8
 8002a44:	605a      	str	r2, [r3, #4]
          break;
 8002a46:	e008      	b.n	8002a5a <HAL_ADC_Start_IT+0xc2>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f042 0204 	orr.w	r2, r2, #4
 8002a56:	605a      	str	r2, [r3, #4]
          break;
 8002a58:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d107      	bne.n	8002a72 <HAL_ADC_Start_IT+0xda>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	685a      	ldr	r2, [r3, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f042 0210 	orr.w	r2, r2, #16
 8002a70:	605a      	str	r2, [r3, #4]
          }
        }
      }
#else
      /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d02d      	beq.n	8002adc <HAL_ADC_Start_IT+0x144>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002a84:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002a88:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	659a      	str	r2, [r3, #88]	@ 0x58

        /* Enable as well injected interruptions in case
         HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
         allows to start regular and injected conversions when JAUTO is
         set with a single call to HAL_ADC_Start_IT() */
        switch (hadc->Init.EOCSelection)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	695b      	ldr	r3, [r3, #20]
 8002a94:	2b08      	cmp	r3, #8
 8002a96:	d110      	bne.n	8002aba <HAL_ADC_Start_IT+0x122>
        {
          case ADC_EOC_SEQ_CONV:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	685a      	ldr	r2, [r3, #4]
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	f022 0220 	bic.w	r2, r2, #32
 8002aa6:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	685a      	ldr	r2, [r3, #4]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ab6:	605a      	str	r2, [r3, #4]
            break;
 8002ab8:	e010      	b.n	8002adc <HAL_ADC_Start_IT+0x144>
          /* case ADC_EOC_SINGLE_CONV */
          default:
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	685a      	ldr	r2, [r3, #4]
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ac8:	605a      	str	r2, [r3, #4]
            __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f042 0220 	orr.w	r2, r2, #32
 8002ad8:	605a      	str	r2, [r3, #4]
            break;
 8002ada:	bf00      	nop
        }
      }

      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	f7ff fdd8 	bl	8002696 <LL_ADC_REG_StartConversion>
 8002ae6:	e006      	b.n	8002af6 <HAL_ADC_Start_IT+0x15e>
#endif /* ADC_MULTIMODE_SUPPORT */
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
 8002af0:	e001      	b.n	8002af6 <HAL_ADC_Start_IT+0x15e>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8002af2:	2302      	movs	r3, #2
 8002af4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return tmp_hal_status;
 8002af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af8:	4618      	mov	r0, r3
 8002afa:	3710      	adds	r7, #16
 8002afc:	46bd      	mov	sp, r7
 8002afe:	bd80      	pop	{r7, pc}

08002b00 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b083      	sub	sp, #12
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8002b1a:	b580      	push	{r7, lr}
 8002b1c:	b088      	sub	sp, #32
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002b22:	2300      	movs	r3, #0
 8002b24:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	f003 0302 	and.w	r3, r3, #2
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d017      	beq.n	8002b70 <HAL_ADC_IRQHandler+0x56>
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d012      	beq.n	8002b70 <HAL_ADC_IRQHandler+0x56>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b4e:	f003 0310 	and.w	r3, r3, #16
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d105      	bne.n	8002b62 <HAL_ADC_IRQHandler+0x48>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b5a:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	659a      	str	r2, [r3, #88]	@ 0x58

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fe4c 	bl	8003800 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	2202      	movs	r2, #2
 8002b6e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b70:	69bb      	ldr	r3, [r7, #24]
 8002b72:	f003 0304 	and.w	r3, r3, #4
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d004      	beq.n	8002b84 <HAL_ADC_IRQHandler+0x6a>
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	f003 0304 	and.w	r3, r3, #4
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d109      	bne.n	8002b98 <HAL_ADC_IRQHandler+0x7e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b84:	69bb      	ldr	r3, [r7, #24]
 8002b86:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d05e      	beq.n	8002c4c <HAL_ADC_IRQHandler+0x132>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002b8e:	697b      	ldr	r3, [r7, #20]
 8002b90:	f003 0308 	and.w	r3, r3, #8
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d059      	beq.n	8002c4c <HAL_ADC_IRQHandler+0x132>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b9c:	f003 0310 	and.w	r3, r3, #16
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d105      	bne.n	8002bb0 <HAL_ADC_IRQHandler+0x96>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ba8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	f7ff fc57 	bl	8002468 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bba:	4603      	mov	r3, r0
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d03e      	beq.n	8002c3e <HAL_ADC_IRQHandler+0x124>
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
      }
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68db      	ldr	r3, [r3, #12]
 8002bc6:	613b      	str	r3, [r7, #16]
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002bc8:	693b      	ldr	r3, [r7, #16]
 8002bca:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d135      	bne.n	8002c3e <HAL_ADC_IRQHandler+0x124>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f003 0308 	and.w	r3, r3, #8
 8002bdc:	2b08      	cmp	r3, #8
 8002bde:	d12e      	bne.n	8002c3e <HAL_ADC_IRQHandler+0x124>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	4618      	mov	r0, r3
 8002be6:	f7ff fd6a 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 8002bea:	4603      	mov	r3, r0
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d11a      	bne.n	8002c26 <HAL_ADC_IRQHandler+0x10c>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	685a      	ldr	r2, [r3, #4]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 020c 	bic.w	r2, r2, #12
 8002bfe:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c04:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	659a      	str	r2, [r3, #88]	@ 0x58

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c10:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d112      	bne.n	8002c3e <HAL_ADC_IRQHandler+0x124>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c1c:	f043 0201 	orr.w	r2, r3, #1
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	659a      	str	r2, [r3, #88]	@ 0x58
 8002c24:	e00b      	b.n	8002c3e <HAL_ADC_IRQHandler+0x124>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c2a:	f043 0210 	orr.w	r2, r3, #16
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	659a      	str	r2, [r3, #88]	@ 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002c36:	f043 0201 	orr.w	r2, r3, #1
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	65da      	str	r2, [r3, #92]	@ 0x5c
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7fe ff82 	bl	8001b48 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	220c      	movs	r2, #12
 8002c4a:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c4c:	69bb      	ldr	r3, [r7, #24]
 8002c4e:	f003 0320 	and.w	r3, r3, #32
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d004      	beq.n	8002c60 <HAL_ADC_IRQHandler+0x146>
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	f003 0320 	and.w	r3, r3, #32
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d109      	bne.n	8002c74 <HAL_ADC_IRQHandler+0x15a>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c60:	69bb      	ldr	r3, [r7, #24]
 8002c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d072      	beq.n	8002d50 <HAL_ADC_IRQHandler+0x236>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002c6a:	697b      	ldr	r3, [r7, #20]
 8002c6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d06d      	beq.n	8002d50 <HAL_ADC_IRQHandler+0x236>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d105      	bne.n	8002c8c <HAL_ADC_IRQHandler+0x172>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c84:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	659a      	str	r2, [r3, #88]	@ 0x58
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4618      	mov	r0, r3
 8002c92:	f7ff fc28 	bl	80024e6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8002c96:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	4618      	mov	r0, r3
 8002c9e:	f7ff fbe3 	bl	8002468 <LL_ADC_REG_IsTriggerSourceSWStart>
 8002ca2:	60b8      	str	r0, [r7, #8]
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
    }
#else
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	68db      	ldr	r3, [r3, #12]
 8002caa:	613b      	str	r3, [r7, #16]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d047      	beq.n	8002d42 <HAL_ADC_IRQHandler+0x228>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002cb2:	693b      	ldr	r3, [r7, #16]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d007      	beq.n	8002ccc <HAL_ADC_IRQHandler+0x1b2>
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d03f      	beq.n	8002d42 <HAL_ADC_IRQHandler+0x228>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d13a      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x228>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002cd6:	2b40      	cmp	r3, #64	@ 0x40
 8002cd8:	d133      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x228>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002cda:	693b      	ldr	r3, [r7, #16]
 8002cdc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d12e      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x228>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4618      	mov	r0, r3
 8002cea:	f7ff fcfb 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d11a      	bne.n	8002d2a <HAL_ADC_IRQHandler+0x210>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	685a      	ldr	r2, [r3, #4]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002d02:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d08:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	659a      	str	r2, [r3, #88]	@ 0x58

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d112      	bne.n	8002d42 <HAL_ADC_IRQHandler+0x228>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d20:	f043 0201 	orr.w	r2, r3, #1
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	659a      	str	r2, [r3, #88]	@ 0x58
 8002d28:	e00b      	b.n	8002d42 <HAL_ADC_IRQHandler+0x228>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d2e:	f043 0210 	orr.w	r2, r3, #16
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	659a      	str	r2, [r3, #88]	@ 0x58

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002d3a:	f043 0201 	orr.w	r2, r3, #1
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	65da      	str	r2, [r3, #92]	@ 0x5c
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f000 fd34 	bl	80037b0 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2260      	movs	r2, #96	@ 0x60
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002d50:	69bb      	ldr	r3, [r7, #24]
 8002d52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d011      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x264>
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00c      	beq.n	8002d7e <HAL_ADC_IRQHandler+0x264>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d68:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f886 	bl	8002e82 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	2280      	movs	r2, #128	@ 0x80
 8002d7c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002d7e:	69bb      	ldr	r3, [r7, #24]
 8002d80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d012      	beq.n	8002dae <HAL_ADC_IRQHandler+0x294>
 8002d88:	697b      	ldr	r3, [r7, #20]
 8002d8a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00d      	beq.n	8002dae <HAL_ADC_IRQHandler+0x294>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002d9e:	6878      	ldr	r0, [r7, #4]
 8002da0:	f000 fd1a 	bl	80037d8 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002dac:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d012      	beq.n	8002dde <HAL_ADC_IRQHandler+0x2c4>
 8002db8:	697b      	ldr	r3, [r7, #20]
 8002dba:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d00d      	beq.n	8002dde <HAL_ADC_IRQHandler+0x2c4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002dc6:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f000 fd0c 	bl	80037ec <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ddc:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002dde:	69bb      	ldr	r3, [r7, #24]
 8002de0:	f003 0310 	and.w	r3, r3, #16
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d02a      	beq.n	8002e3e <HAL_ADC_IRQHandler+0x324>
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	f003 0310 	and.w	r3, r3, #16
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d025      	beq.n	8002e3e <HAL_ADC_IRQHandler+0x324>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d102      	bne.n	8002e00 <HAL_ADC_IRQHandler+0x2e6>
    {
      overrun_error = 1UL;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	61fb      	str	r3, [r7, #28]
 8002dfe:	e008      	b.n	8002e12 <HAL_ADC_IRQHandler+0x2f8>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	68db      	ldr	r3, [r3, #12]
 8002e06:	f003 0301 	and.w	r3, r3, #1
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d001      	beq.n	8002e12 <HAL_ADC_IRQHandler+0x2f8>
        {
          overrun_error = 1UL;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	61fb      	str	r3, [r7, #28]
        }
      }
    }

    if (overrun_error == 1UL)
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	2b01      	cmp	r3, #1
 8002e16:	d10e      	bne.n	8002e36 <HAL_ADC_IRQHandler+0x31c>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e28:	f043 0202 	orr.w	r2, r3, #2
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	65da      	str	r2, [r3, #92]	@ 0x5c
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 f830 	bl	8002e96 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	2210      	movs	r2, #16
 8002e3c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002e3e:	69bb      	ldr	r3, [r7, #24]
 8002e40:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d018      	beq.n	8002e7a <HAL_ADC_IRQHandler+0x360>
 8002e48:	697b      	ldr	r3, [r7, #20]
 8002e4a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d013      	beq.n	8002e7a <HAL_ADC_IRQHandler+0x360>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e56:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002e62:	f043 0208 	orr.w	r2, r3, #8
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e72:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 fca5 	bl	80037c4 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002e7a:	bf00      	nop
 8002e7c:	3720      	adds	r7, #32
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}

08002e82 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002e82:	b480      	push	{r7}
 8002e84:	b083      	sub	sp, #12
 8002e86:	af00      	add	r7, sp, #0
 8002e88:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002e8a:	bf00      	nop
 8002e8c:	370c      	adds	r7, #12
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e94:	4770      	bx	lr

08002e96 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002e96:	b480      	push	{r7}
 8002e98:	b083      	sub	sp, #12
 8002e9a:	af00      	add	r7, sp, #0
 8002e9c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
	...

08002eac <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b0b6      	sub	sp, #216	@ 0xd8
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	6078      	str	r0, [r7, #4]
 8002eb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	f893 3054 	ldrb.w	r3, [r3, #84]	@ 0x54
 8002ec6:	2b01      	cmp	r3, #1
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_ConfigChannel+0x22>
 8002eca:	2302      	movs	r3, #2
 8002ecc:	e3d5      	b.n	800367a <HAL_ADC_ConfigChannel+0x7ce>
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2201      	movs	r2, #1
 8002ed2:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f7ff fbef 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 83ba 	bne.w	800365c <HAL_ADC_ConfigChannel+0x7b0>
  {
#if !defined (USE_FULL_ASSERT)
    uint32_t config_rank = pConfig->Rank;
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (pConfig->Rank <= 5U)
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	685b      	ldr	r3, [r3, #4]
 8002ef4:	2b05      	cmp	r3, #5
 8002ef6:	d824      	bhi.n	8002f42 <HAL_ADC_ConfigChannel+0x96>
    {
      switch (pConfig->Rank)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	3b02      	subs	r3, #2
 8002efe:	2b03      	cmp	r3, #3
 8002f00:	d81b      	bhi.n	8002f3a <HAL_ADC_ConfigChannel+0x8e>
 8002f02:	a201      	add	r2, pc, #4	@ (adr r2, 8002f08 <HAL_ADC_ConfigChannel+0x5c>)
 8002f04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f08:	08002f19 	.word	0x08002f19
 8002f0c:	08002f21 	.word	0x08002f21
 8002f10:	08002f29 	.word	0x08002f29
 8002f14:	08002f31 	.word	0x08002f31
      {
        case 2U:
          config_rank = ADC_REGULAR_RANK_2;
 8002f18:	230c      	movs	r3, #12
 8002f1a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f1e:	e010      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x96>
        case 3U:
          config_rank = ADC_REGULAR_RANK_3;
 8002f20:	2312      	movs	r3, #18
 8002f22:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f26:	e00c      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x96>
        case 4U:
          config_rank = ADC_REGULAR_RANK_4;
 8002f28:	2318      	movs	r3, #24
 8002f2a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f2e:	e008      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x96>
        case 5U:
          config_rank = ADC_REGULAR_RANK_5;
 8002f30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f34:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f38:	e003      	b.n	8002f42 <HAL_ADC_ConfigChannel+0x96>
        /* case 1U */
        default:
          config_rank = ADC_REGULAR_RANK_1;
 8002f3a:	2306      	movs	r3, #6
 8002f3c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
          break;
 8002f40:	bf00      	nop
      }
    }
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, config_rank, pConfig->Channel);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6818      	ldr	r0, [r3, #0]
 8002f46:	683b      	ldr	r3, [r7, #0]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	461a      	mov	r2, r3
 8002f4c:	f8d7 10d0 	ldr.w	r1, [r7, #208]	@ 0xd0
 8002f50:	f7ff fa9d 	bl	800248e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7ff fbb0 	bl	80026be <LL_ADC_REG_IsConversionOngoing>
 8002f5e:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4618      	mov	r0, r3
 8002f68:	f7ff fbbc 	bl	80026e4 <LL_ADC_INJ_IsConversionOngoing>
 8002f6c:	f8c7 00c8 	str.w	r0, [r7, #200]	@ 0xc8
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f70:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f040 81bf 	bne.w	80032f8 <HAL_ADC_ConfigChannel+0x44c>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f7a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f040 81ba 	bne.w	80032f8 <HAL_ADC_ConfigChannel+0x44c>
       )
    {
#if defined(ADC_SMPR1_SMPPLUS)
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002f8c:	d10f      	bne.n	8002fae <HAL_ADC_ConfigChannel+0x102>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6818      	ldr	r0, [r3, #0]
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2200      	movs	r2, #0
 8002f98:	4619      	mov	r1, r3
 8002f9a:	f7ff fab7 	bl	800250c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	f7ff fa4b 	bl	8002442 <LL_ADC_SetSamplingTimeCommonConfig>
 8002fac:	e00e      	b.n	8002fcc <HAL_ADC_ConfigChannel+0x120>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	6818      	ldr	r0, [r3, #0]
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	689b      	ldr	r3, [r3, #8]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	f7ff faa6 	bl	800250c <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	2100      	movs	r1, #0
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff fa3b 	bl	8002442 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	695a      	ldr	r2, [r3, #20]
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	68db      	ldr	r3, [r3, #12]
 8002fd6:	08db      	lsrs	r3, r3, #3
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	691b      	ldr	r3, [r3, #16]
 8002fea:	2b04      	cmp	r3, #4
 8002fec:	d00a      	beq.n	8003004 <HAL_ADC_ConfigChannel+0x158>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	6818      	ldr	r0, [r3, #0]
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	6919      	ldr	r1, [r3, #16]
 8002ff6:	683b      	ldr	r3, [r7, #0]
 8002ff8:	681a      	ldr	r2, [r3, #0]
 8002ffa:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ffe:	f7ff f9cb 	bl	8002398 <LL_ADC_SetOffset>
 8003002:	e179      	b.n	80032f8 <HAL_ADC_ConfigChannel+0x44c>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	2100      	movs	r1, #0
 800300a:	4618      	mov	r0, r3
 800300c:	f7ff f9e8 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003010:	4603      	mov	r3, r0
 8003012:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003016:	2b00      	cmp	r3, #0
 8003018:	d10a      	bne.n	8003030 <HAL_ADC_ConfigChannel+0x184>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	2100      	movs	r1, #0
 8003020:	4618      	mov	r0, r3
 8003022:	f7ff f9dd 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003026:	4603      	mov	r3, r0
 8003028:	0e9b      	lsrs	r3, r3, #26
 800302a:	f003 021f 	and.w	r2, r3, #31
 800302e:	e01e      	b.n	800306e <HAL_ADC_ConfigChannel+0x1c2>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	2100      	movs	r1, #0
 8003036:	4618      	mov	r0, r3
 8003038:	f7ff f9d2 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 800303c:	4603      	mov	r3, r0
 800303e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003042:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003046:	fa93 f3a3 	rbit	r3, r3
 800304a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800304e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8003052:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003056:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800305a:	2b00      	cmp	r3, #0
 800305c:	d101      	bne.n	8003062 <HAL_ADC_ConfigChannel+0x1b6>
  {
    return 32U;
 800305e:	2320      	movs	r3, #32
 8003060:	e004      	b.n	800306c <HAL_ADC_ConfigChannel+0x1c0>
  }
  return __builtin_clz(value);
 8003062:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8003066:	fab3 f383 	clz	r3, r3
 800306a:	b2db      	uxtb	r3, r3
 800306c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003076:	2b00      	cmp	r3, #0
 8003078:	d105      	bne.n	8003086 <HAL_ADC_ConfigChannel+0x1da>
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	0e9b      	lsrs	r3, r3, #26
 8003080:	f003 031f 	and.w	r3, r3, #31
 8003084:	e018      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x20c>
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800308e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003092:	fa93 f3a3 	rbit	r3, r3
 8003096:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  return result;
 800309a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800309e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  if (value == 0U)
 80030a2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d101      	bne.n	80030ae <HAL_ADC_ConfigChannel+0x202>
    return 32U;
 80030aa:	2320      	movs	r3, #32
 80030ac:	e004      	b.n	80030b8 <HAL_ADC_ConfigChannel+0x20c>
  return __builtin_clz(value);
 80030ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80030b2:	fab3 f383 	clz	r3, r3
 80030b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80030b8:	429a      	cmp	r2, r3
 80030ba:	d106      	bne.n	80030ca <HAL_ADC_ConfigChannel+0x21e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2200      	movs	r2, #0
 80030c2:	2100      	movs	r1, #0
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7ff f9a1 	bl	800240c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2101      	movs	r1, #1
 80030d0:	4618      	mov	r0, r3
 80030d2:	f7ff f985 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80030d6:	4603      	mov	r3, r0
 80030d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d10a      	bne.n	80030f6 <HAL_ADC_ConfigChannel+0x24a>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	2101      	movs	r1, #1
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7ff f97a 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80030ec:	4603      	mov	r3, r0
 80030ee:	0e9b      	lsrs	r3, r3, #26
 80030f0:	f003 021f 	and.w	r2, r3, #31
 80030f4:	e01e      	b.n	8003134 <HAL_ADC_ConfigChannel+0x288>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	2101      	movs	r1, #1
 80030fc:	4618      	mov	r0, r3
 80030fe:	f7ff f96f 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003102:	4603      	mov	r3, r0
 8003104:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003108:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800310c:	fa93 f3a3 	rbit	r3, r3
 8003110:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  return result;
 8003114:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003118:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  if (value == 0U)
 800311c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8003120:	2b00      	cmp	r3, #0
 8003122:	d101      	bne.n	8003128 <HAL_ADC_ConfigChannel+0x27c>
    return 32U;
 8003124:	2320      	movs	r3, #32
 8003126:	e004      	b.n	8003132 <HAL_ADC_ConfigChannel+0x286>
  return __builtin_clz(value);
 8003128:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800312c:	fab3 f383 	clz	r3, r3
 8003130:	b2db      	uxtb	r3, r3
 8003132:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003134:	683b      	ldr	r3, [r7, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800313c:	2b00      	cmp	r3, #0
 800313e:	d105      	bne.n	800314c <HAL_ADC_ConfigChannel+0x2a0>
 8003140:	683b      	ldr	r3, [r7, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	0e9b      	lsrs	r3, r3, #26
 8003146:	f003 031f 	and.w	r3, r3, #31
 800314a:	e018      	b.n	800317e <HAL_ADC_ConfigChannel+0x2d2>
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003154:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003158:	fa93 f3a3 	rbit	r3, r3
 800315c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  return result;
 8003160:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8003164:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
  if (value == 0U)
 8003168:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800316c:	2b00      	cmp	r3, #0
 800316e:	d101      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x2c8>
    return 32U;
 8003170:	2320      	movs	r3, #32
 8003172:	e004      	b.n	800317e <HAL_ADC_ConfigChannel+0x2d2>
  return __builtin_clz(value);
 8003174:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003178:	fab3 f383 	clz	r3, r3
 800317c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800317e:	429a      	cmp	r2, r3
 8003180:	d106      	bne.n	8003190 <HAL_ADC_ConfigChannel+0x2e4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	2200      	movs	r2, #0
 8003188:	2101      	movs	r1, #1
 800318a:	4618      	mov	r0, r3
 800318c:	f7ff f93e 	bl	800240c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	2102      	movs	r1, #2
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff f922 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 800319c:	4603      	mov	r3, r0
 800319e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d10a      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x310>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2102      	movs	r1, #2
 80031ac:	4618      	mov	r0, r3
 80031ae:	f7ff f917 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80031b2:	4603      	mov	r3, r0
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	f003 021f 	and.w	r2, r3, #31
 80031ba:	e01e      	b.n	80031fa <HAL_ADC_ConfigChannel+0x34e>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2102      	movs	r1, #2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff f90c 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 80031c8:	4603      	mov	r3, r0
 80031ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031d2:	fa93 f3a3 	rbit	r3, r3
 80031d6:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  return result;
 80031da:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031de:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  if (value == 0U)
 80031e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d101      	bne.n	80031ee <HAL_ADC_ConfigChannel+0x342>
    return 32U;
 80031ea:	2320      	movs	r3, #32
 80031ec:	e004      	b.n	80031f8 <HAL_ADC_ConfigChannel+0x34c>
  return __builtin_clz(value);
 80031ee:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f2:	fab3 f383 	clz	r3, r3
 80031f6:	b2db      	uxtb	r3, r3
 80031f8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003202:	2b00      	cmp	r3, #0
 8003204:	d105      	bne.n	8003212 <HAL_ADC_ConfigChannel+0x366>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	0e9b      	lsrs	r3, r3, #26
 800320c:	f003 031f 	and.w	r3, r3, #31
 8003210:	e014      	b.n	800323c <HAL_ADC_ConfigChannel+0x390>
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003218:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800321a:	fa93 f3a3 	rbit	r3, r3
 800321e:	67bb      	str	r3, [r7, #120]	@ 0x78
  return result;
 8003220:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003222:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  if (value == 0U)
 8003226:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800322a:	2b00      	cmp	r3, #0
 800322c:	d101      	bne.n	8003232 <HAL_ADC_ConfigChannel+0x386>
    return 32U;
 800322e:	2320      	movs	r3, #32
 8003230:	e004      	b.n	800323c <HAL_ADC_ConfigChannel+0x390>
  return __builtin_clz(value);
 8003232:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8003236:	fab3 f383 	clz	r3, r3
 800323a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800323c:	429a      	cmp	r2, r3
 800323e:	d106      	bne.n	800324e <HAL_ADC_ConfigChannel+0x3a2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	2200      	movs	r2, #0
 8003246:	2102      	movs	r1, #2
 8003248:	4618      	mov	r0, r3
 800324a:	f7ff f8df 	bl	800240c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	2103      	movs	r1, #3
 8003254:	4618      	mov	r0, r3
 8003256:	f7ff f8c3 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 800325a:	4603      	mov	r3, r0
 800325c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <HAL_ADC_ConfigChannel+0x3ce>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	2103      	movs	r1, #3
 800326a:	4618      	mov	r0, r3
 800326c:	f7ff f8b8 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003270:	4603      	mov	r3, r0
 8003272:	0e9b      	lsrs	r3, r3, #26
 8003274:	f003 021f 	and.w	r2, r3, #31
 8003278:	e017      	b.n	80032aa <HAL_ADC_ConfigChannel+0x3fe>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2103      	movs	r1, #3
 8003280:	4618      	mov	r0, r3
 8003282:	f7ff f8ad 	bl	80023e0 <LL_ADC_GetOffsetChannel>
 8003286:	4603      	mov	r3, r0
 8003288:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800328c:	fa93 f3a3 	rbit	r3, r3
 8003290:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 8003292:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8003294:	677b      	str	r3, [r7, #116]	@ 0x74
  if (value == 0U)
 8003296:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003298:	2b00      	cmp	r3, #0
 800329a:	d101      	bne.n	80032a0 <HAL_ADC_ConfigChannel+0x3f4>
    return 32U;
 800329c:	2320      	movs	r3, #32
 800329e:	e003      	b.n	80032a8 <HAL_ADC_ConfigChannel+0x3fc>
  return __builtin_clz(value);
 80032a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80032a2:	fab3 f383 	clz	r3, r3
 80032a6:	b2db      	uxtb	r3, r3
 80032a8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d105      	bne.n	80032c2 <HAL_ADC_ConfigChannel+0x416>
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	0e9b      	lsrs	r3, r3, #26
 80032bc:	f003 031f 	and.w	r3, r3, #31
 80032c0:	e011      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x43a>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80032ca:	fa93 f3a3 	rbit	r3, r3
 80032ce:	663b      	str	r3, [r7, #96]	@ 0x60
  return result;
 80032d0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80032d2:	66bb      	str	r3, [r7, #104]	@ 0x68
  if (value == 0U)
 80032d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d101      	bne.n	80032de <HAL_ADC_ConfigChannel+0x432>
    return 32U;
 80032da:	2320      	movs	r3, #32
 80032dc:	e003      	b.n	80032e6 <HAL_ADC_ConfigChannel+0x43a>
  return __builtin_clz(value);
 80032de:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80032e0:	fab3 f383 	clz	r3, r3
 80032e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d106      	bne.n	80032f8 <HAL_ADC_ConfigChannel+0x44c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	2200      	movs	r2, #0
 80032f0:	2103      	movs	r1, #3
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff f88a 	bl	800240c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7ff f9b7 	bl	8002670 <LL_ADC_IsEnabled>
 8003302:	4603      	mov	r3, r0
 8003304:	2b00      	cmp	r3, #0
 8003306:	f040 813f 	bne.w	8003588 <HAL_ADC_ConfigChannel+0x6dc>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6818      	ldr	r0, [r3, #0]
 800330e:	683b      	ldr	r3, [r7, #0]
 8003310:	6819      	ldr	r1, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	461a      	mov	r2, r3
 8003318:	f7ff f924 	bl	8002564 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800331c:	683b      	ldr	r3, [r7, #0]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	4a8e      	ldr	r2, [pc, #568]	@ (800355c <HAL_ADC_ConfigChannel+0x6b0>)
 8003322:	4293      	cmp	r3, r2
 8003324:	f040 8130 	bne.w	8003588 <HAL_ADC_ConfigChannel+0x6dc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003334:	2b00      	cmp	r3, #0
 8003336:	d10b      	bne.n	8003350 <HAL_ADC_ConfigChannel+0x4a4>
 8003338:	683b      	ldr	r3, [r7, #0]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	0e9b      	lsrs	r3, r3, #26
 800333e:	3301      	adds	r3, #1
 8003340:	f003 031f 	and.w	r3, r3, #31
 8003344:	2b09      	cmp	r3, #9
 8003346:	bf94      	ite	ls
 8003348:	2301      	movls	r3, #1
 800334a:	2300      	movhi	r3, #0
 800334c:	b2db      	uxtb	r3, r3
 800334e:	e019      	b.n	8003384 <HAL_ADC_ConfigChannel+0x4d8>
 8003350:	683b      	ldr	r3, [r7, #0]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	65bb      	str	r3, [r7, #88]	@ 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003356:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8003358:	fa93 f3a3 	rbit	r3, r3
 800335c:	657b      	str	r3, [r7, #84]	@ 0x54
  return result;
 800335e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003360:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (value == 0U)
 8003362:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003364:	2b00      	cmp	r3, #0
 8003366:	d101      	bne.n	800336c <HAL_ADC_ConfigChannel+0x4c0>
    return 32U;
 8003368:	2320      	movs	r3, #32
 800336a:	e003      	b.n	8003374 <HAL_ADC_ConfigChannel+0x4c8>
  return __builtin_clz(value);
 800336c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800336e:	fab3 f383 	clz	r3, r3
 8003372:	b2db      	uxtb	r3, r3
 8003374:	3301      	adds	r3, #1
 8003376:	f003 031f 	and.w	r3, r3, #31
 800337a:	2b09      	cmp	r3, #9
 800337c:	bf94      	ite	ls
 800337e:	2301      	movls	r3, #1
 8003380:	2300      	movhi	r3, #0
 8003382:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003384:	2b00      	cmp	r3, #0
 8003386:	d079      	beq.n	800347c <HAL_ADC_ConfigChannel+0x5d0>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003390:	2b00      	cmp	r3, #0
 8003392:	d107      	bne.n	80033a4 <HAL_ADC_ConfigChannel+0x4f8>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	0e9b      	lsrs	r3, r3, #26
 800339a:	3301      	adds	r3, #1
 800339c:	069b      	lsls	r3, r3, #26
 800339e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033a2:	e015      	b.n	80033d0 <HAL_ADC_ConfigChannel+0x524>
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033aa:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80033ac:	fa93 f3a3 	rbit	r3, r3
 80033b0:	64bb      	str	r3, [r7, #72]	@ 0x48
  return result;
 80033b2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80033b4:	653b      	str	r3, [r7, #80]	@ 0x50
  if (value == 0U)
 80033b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_ADC_ConfigChannel+0x514>
    return 32U;
 80033bc:	2320      	movs	r3, #32
 80033be:	e003      	b.n	80033c8 <HAL_ADC_ConfigChannel+0x51c>
  return __builtin_clz(value);
 80033c0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80033c2:	fab3 f383 	clz	r3, r3
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	3301      	adds	r3, #1
 80033ca:	069b      	lsls	r3, r3, #26
 80033cc:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d109      	bne.n	80033f0 <HAL_ADC_ConfigChannel+0x544>
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	0e9b      	lsrs	r3, r3, #26
 80033e2:	3301      	adds	r3, #1
 80033e4:	f003 031f 	and.w	r3, r3, #31
 80033e8:	2101      	movs	r1, #1
 80033ea:	fa01 f303 	lsl.w	r3, r1, r3
 80033ee:	e017      	b.n	8003420 <HAL_ADC_ConfigChannel+0x574>
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return result;
 80033fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003400:	647b      	str	r3, [r7, #68]	@ 0x44
  if (value == 0U)
 8003402:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <HAL_ADC_ConfigChannel+0x560>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e003      	b.n	8003414 <HAL_ADC_ConfigChannel+0x568>
  return __builtin_clz(value);
 800340c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	3301      	adds	r3, #1
 8003416:	f003 031f 	and.w	r3, r3, #31
 800341a:	2101      	movs	r1, #1
 800341c:	fa01 f303 	lsl.w	r3, r1, r3
 8003420:	ea42 0103 	orr.w	r1, r2, r3
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800342c:	2b00      	cmp	r3, #0
 800342e:	d10a      	bne.n	8003446 <HAL_ADC_ConfigChannel+0x59a>
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	0e9b      	lsrs	r3, r3, #26
 8003436:	3301      	adds	r3, #1
 8003438:	f003 021f 	and.w	r2, r3, #31
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	051b      	lsls	r3, r3, #20
 8003444:	e018      	b.n	8003478 <HAL_ADC_ConfigChannel+0x5cc>
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800344c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800344e:	fa93 f3a3 	rbit	r3, r3
 8003452:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 8003454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003456:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 8003458:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800345a:	2b00      	cmp	r3, #0
 800345c:	d101      	bne.n	8003462 <HAL_ADC_ConfigChannel+0x5b6>
    return 32U;
 800345e:	2320      	movs	r3, #32
 8003460:	e003      	b.n	800346a <HAL_ADC_ConfigChannel+0x5be>
  return __builtin_clz(value);
 8003462:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003464:	fab3 f383 	clz	r3, r3
 8003468:	b2db      	uxtb	r3, r3
 800346a:	3301      	adds	r3, #1
 800346c:	f003 021f 	and.w	r2, r3, #31
 8003470:	4613      	mov	r3, r2
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	4413      	add	r3, r2
 8003476:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003478:	430b      	orrs	r3, r1
 800347a:	e080      	b.n	800357e <HAL_ADC_ConfigChannel+0x6d2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003484:	2b00      	cmp	r3, #0
 8003486:	d107      	bne.n	8003498 <HAL_ADC_ConfigChannel+0x5ec>
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	0e9b      	lsrs	r3, r3, #26
 800348e:	3301      	adds	r3, #1
 8003490:	069b      	lsls	r3, r3, #26
 8003492:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003496:	e015      	b.n	80034c4 <HAL_ADC_ConfigChannel+0x618>
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	627b      	str	r3, [r7, #36]	@ 0x24
  return result;
 80034a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (value == 0U)
 80034aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <HAL_ADC_ConfigChannel+0x608>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <HAL_ADC_ConfigChannel+0x610>
  return __builtin_clz(value);
 80034b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	3301      	adds	r3, #1
 80034be:	069b      	lsls	r3, r3, #26
 80034c0:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d109      	bne.n	80034e4 <HAL_ADC_ConfigChannel+0x638>
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	0e9b      	lsrs	r3, r3, #26
 80034d6:	3301      	adds	r3, #1
 80034d8:	f003 031f 	and.w	r3, r3, #31
 80034dc:	2101      	movs	r1, #1
 80034de:	fa01 f303 	lsl.w	r3, r1, r3
 80034e2:	e017      	b.n	8003514 <HAL_ADC_ConfigChannel+0x668>
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	69fb      	ldr	r3, [r7, #28]
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	61bb      	str	r3, [r7, #24]
  return result;
 80034f2:	69bb      	ldr	r3, [r7, #24]
 80034f4:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 80034f6:	6a3b      	ldr	r3, [r7, #32]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <HAL_ADC_ConfigChannel+0x654>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e003      	b.n	8003508 <HAL_ADC_ConfigChannel+0x65c>
  return __builtin_clz(value);
 8003500:	6a3b      	ldr	r3, [r7, #32]
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	3301      	adds	r3, #1
 800350a:	f003 031f 	and.w	r3, r3, #31
 800350e:	2101      	movs	r1, #1
 8003510:	fa01 f303 	lsl.w	r3, r1, r3
 8003514:	ea42 0103 	orr.w	r1, r2, r3
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003520:	2b00      	cmp	r3, #0
 8003522:	d10d      	bne.n	8003540 <HAL_ADC_ConfigChannel+0x694>
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	0e9b      	lsrs	r3, r3, #26
 800352a:	3301      	adds	r3, #1
 800352c:	f003 021f 	and.w	r2, r3, #31
 8003530:	4613      	mov	r3, r2
 8003532:	005b      	lsls	r3, r3, #1
 8003534:	4413      	add	r3, r2
 8003536:	3b1e      	subs	r3, #30
 8003538:	051b      	lsls	r3, r3, #20
 800353a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800353e:	e01d      	b.n	800357c <HAL_ADC_ConfigChannel+0x6d0>
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003546:	693b      	ldr	r3, [r7, #16]
 8003548:	fa93 f3a3 	rbit	r3, r3
 800354c:	60fb      	str	r3, [r7, #12]
  return result;
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d103      	bne.n	8003560 <HAL_ADC_ConfigChannel+0x6b4>
    return 32U;
 8003558:	2320      	movs	r3, #32
 800355a:	e005      	b.n	8003568 <HAL_ADC_ConfigChannel+0x6bc>
 800355c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003560:	697b      	ldr	r3, [r7, #20]
 8003562:	fab3 f383 	clz	r3, r3
 8003566:	b2db      	uxtb	r3, r3
 8003568:	3301      	adds	r3, #1
 800356a:	f003 021f 	and.w	r2, r3, #31
 800356e:	4613      	mov	r3, r2
 8003570:	005b      	lsls	r3, r3, #1
 8003572:	4413      	add	r3, r2
 8003574:	3b1e      	subs	r3, #30
 8003576:	051b      	lsls	r3, r3, #20
 8003578:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800357c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800357e:	683a      	ldr	r2, [r7, #0]
 8003580:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003582:	4619      	mov	r1, r3
 8003584:	f7fe ffc2 	bl	800250c <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	4b3d      	ldr	r3, [pc, #244]	@ (8003684 <HAL_ADC_ConfigChannel+0x7d8>)
 800358e:	4013      	ands	r3, r2
 8003590:	2b00      	cmp	r3, #0
 8003592:	d06c      	beq.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003594:	483c      	ldr	r0, [pc, #240]	@ (8003688 <HAL_ADC_ConfigChannel+0x7dc>)
 8003596:	f7fe fef1 	bl	800237c <LL_ADC_GetCommonPathInternalCh>
 800359a:	f8c7 00c0 	str.w	r0, [r7, #192]	@ 0xc0

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800359e:	683b      	ldr	r3, [r7, #0]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	4a3a      	ldr	r2, [pc, #232]	@ (800368c <HAL_ADC_ConfigChannel+0x7e0>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d127      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x74c>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80035a8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035ac:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d121      	bne.n	80035f8 <HAL_ADC_ConfigChannel+0x74c>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	4a35      	ldr	r2, [pc, #212]	@ (8003690 <HAL_ADC_ConfigChannel+0x7e4>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d157      	bne.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80035be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80035c2:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80035c6:	4619      	mov	r1, r3
 80035c8:	482f      	ldr	r0, [pc, #188]	@ (8003688 <HAL_ADC_ConfigChannel+0x7dc>)
 80035ca:	f7fe fec4 	bl	8002356 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035ce:	4b31      	ldr	r3, [pc, #196]	@ (8003694 <HAL_ADC_ConfigChannel+0x7e8>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	099b      	lsrs	r3, r3, #6
 80035d4:	4a30      	ldr	r2, [pc, #192]	@ (8003698 <HAL_ADC_ConfigChannel+0x7ec>)
 80035d6:	fba2 2303 	umull	r2, r3, r2, r3
 80035da:	099b      	lsrs	r3, r3, #6
 80035dc:	1c5a      	adds	r2, r3, #1
 80035de:	4613      	mov	r3, r2
 80035e0:	005b      	lsls	r3, r3, #1
 80035e2:	4413      	add	r3, r2
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035e8:	e002      	b.n	80035f0 <HAL_ADC_ConfigChannel+0x744>
          {
            wait_loop_index--;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	3b01      	subs	r3, #1
 80035ee:	60bb      	str	r3, [r7, #8]
          while (wait_loop_index != 0UL)
 80035f0:	68bb      	ldr	r3, [r7, #8]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f9      	bne.n	80035ea <HAL_ADC_ConfigChannel+0x73e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80035f6:	e03a      	b.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a27      	ldr	r2, [pc, #156]	@ (800369c <HAL_ADC_ConfigChannel+0x7f0>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d113      	bne.n	800362a <HAL_ADC_ConfigChannel+0x77e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003602:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003606:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10d      	bne.n	800362a <HAL_ADC_ConfigChannel+0x77e>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a1f      	ldr	r2, [pc, #124]	@ (8003690 <HAL_ADC_ConfigChannel+0x7e4>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d12a      	bne.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003618:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800361c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003620:	4619      	mov	r1, r3
 8003622:	4819      	ldr	r0, [pc, #100]	@ (8003688 <HAL_ADC_ConfigChannel+0x7dc>)
 8003624:	f7fe fe97 	bl	8002356 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003628:	e021      	b.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a1c      	ldr	r2, [pc, #112]	@ (80036a0 <HAL_ADC_ConfigChannel+0x7f4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d11c      	bne.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003634:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8003638:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800363c:	2b00      	cmp	r3, #0
 800363e:	d116      	bne.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	4a12      	ldr	r2, [pc, #72]	@ (8003690 <HAL_ADC_ConfigChannel+0x7e4>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d111      	bne.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800364a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800364e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003652:	4619      	mov	r1, r3
 8003654:	480c      	ldr	r0, [pc, #48]	@ (8003688 <HAL_ADC_ConfigChannel+0x7dc>)
 8003656:	f7fe fe7e 	bl	8002356 <LL_ADC_SetCommonPathInternalCh>
 800365a:	e008      	b.n	800366e <HAL_ADC_ConfigChannel+0x7c2>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003660:	f043 0220 	orr.w	r2, r3, #32
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	659a      	str	r2, [r3, #88]	@ 0x58

    tmp_hal_status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 2054 	strb.w	r2, [r3, #84]	@ 0x54

  /* Return function status */
  return tmp_hal_status;
 8003676:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800367a:	4618      	mov	r0, r3
 800367c:	37d8      	adds	r7, #216	@ 0xd8
 800367e:	46bd      	mov	sp, r7
 8003680:	bd80      	pop	{r7, pc}
 8003682:	bf00      	nop
 8003684:	80080000 	.word	0x80080000
 8003688:	50040300 	.word	0x50040300
 800368c:	c7520000 	.word	0xc7520000
 8003690:	50040000 	.word	0x50040000
 8003694:	20000004 	.word	0x20000004
 8003698:	053e2d63 	.word	0x053e2d63
 800369c:	cb840000 	.word	0xcb840000
 80036a0:	80000001 	.word	0x80000001

080036a4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4618      	mov	r0, r3
 80036b6:	f7fe ffdb 	bl	8002670 <LL_ADC_IsEnabled>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d169      	bne.n	8003794 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689a      	ldr	r2, [r3, #8]
 80036c6:	4b36      	ldr	r3, [pc, #216]	@ (80037a0 <ADC_Enable+0xfc>)
 80036c8:	4013      	ands	r3, r2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d00d      	beq.n	80036ea <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80036d2:	f043 0210 	orr.w	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80036de:	f043 0201 	orr.w	r2, r3, #1
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	65da      	str	r2, [r3, #92]	@ 0x5c

      return HAL_ERROR;
 80036e6:	2301      	movs	r3, #1
 80036e8:	e055      	b.n	8003796 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe ffaa 	bl	8002648 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 80036f4:	482b      	ldr	r0, [pc, #172]	@ (80037a4 <ADC_Enable+0x100>)
 80036f6:	f7fe fe41 	bl	800237c <LL_ADC_GetCommonPathInternalCh>
 80036fa:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 80036fc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8003700:	2b00      	cmp	r3, #0
 8003702:	d013      	beq.n	800372c <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003704:	4b28      	ldr	r3, [pc, #160]	@ (80037a8 <ADC_Enable+0x104>)
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	099b      	lsrs	r3, r3, #6
 800370a:	4a28      	ldr	r2, [pc, #160]	@ (80037ac <ADC_Enable+0x108>)
 800370c:	fba2 2303 	umull	r2, r3, r2, r3
 8003710:	099b      	lsrs	r3, r3, #6
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	4613      	mov	r3, r2
 8003716:	005b      	lsls	r3, r3, #1
 8003718:	4413      	add	r3, r2
 800371a:	009b      	lsls	r3, r3, #2
 800371c:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800371e:	e002      	b.n	8003726 <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8003720:	68bb      	ldr	r3, [r7, #8]
 8003722:	3b01      	subs	r3, #1
 8003724:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8003726:	68bb      	ldr	r3, [r7, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d1f9      	bne.n	8003720 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 800372c:	f7fe fdf4 	bl	8002318 <HAL_GetTick>
 8003730:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003732:	e028      	b.n	8003786 <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	4618      	mov	r0, r3
 800373a:	f7fe ff99 	bl	8002670 <LL_ADC_IsEnabled>
 800373e:	4603      	mov	r3, r0
 8003740:	2b00      	cmp	r3, #0
 8003742:	d104      	bne.n	800374e <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	4618      	mov	r0, r3
 800374a:	f7fe ff7d 	bl	8002648 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800374e:	f7fe fde3 	bl	8002318 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d914      	bls.n	8003786 <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b01      	cmp	r3, #1
 8003768:	d00d      	beq.n	8003786 <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800376e:	f043 0210 	orr.w	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	659a      	str	r2, [r3, #88]	@ 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800377a:	f043 0201 	orr.w	r2, r3, #1
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	65da      	str	r2, [r3, #92]	@ 0x5c

          return HAL_ERROR;
 8003782:	2301      	movs	r3, #1
 8003784:	e007      	b.n	8003796 <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b01      	cmp	r3, #1
 8003792:	d1cf      	bne.n	8003734 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
 800379e:	bf00      	nop
 80037a0:	8000003f 	.word	0x8000003f
 80037a4:	50040300 	.word	0x50040300
 80037a8:	20000004 	.word	0x20000004
 80037ac:	053e2d63 	.word	0x053e2d63

080037b0 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80037b0:	b480      	push	{r7}
 80037b2:	b083      	sub	sp, #12
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80037b8:	bf00      	nop
 80037ba:	370c      	adds	r7, #12
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr

080037c4 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80037c4:	b480      	push	{r7}
 80037c6:	b083      	sub	sp, #12
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80037cc:	bf00      	nop
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80037e0:	bf00      	nop
 80037e2:	370c      	adds	r7, #12
 80037e4:	46bd      	mov	sp, r7
 80037e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ea:	4770      	bx	lr

080037ec <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80037ec:	b480      	push	{r7}
 80037ee:	b083      	sub	sp, #12
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80037f4:	bf00      	nop
 80037f6:	370c      	adds	r7, #12
 80037f8:	46bd      	mov	sp, r7
 80037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fe:	4770      	bx	lr

08003800 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003808:	bf00      	nop
 800380a:	370c      	adds	r7, #12
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003814:	b480      	push	{r7}
 8003816:	b085      	sub	sp, #20
 8003818:	af00      	add	r7, sp, #0
 800381a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	f003 0307 	and.w	r3, r3, #7
 8003822:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003824:	4b0c      	ldr	r3, [pc, #48]	@ (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800382a:	68ba      	ldr	r2, [r7, #8]
 800382c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003830:	4013      	ands	r3, r2
 8003832:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800383c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003844:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003846:	4a04      	ldr	r2, [pc, #16]	@ (8003858 <__NVIC_SetPriorityGrouping+0x44>)
 8003848:	68bb      	ldr	r3, [r7, #8]
 800384a:	60d3      	str	r3, [r2, #12]
}
 800384c:	bf00      	nop
 800384e:	3714      	adds	r7, #20
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr
 8003858:	e000ed00 	.word	0xe000ed00

0800385c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800385c:	b480      	push	{r7}
 800385e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003860:	4b04      	ldr	r3, [pc, #16]	@ (8003874 <__NVIC_GetPriorityGrouping+0x18>)
 8003862:	68db      	ldr	r3, [r3, #12]
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	f003 0307 	and.w	r3, r3, #7
}
 800386a:	4618      	mov	r0, r3
 800386c:	46bd      	mov	sp, r7
 800386e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003872:	4770      	bx	lr
 8003874:	e000ed00 	.word	0xe000ed00

08003878 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003878:	b480      	push	{r7}
 800387a:	b083      	sub	sp, #12
 800387c:	af00      	add	r7, sp, #0
 800387e:	4603      	mov	r3, r0
 8003880:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003886:	2b00      	cmp	r3, #0
 8003888:	db0b      	blt.n	80038a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800388a:	79fb      	ldrb	r3, [r7, #7]
 800388c:	f003 021f 	and.w	r2, r3, #31
 8003890:	4907      	ldr	r1, [pc, #28]	@ (80038b0 <__NVIC_EnableIRQ+0x38>)
 8003892:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003896:	095b      	lsrs	r3, r3, #5
 8003898:	2001      	movs	r0, #1
 800389a:	fa00 f202 	lsl.w	r2, r0, r2
 800389e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80038a2:	bf00      	nop
 80038a4:	370c      	adds	r7, #12
 80038a6:	46bd      	mov	sp, r7
 80038a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ac:	4770      	bx	lr
 80038ae:	bf00      	nop
 80038b0:	e000e100 	.word	0xe000e100

080038b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	4603      	mov	r3, r0
 80038bc:	6039      	str	r1, [r7, #0]
 80038be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	db0a      	blt.n	80038de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	b2da      	uxtb	r2, r3
 80038cc:	490c      	ldr	r1, [pc, #48]	@ (8003900 <__NVIC_SetPriority+0x4c>)
 80038ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d2:	0112      	lsls	r2, r2, #4
 80038d4:	b2d2      	uxtb	r2, r2
 80038d6:	440b      	add	r3, r1
 80038d8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80038dc:	e00a      	b.n	80038f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	4908      	ldr	r1, [pc, #32]	@ (8003904 <__NVIC_SetPriority+0x50>)
 80038e4:	79fb      	ldrb	r3, [r7, #7]
 80038e6:	f003 030f 	and.w	r3, r3, #15
 80038ea:	3b04      	subs	r3, #4
 80038ec:	0112      	lsls	r2, r2, #4
 80038ee:	b2d2      	uxtb	r2, r2
 80038f0:	440b      	add	r3, r1
 80038f2:	761a      	strb	r2, [r3, #24]
}
 80038f4:	bf00      	nop
 80038f6:	370c      	adds	r7, #12
 80038f8:	46bd      	mov	sp, r7
 80038fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fe:	4770      	bx	lr
 8003900:	e000e100 	.word	0xe000e100
 8003904:	e000ed00 	.word	0xe000ed00

08003908 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003908:	b480      	push	{r7}
 800390a:	b089      	sub	sp, #36	@ 0x24
 800390c:	af00      	add	r7, sp, #0
 800390e:	60f8      	str	r0, [r7, #12]
 8003910:	60b9      	str	r1, [r7, #8]
 8003912:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800391c:	69fb      	ldr	r3, [r7, #28]
 800391e:	f1c3 0307 	rsb	r3, r3, #7
 8003922:	2b04      	cmp	r3, #4
 8003924:	bf28      	it	cs
 8003926:	2304      	movcs	r3, #4
 8003928:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800392a:	69fb      	ldr	r3, [r7, #28]
 800392c:	3304      	adds	r3, #4
 800392e:	2b06      	cmp	r3, #6
 8003930:	d902      	bls.n	8003938 <NVIC_EncodePriority+0x30>
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	3b03      	subs	r3, #3
 8003936:	e000      	b.n	800393a <NVIC_EncodePriority+0x32>
 8003938:	2300      	movs	r3, #0
 800393a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800393c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003940:	69bb      	ldr	r3, [r7, #24]
 8003942:	fa02 f303 	lsl.w	r3, r2, r3
 8003946:	43da      	mvns	r2, r3
 8003948:	68bb      	ldr	r3, [r7, #8]
 800394a:	401a      	ands	r2, r3
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003950:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	fa01 f303 	lsl.w	r3, r1, r3
 800395a:	43d9      	mvns	r1, r3
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003960:	4313      	orrs	r3, r2
         );
}
 8003962:	4618      	mov	r0, r3
 8003964:	3724      	adds	r7, #36	@ 0x24
 8003966:	46bd      	mov	sp, r7
 8003968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800396c:	4770      	bx	lr
	...

08003970 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	3b01      	subs	r3, #1
 800397c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003980:	d301      	bcc.n	8003986 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003982:	2301      	movs	r3, #1
 8003984:	e00f      	b.n	80039a6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003986:	4a0a      	ldr	r2, [pc, #40]	@ (80039b0 <SysTick_Config+0x40>)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	3b01      	subs	r3, #1
 800398c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800398e:	210f      	movs	r1, #15
 8003990:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003994:	f7ff ff8e 	bl	80038b4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003998:	4b05      	ldr	r3, [pc, #20]	@ (80039b0 <SysTick_Config+0x40>)
 800399a:	2200      	movs	r2, #0
 800399c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800399e:	4b04      	ldr	r3, [pc, #16]	@ (80039b0 <SysTick_Config+0x40>)
 80039a0:	2207      	movs	r2, #7
 80039a2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	3708      	adds	r7, #8
 80039aa:	46bd      	mov	sp, r7
 80039ac:	bd80      	pop	{r7, pc}
 80039ae:	bf00      	nop
 80039b0:	e000e010 	.word	0xe000e010

080039b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b082      	sub	sp, #8
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f7ff ff29 	bl	8003814 <__NVIC_SetPriorityGrouping>
}
 80039c2:	bf00      	nop
 80039c4:	3708      	adds	r7, #8
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}

080039ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b086      	sub	sp, #24
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	4603      	mov	r3, r0
 80039d2:	60b9      	str	r1, [r7, #8]
 80039d4:	607a      	str	r2, [r7, #4]
 80039d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80039dc:	f7ff ff3e 	bl	800385c <__NVIC_GetPriorityGrouping>
 80039e0:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80039e2:	687a      	ldr	r2, [r7, #4]
 80039e4:	68b9      	ldr	r1, [r7, #8]
 80039e6:	6978      	ldr	r0, [r7, #20]
 80039e8:	f7ff ff8e 	bl	8003908 <NVIC_EncodePriority>
 80039ec:	4602      	mov	r2, r0
 80039ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80039f2:	4611      	mov	r1, r2
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff ff5d 	bl	80038b4 <__NVIC_SetPriority>
}
 80039fa:	bf00      	nop
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a02:	b580      	push	{r7, lr}
 8003a04:	b082      	sub	sp, #8
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	4603      	mov	r3, r0
 8003a0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003a0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7ff ff31 	bl	8003878 <__NVIC_EnableIRQ>
}
 8003a16:	bf00      	nop
 8003a18:	3708      	adds	r7, #8
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003a1e:	b580      	push	{r7, lr}
 8003a20:	b082      	sub	sp, #8
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f7ff ffa2 	bl	8003970 <SysTick_Config>
 8003a2c:	4603      	mov	r3, r0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3708      	adds	r7, #8
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003a36:	b480      	push	{r7}
 8003a38:	b085      	sub	sp, #20
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a3e:	2300      	movs	r3, #0
 8003a40:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b02      	cmp	r3, #2
 8003a4c:	d008      	beq.n	8003a60 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	2204      	movs	r2, #4
 8003a52:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2200      	movs	r2, #0
 8003a58:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	e040      	b.n	8003ae2 <HAL_DMA_Abort+0xac>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f022 020e 	bic.w	r2, r2, #14
 8003a6e:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003a7a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003a7e:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681a      	ldr	r2, [r3, #0]
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f022 0201 	bic.w	r2, r2, #1
 8003a8e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a94:	f003 021c 	and.w	r2, r3, #28
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a9c:	2101      	movs	r1, #1
 8003a9e:	fa01 f202 	lsl.w	r2, r1, r2
 8003aa2:	605a      	str	r2, [r3, #4]

#if defined(DMAMUX1)
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003aa8:	687a      	ldr	r2, [r7, #4]
 8003aaa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003aac:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d00c      	beq.n	8003ad0 <HAL_DMA_Abort+0x9a>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ac0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003ac4:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003ace:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	2201      	movs	r2, #1
 8003ad4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 8003ae0:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3714      	adds	r7, #20
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aec:	4770      	bx	lr

08003aee <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003aee:	b580      	push	{r7, lr}
 8003af0:	b084      	sub	sp, #16
 8003af2:	af00      	add	r7, sp, #0
 8003af4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003af6:	2300      	movs	r3, #0
 8003af8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003b00:	b2db      	uxtb	r3, r3
 8003b02:	2b02      	cmp	r3, #2
 8003b04:	d005      	beq.n	8003b12 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2204      	movs	r2, #4
 8003b0a:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	73fb      	strb	r3, [r7, #15]
 8003b10:	e047      	b.n	8003ba2 <HAL_DMA_Abort_IT+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681a      	ldr	r2, [r3, #0]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 020e 	bic.w	r2, r2, #14
 8003b20:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	681a      	ldr	r2, [r3, #0]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f022 0201 	bic.w	r2, r2, #1
 8003b30:	601a      	str	r2, [r3, #0]

#if defined(DMAMUX1)
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b36:	681a      	ldr	r2, [r3, #0]
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b3c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b40:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b46:	f003 021c 	and.w	r2, r3, #28
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b4e:	2101      	movs	r1, #1
 8003b50:	fa01 f202 	lsl.w	r2, r1, r2
 8003b54:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	687a      	ldr	r2, [r7, #4]
 8003b5c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003b5e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d00c      	beq.n	8003b82 <HAL_DMA_Abort_IT+0x94>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b6c:	681a      	ldr	r2, [r3, #0]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003b76:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003b7c:	687a      	ldr	r2, [r7, #4]
 8003b7e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8003b80:	605a      	str	r2, [r3, #4]
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2200      	movs	r2, #0
 8003b8e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d003      	beq.n	8003ba2 <HAL_DMA_Abort_IT+0xb4>
    {
      hdma->XferAbortCallback(hdma);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	4798      	blx	r3
    }
  }
  return status;
 8003ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ba4:	4618      	mov	r0, r3
 8003ba6:	3710      	adds	r7, #16
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	bd80      	pop	{r7, pc}

08003bac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b087      	sub	sp, #28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
 8003bb4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003bba:	e166      	b.n	8003e8a <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	2101      	movs	r1, #1
 8003bc2:	697b      	ldr	r3, [r7, #20]
 8003bc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc8:	4013      	ands	r3, r2
 8003bca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	f000 8158 	beq.w	8003e84 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003bd4:	683b      	ldr	r3, [r7, #0]
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	f003 0303 	and.w	r3, r3, #3
 8003bdc:	2b01      	cmp	r3, #1
 8003bde:	d005      	beq.n	8003bec <HAL_GPIO_Init+0x40>
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	685b      	ldr	r3, [r3, #4]
 8003be4:	f003 0303 	and.w	r3, r3, #3
 8003be8:	2b02      	cmp	r3, #2
 8003bea:	d130      	bne.n	8003c4e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	689b      	ldr	r3, [r3, #8]
 8003bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	2203      	movs	r2, #3
 8003bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8003bfc:	43db      	mvns	r3, r3
 8003bfe:	693a      	ldr	r2, [r7, #16]
 8003c00:	4013      	ands	r3, r2
 8003c02:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8003c04:	683b      	ldr	r3, [r7, #0]
 8003c06:	68da      	ldr	r2, [r3, #12]
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	005b      	lsls	r3, r3, #1
 8003c0c:	fa02 f303 	lsl.w	r3, r2, r3
 8003c10:	693a      	ldr	r2, [r7, #16]
 8003c12:	4313      	orrs	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8003c22:	2201      	movs	r2, #1
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	fa02 f303 	lsl.w	r3, r2, r3
 8003c2a:	43db      	mvns	r3, r3
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	4013      	ands	r3, r2
 8003c30:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	091b      	lsrs	r3, r3, #4
 8003c38:	f003 0201 	and.w	r2, r3, #1
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	693a      	ldr	r2, [r7, #16]
 8003c44:	4313      	orrs	r3, r2
 8003c46:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	693a      	ldr	r2, [r7, #16]
 8003c4c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f003 0303 	and.w	r3, r3, #3
 8003c56:	2b03      	cmp	r3, #3
 8003c58:	d017      	beq.n	8003c8a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	68db      	ldr	r3, [r3, #12]
 8003c5e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	005b      	lsls	r3, r3, #1
 8003c64:	2203      	movs	r2, #3
 8003c66:	fa02 f303 	lsl.w	r3, r2, r3
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	689a      	ldr	r2, [r3, #8]
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7e:	693a      	ldr	r2, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	693a      	ldr	r2, [r7, #16]
 8003c88:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c8a:	683b      	ldr	r3, [r7, #0]
 8003c8c:	685b      	ldr	r3, [r3, #4]
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d123      	bne.n	8003cde <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	08da      	lsrs	r2, r3, #3
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	3208      	adds	r2, #8
 8003c9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ca2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8003ca4:	697b      	ldr	r3, [r7, #20]
 8003ca6:	f003 0307 	and.w	r3, r3, #7
 8003caa:	009b      	lsls	r3, r3, #2
 8003cac:	220f      	movs	r2, #15
 8003cae:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb2:	43db      	mvns	r3, r3
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4013      	ands	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8003cba:	683b      	ldr	r3, [r7, #0]
 8003cbc:	691a      	ldr	r2, [r3, #16]
 8003cbe:	697b      	ldr	r3, [r7, #20]
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	009b      	lsls	r3, r3, #2
 8003cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8003cca:	693a      	ldr	r2, [r7, #16]
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8003cd0:	697b      	ldr	r3, [r7, #20]
 8003cd2:	08da      	lsrs	r2, r3, #3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	3208      	adds	r2, #8
 8003cd8:	6939      	ldr	r1, [r7, #16]
 8003cda:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	2203      	movs	r2, #3
 8003cea:	fa02 f303 	lsl.w	r3, r2, r3
 8003cee:	43db      	mvns	r3, r3
 8003cf0:	693a      	ldr	r2, [r7, #16]
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	685b      	ldr	r3, [r3, #4]
 8003cfa:	f003 0203 	and.w	r2, r3, #3
 8003cfe:	697b      	ldr	r3, [r7, #20]
 8003d00:	005b      	lsls	r3, r3, #1
 8003d02:	fa02 f303 	lsl.w	r3, r2, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	693a      	ldr	r2, [r7, #16]
 8003d10:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003d12:	683b      	ldr	r3, [r7, #0]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	f000 80b2 	beq.w	8003e84 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d20:	4b61      	ldr	r3, [pc, #388]	@ (8003ea8 <HAL_GPIO_Init+0x2fc>)
 8003d22:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d24:	4a60      	ldr	r2, [pc, #384]	@ (8003ea8 <HAL_GPIO_Init+0x2fc>)
 8003d26:	f043 0301 	orr.w	r3, r3, #1
 8003d2a:	6613      	str	r3, [r2, #96]	@ 0x60
 8003d2c:	4b5e      	ldr	r3, [pc, #376]	@ (8003ea8 <HAL_GPIO_Init+0x2fc>)
 8003d2e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003d30:	f003 0301 	and.w	r3, r3, #1
 8003d34:	60bb      	str	r3, [r7, #8]
 8003d36:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8003d38:	4a5c      	ldr	r2, [pc, #368]	@ (8003eac <HAL_GPIO_Init+0x300>)
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	089b      	lsrs	r3, r3, #2
 8003d3e:	3302      	adds	r3, #2
 8003d40:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d44:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	f003 0303 	and.w	r3, r3, #3
 8003d4c:	009b      	lsls	r3, r3, #2
 8003d4e:	220f      	movs	r2, #15
 8003d50:	fa02 f303 	lsl.w	r3, r2, r3
 8003d54:	43db      	mvns	r3, r3
 8003d56:	693a      	ldr	r2, [r7, #16]
 8003d58:	4013      	ands	r3, r2
 8003d5a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003d62:	d02b      	beq.n	8003dbc <HAL_GPIO_Init+0x210>
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	4a52      	ldr	r2, [pc, #328]	@ (8003eb0 <HAL_GPIO_Init+0x304>)
 8003d68:	4293      	cmp	r3, r2
 8003d6a:	d025      	beq.n	8003db8 <HAL_GPIO_Init+0x20c>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	4a51      	ldr	r2, [pc, #324]	@ (8003eb4 <HAL_GPIO_Init+0x308>)
 8003d70:	4293      	cmp	r3, r2
 8003d72:	d01f      	beq.n	8003db4 <HAL_GPIO_Init+0x208>
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	4a50      	ldr	r2, [pc, #320]	@ (8003eb8 <HAL_GPIO_Init+0x30c>)
 8003d78:	4293      	cmp	r3, r2
 8003d7a:	d019      	beq.n	8003db0 <HAL_GPIO_Init+0x204>
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	4a4f      	ldr	r2, [pc, #316]	@ (8003ebc <HAL_GPIO_Init+0x310>)
 8003d80:	4293      	cmp	r3, r2
 8003d82:	d013      	beq.n	8003dac <HAL_GPIO_Init+0x200>
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	4a4e      	ldr	r2, [pc, #312]	@ (8003ec0 <HAL_GPIO_Init+0x314>)
 8003d88:	4293      	cmp	r3, r2
 8003d8a:	d00d      	beq.n	8003da8 <HAL_GPIO_Init+0x1fc>
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	4a4d      	ldr	r2, [pc, #308]	@ (8003ec4 <HAL_GPIO_Init+0x318>)
 8003d90:	4293      	cmp	r3, r2
 8003d92:	d007      	beq.n	8003da4 <HAL_GPIO_Init+0x1f8>
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	4a4c      	ldr	r2, [pc, #304]	@ (8003ec8 <HAL_GPIO_Init+0x31c>)
 8003d98:	4293      	cmp	r3, r2
 8003d9a:	d101      	bne.n	8003da0 <HAL_GPIO_Init+0x1f4>
 8003d9c:	2307      	movs	r3, #7
 8003d9e:	e00e      	b.n	8003dbe <HAL_GPIO_Init+0x212>
 8003da0:	2308      	movs	r3, #8
 8003da2:	e00c      	b.n	8003dbe <HAL_GPIO_Init+0x212>
 8003da4:	2306      	movs	r3, #6
 8003da6:	e00a      	b.n	8003dbe <HAL_GPIO_Init+0x212>
 8003da8:	2305      	movs	r3, #5
 8003daa:	e008      	b.n	8003dbe <HAL_GPIO_Init+0x212>
 8003dac:	2304      	movs	r3, #4
 8003dae:	e006      	b.n	8003dbe <HAL_GPIO_Init+0x212>
 8003db0:	2303      	movs	r3, #3
 8003db2:	e004      	b.n	8003dbe <HAL_GPIO_Init+0x212>
 8003db4:	2302      	movs	r3, #2
 8003db6:	e002      	b.n	8003dbe <HAL_GPIO_Init+0x212>
 8003db8:	2301      	movs	r3, #1
 8003dba:	e000      	b.n	8003dbe <HAL_GPIO_Init+0x212>
 8003dbc:	2300      	movs	r3, #0
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	f002 0203 	and.w	r2, r2, #3
 8003dc4:	0092      	lsls	r2, r2, #2
 8003dc6:	4093      	lsls	r3, r2
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8003dce:	4937      	ldr	r1, [pc, #220]	@ (8003eac <HAL_GPIO_Init+0x300>)
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	089b      	lsrs	r3, r3, #2
 8003dd4:	3302      	adds	r3, #2
 8003dd6:	693a      	ldr	r2, [r7, #16]
 8003dd8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003ddc:	4b3b      	ldr	r3, [pc, #236]	@ (8003ecc <HAL_GPIO_Init+0x320>)
 8003dde:	689b      	ldr	r3, [r3, #8]
 8003de0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	43db      	mvns	r3, r3
 8003de6:	693a      	ldr	r2, [r7, #16]
 8003de8:	4013      	ands	r3, r2
 8003dea:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d003      	beq.n	8003e00 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8003df8:	693a      	ldr	r2, [r7, #16]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	4313      	orrs	r3, r2
 8003dfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003e00:	4a32      	ldr	r2, [pc, #200]	@ (8003ecc <HAL_GPIO_Init+0x320>)
 8003e02:	693b      	ldr	r3, [r7, #16]
 8003e04:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003e06:	4b31      	ldr	r3, [pc, #196]	@ (8003ecc <HAL_GPIO_Init+0x320>)
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	43db      	mvns	r3, r3
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4013      	ands	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003e16:	683b      	ldr	r3, [r7, #0]
 8003e18:	685b      	ldr	r3, [r3, #4]
 8003e1a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d003      	beq.n	8003e2a <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	4313      	orrs	r3, r2
 8003e28:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003e2a:	4a28      	ldr	r2, [pc, #160]	@ (8003ecc <HAL_GPIO_Init+0x320>)
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8003e30:	4b26      	ldr	r3, [pc, #152]	@ (8003ecc <HAL_GPIO_Init+0x320>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	693a      	ldr	r2, [r7, #16]
 8003e3c:	4013      	ands	r3, r2
 8003e3e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d003      	beq.n	8003e54 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8003e4c:	693a      	ldr	r2, [r7, #16]
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	4313      	orrs	r3, r2
 8003e52:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003e54:	4a1d      	ldr	r2, [pc, #116]	@ (8003ecc <HAL_GPIO_Init+0x320>)
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8003e5a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ecc <HAL_GPIO_Init+0x320>)
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	43db      	mvns	r3, r3
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	4013      	ands	r3, r2
 8003e68:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	685b      	ldr	r3, [r3, #4]
 8003e6e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d003      	beq.n	8003e7e <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8003e76:	693a      	ldr	r2, [r7, #16]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	4313      	orrs	r3, r2
 8003e7c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003e7e:	4a13      	ldr	r2, [pc, #76]	@ (8003ecc <HAL_GPIO_Init+0x320>)
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003e84:	697b      	ldr	r3, [r7, #20]
 8003e86:	3301      	adds	r3, #1
 8003e88:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	681a      	ldr	r2, [r3, #0]
 8003e8e:	697b      	ldr	r3, [r7, #20]
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f47f ae91 	bne.w	8003bbc <HAL_GPIO_Init+0x10>
  }
}
 8003e9a:	bf00      	nop
 8003e9c:	bf00      	nop
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	40021000 	.word	0x40021000
 8003eac:	40010000 	.word	0x40010000
 8003eb0:	48000400 	.word	0x48000400
 8003eb4:	48000800 	.word	0x48000800
 8003eb8:	48000c00 	.word	0x48000c00
 8003ebc:	48001000 	.word	0x48001000
 8003ec0:	48001400 	.word	0x48001400
 8003ec4:	48001800 	.word	0x48001800
 8003ec8:	48001c00 	.word	0x48001c00
 8003ecc:	40010400 	.word	0x40010400

08003ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	d101      	bne.n	8003ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003ede:	2301      	movs	r3, #1
 8003ee0:	e08d      	b.n	8003ffe <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ee8:	b2db      	uxtb	r3, r3
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d106      	bne.n	8003efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2200      	movs	r2, #0
 8003ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd ff10 	bl	8001d1c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2224      	movs	r2, #36	@ 0x24
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681a      	ldr	r2, [r3, #0]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f022 0201 	bic.w	r2, r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	685a      	ldr	r2, [r3, #4]
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003f20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	689a      	ldr	r2, [r3, #8]
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003f30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	68db      	ldr	r3, [r3, #12]
 8003f36:	2b01      	cmp	r3, #1
 8003f38:	d107      	bne.n	8003f4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	689a      	ldr	r2, [r3, #8]
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003f46:	609a      	str	r2, [r3, #8]
 8003f48:	e006      	b.n	8003f58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	689a      	ldr	r2, [r3, #8]
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8003f56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d108      	bne.n	8003f72 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685a      	ldr	r2, [r3, #4]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f6e:	605a      	str	r2, [r3, #4]
 8003f70:	e007      	b.n	8003f82 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	685a      	ldr	r2, [r3, #4]
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003f80:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	687a      	ldr	r2, [r7, #4]
 8003f8a:	6812      	ldr	r2, [r2, #0]
 8003f8c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003f90:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003f94:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8003fa4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	691a      	ldr	r2, [r3, #16]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	695b      	ldr	r3, [r3, #20]
 8003fae:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	430a      	orrs	r2, r1
 8003fbe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	69d9      	ldr	r1, [r3, #28]
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	6a1a      	ldr	r2, [r3, #32]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	430a      	orrs	r2, r1
 8003fce:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	681a      	ldr	r2, [r3, #0]
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	f042 0201 	orr.w	r2, r2, #1
 8003fde:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2220      	movs	r2, #32
 8003fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8003ffc:	2300      	movs	r3, #0
}
 8003ffe:	4618      	mov	r0, r3
 8004000:	3708      	adds	r7, #8
 8004002:	46bd      	mov	sp, r7
 8004004:	bd80      	pop	{r7, pc}
	...

08004008 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b088      	sub	sp, #32
 800400c:	af02      	add	r7, sp, #8
 800400e:	60f8      	str	r0, [r7, #12]
 8004010:	607a      	str	r2, [r7, #4]
 8004012:	461a      	mov	r2, r3
 8004014:	460b      	mov	r3, r1
 8004016:	817b      	strh	r3, [r7, #10]
 8004018:	4613      	mov	r3, r2
 800401a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004022:	b2db      	uxtb	r3, r3
 8004024:	2b20      	cmp	r3, #32
 8004026:	f040 80fd 	bne.w	8004224 <HAL_I2C_Master_Transmit+0x21c>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004030:	2b01      	cmp	r3, #1
 8004032:	d101      	bne.n	8004038 <HAL_I2C_Master_Transmit+0x30>
 8004034:	2302      	movs	r3, #2
 8004036:	e0f6      	b.n	8004226 <HAL_I2C_Master_Transmit+0x21e>
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2201      	movs	r2, #1
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004040:	f7fe f96a 	bl	8002318 <HAL_GetTick>
 8004044:	6138      	str	r0, [r7, #16]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	9300      	str	r3, [sp, #0]
 800404a:	2319      	movs	r3, #25
 800404c:	2201      	movs	r2, #1
 800404e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004052:	68f8      	ldr	r0, [r7, #12]
 8004054:	f000 fa0a 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8004058:	4603      	mov	r3, r0
 800405a:	2b00      	cmp	r3, #0
 800405c:	d001      	beq.n	8004062 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800405e:	2301      	movs	r3, #1
 8004060:	e0e1      	b.n	8004226 <HAL_I2C_Master_Transmit+0x21e>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2221      	movs	r2, #33	@ 0x21
 8004066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2210      	movs	r2, #16
 800406e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	687a      	ldr	r2, [r7, #4]
 800407c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	893a      	ldrh	r2, [r7, #8]
 8004082:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	2200      	movs	r2, #0
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800408e:	b29b      	uxth	r3, r3
 8004090:	2bff      	cmp	r3, #255	@ 0xff
 8004092:	d906      	bls.n	80040a2 <HAL_I2C_Master_Transmit+0x9a>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	22ff      	movs	r2, #255	@ 0xff
 8004098:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800409a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800409e:	617b      	str	r3, [r7, #20]
 80040a0:	e007      	b.n	80040b2 <HAL_I2C_Master_Transmit+0xaa>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040a6:	b29a      	uxth	r2, r3
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 80040ac:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80040b0:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d024      	beq.n	8004104 <HAL_I2C_Master_Transmit+0xfc>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040be:	781a      	ldrb	r2, [r3, #0]
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040ca:	1c5a      	adds	r2, r3, #1
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	3b01      	subs	r3, #1
 80040d8:	b29a      	uxth	r2, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040e2:	3b01      	subs	r3, #1
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)(hi2c->XferSize + 1U), xfermode,
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	3301      	adds	r3, #1
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	8979      	ldrh	r1, [r7, #10]
 80040f6:	4b4e      	ldr	r3, [pc, #312]	@ (8004230 <HAL_I2C_Master_Transmit+0x228>)
 80040f8:	9300      	str	r3, [sp, #0]
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f000 fc05 	bl	800490c <I2C_TransferConfig>
 8004102:	e066      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ca>
    }
    else
    {
      /* Send Slave Address */
      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode,
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004108:	b2da      	uxtb	r2, r3
 800410a:	8979      	ldrh	r1, [r7, #10]
 800410c:	4b48      	ldr	r3, [pc, #288]	@ (8004230 <HAL_I2C_Master_Transmit+0x228>)
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	697b      	ldr	r3, [r7, #20]
 8004112:	68f8      	ldr	r0, [r7, #12]
 8004114:	f000 fbfa 	bl	800490c <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8004118:	e05b      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ca>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800411a:	693a      	ldr	r2, [r7, #16]
 800411c:	6a39      	ldr	r1, [r7, #32]
 800411e:	68f8      	ldr	r0, [r7, #12]
 8004120:	f000 f9fd 	bl	800451e <I2C_WaitOnTXISFlagUntilTimeout>
 8004124:	4603      	mov	r3, r0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d001      	beq.n	800412e <HAL_I2C_Master_Transmit+0x126>
      {
        return HAL_ERROR;
 800412a:	2301      	movs	r3, #1
 800412c:	e07b      	b.n	8004226 <HAL_I2C_Master_Transmit+0x21e>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004132:	781a      	ldrb	r2, [r3, #0]
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800413e:	1c5a      	adds	r2, r3, #1
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004148:	b29b      	uxth	r3, r3
 800414a:	3b01      	subs	r3, #1
 800414c:	b29a      	uxth	r2, r3
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004156:	3b01      	subs	r3, #1
 8004158:	b29a      	uxth	r2, r3
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004162:	b29b      	uxth	r3, r3
 8004164:	2b00      	cmp	r3, #0
 8004166:	d034      	beq.n	80041d2 <HAL_I2C_Master_Transmit+0x1ca>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800416c:	2b00      	cmp	r3, #0
 800416e:	d130      	bne.n	80041d2 <HAL_I2C_Master_Transmit+0x1ca>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8004170:	693b      	ldr	r3, [r7, #16]
 8004172:	9300      	str	r3, [sp, #0]
 8004174:	6a3b      	ldr	r3, [r7, #32]
 8004176:	2200      	movs	r2, #0
 8004178:	2180      	movs	r1, #128	@ 0x80
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 f976 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <HAL_I2C_Master_Transmit+0x182>
        {
          return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e04d      	b.n	8004226 <HAL_I2C_Master_Transmit+0x21e>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800418e:	b29b      	uxth	r3, r3
 8004190:	2bff      	cmp	r3, #255	@ 0xff
 8004192:	d90e      	bls.n	80041b2 <HAL_I2C_Master_Transmit+0x1aa>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	22ff      	movs	r2, #255	@ 0xff
 8004198:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800419e:	b2da      	uxtb	r2, r3
 80041a0:	8979      	ldrh	r1, [r7, #10]
 80041a2:	2300      	movs	r3, #0
 80041a4:	9300      	str	r3, [sp, #0]
 80041a6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 fbae 	bl	800490c <I2C_TransferConfig>
 80041b0:	e00f      	b.n	80041d2 <HAL_I2C_Master_Transmit+0x1ca>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041b6:	b29a      	uxth	r2, r3
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80041c0:	b2da      	uxtb	r2, r3
 80041c2:	8979      	ldrh	r1, [r7, #10]
 80041c4:	2300      	movs	r3, #0
 80041c6:	9300      	str	r3, [sp, #0]
 80041c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 fb9d 	bl	800490c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041d6:	b29b      	uxth	r3, r3
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d19e      	bne.n	800411a <HAL_I2C_Master_Transmit+0x112>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041dc:	693a      	ldr	r2, [r7, #16]
 80041de:	6a39      	ldr	r1, [r7, #32]
 80041e0:	68f8      	ldr	r0, [r7, #12]
 80041e2:	f000 f9e3 	bl	80045ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80041e6:	4603      	mov	r3, r0
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d001      	beq.n	80041f0 <HAL_I2C_Master_Transmit+0x1e8>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e01a      	b.n	8004226 <HAL_I2C_Master_Transmit+0x21e>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	2220      	movs	r2, #32
 80041f6:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6859      	ldr	r1, [r3, #4]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	4b0c      	ldr	r3, [pc, #48]	@ (8004234 <HAL_I2C_Master_Transmit+0x22c>)
 8004204:	400b      	ands	r3, r1
 8004206:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	2220      	movs	r2, #32
 800420c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	2200      	movs	r2, #0
 800421c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004220:	2300      	movs	r3, #0
 8004222:	e000      	b.n	8004226 <HAL_I2C_Master_Transmit+0x21e>
  }
  else
  {
    return HAL_BUSY;
 8004224:	2302      	movs	r3, #2
  }
}
 8004226:	4618      	mov	r0, r3
 8004228:	3718      	adds	r7, #24
 800422a:	46bd      	mov	sp, r7
 800422c:	bd80      	pop	{r7, pc}
 800422e:	bf00      	nop
 8004230:	80002000 	.word	0x80002000
 8004234:	fe00e800 	.word	0xfe00e800

08004238 <HAL_I2C_Master_Receive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                         uint16_t Size, uint32_t Timeout)
{
 8004238:	b580      	push	{r7, lr}
 800423a:	b088      	sub	sp, #32
 800423c:	af02      	add	r7, sp, #8
 800423e:	60f8      	str	r0, [r7, #12]
 8004240:	607a      	str	r2, [r7, #4]
 8004242:	461a      	mov	r2, r3
 8004244:	460b      	mov	r3, r1
 8004246:	817b      	strh	r3, [r7, #10]
 8004248:	4613      	mov	r3, r2
 800424a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004252:	b2db      	uxtb	r3, r3
 8004254:	2b20      	cmp	r3, #32
 8004256:	f040 80db 	bne.w	8004410 <HAL_I2C_Master_Receive+0x1d8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_I2C_Master_Receive+0x30>
 8004264:	2302      	movs	r3, #2
 8004266:	e0d4      	b.n	8004412 <HAL_I2C_Master_Receive+0x1da>
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8004270:	f7fe f852 	bl	8002318 <HAL_GetTick>
 8004274:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8004276:	697b      	ldr	r3, [r7, #20]
 8004278:	9300      	str	r3, [sp, #0]
 800427a:	2319      	movs	r3, #25
 800427c:	2201      	movs	r2, #1
 800427e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8004282:	68f8      	ldr	r0, [r7, #12]
 8004284:	f000 f8f2 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 8004288:	4603      	mov	r3, r0
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_I2C_Master_Receive+0x5a>
    {
      return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e0bf      	b.n	8004412 <HAL_I2C_Master_Receive+0x1da>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	2222      	movs	r2, #34	@ 0x22
 8004296:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2210      	movs	r2, #16
 800429e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	2200      	movs	r2, #0
 80042a6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	687a      	ldr	r2, [r7, #4]
 80042ac:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	893a      	ldrh	r2, [r7, #8]
 80042b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	2200      	movs	r2, #0
 80042b8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042be:	b29b      	uxth	r3, r3
 80042c0:	2bff      	cmp	r3, #255	@ 0xff
 80042c2:	d90e      	bls.n	80042e2 <HAL_I2C_Master_Receive+0xaa>
    {
      hi2c->XferSize = 1U;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2201      	movs	r2, #1
 80042c8:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042ce:	b2da      	uxtb	r2, r3
 80042d0:	8979      	ldrh	r1, [r7, #10]
 80042d2:	4b52      	ldr	r3, [pc, #328]	@ (800441c <HAL_I2C_Master_Receive+0x1e4>)
 80042d4:	9300      	str	r3, [sp, #0]
 80042d6:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80042da:	68f8      	ldr	r0, [r7, #12]
 80042dc:	f000 fb16 	bl	800490c <I2C_TransferConfig>
 80042e0:	e06d      	b.n	80043be <HAL_I2C_Master_Receive+0x186>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80042e6:	b29a      	uxth	r2, r3
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80042f0:	b2da      	uxtb	r2, r3
 80042f2:	8979      	ldrh	r1, [r7, #10]
 80042f4:	4b49      	ldr	r3, [pc, #292]	@ (800441c <HAL_I2C_Master_Receive+0x1e4>)
 80042f6:	9300      	str	r3, [sp, #0]
 80042f8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 fb05 	bl	800490c <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);
    }

    while (hi2c->XferCount > 0U)
 8004302:	e05c      	b.n	80043be <HAL_I2C_Master_Receive+0x186>
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004304:	697a      	ldr	r2, [r7, #20]
 8004306:	6a39      	ldr	r1, [r7, #32]
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f993 	bl	8004634 <I2C_WaitOnRXNEFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <HAL_I2C_Master_Receive+0xe0>
      {
        return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e07c      	b.n	8004412 <HAL_I2C_Master_Receive+0x1da>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004322:	b2d2      	uxtb	r2, r2
 8004324:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800432a:	1c5a      	adds	r2, r3, #1
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004334:	3b01      	subs	r3, #1
 8004336:	b29a      	uxth	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004340:	b29b      	uxth	r3, r3
 8004342:	3b01      	subs	r3, #1
 8004344:	b29a      	uxth	r2, r3
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800434e:	b29b      	uxth	r3, r3
 8004350:	2b00      	cmp	r3, #0
 8004352:	d034      	beq.n	80043be <HAL_I2C_Master_Receive+0x186>
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004358:	2b00      	cmp	r3, #0
 800435a:	d130      	bne.n	80043be <HAL_I2C_Master_Receive+0x186>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800435c:	697b      	ldr	r3, [r7, #20]
 800435e:	9300      	str	r3, [sp, #0]
 8004360:	6a3b      	ldr	r3, [r7, #32]
 8004362:	2200      	movs	r2, #0
 8004364:	2180      	movs	r1, #128	@ 0x80
 8004366:	68f8      	ldr	r0, [r7, #12]
 8004368:	f000 f880 	bl	800446c <I2C_WaitOnFlagUntilTimeout>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d001      	beq.n	8004376 <HAL_I2C_Master_Receive+0x13e>
        {
          return HAL_ERROR;
 8004372:	2301      	movs	r3, #1
 8004374:	e04d      	b.n	8004412 <HAL_I2C_Master_Receive+0x1da>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800437a:	b29b      	uxth	r3, r3
 800437c:	2bff      	cmp	r3, #255	@ 0xff
 800437e:	d90e      	bls.n	800439e <HAL_I2C_Master_Receive+0x166>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	22ff      	movs	r2, #255	@ 0xff
 8004384:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800438a:	b2da      	uxtb	r2, r3
 800438c:	8979      	ldrh	r1, [r7, #10]
 800438e:	2300      	movs	r3, #0
 8004390:	9300      	str	r3, [sp, #0]
 8004392:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8004396:	68f8      	ldr	r0, [r7, #12]
 8004398:	f000 fab8 	bl	800490c <I2C_TransferConfig>
 800439c:	e00f      	b.n	80043be <HAL_I2C_Master_Receive+0x186>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043a2:	b29a      	uxth	r2, r3
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ac:	b2da      	uxtb	r2, r3
 80043ae:	8979      	ldrh	r1, [r7, #10]
 80043b0:	2300      	movs	r3, #0
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f000 faa7 	bl	800490c <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80043c2:	b29b      	uxth	r3, r3
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d19d      	bne.n	8004304 <HAL_I2C_Master_Receive+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80043c8:	697a      	ldr	r2, [r7, #20]
 80043ca:	6a39      	ldr	r1, [r7, #32]
 80043cc:	68f8      	ldr	r0, [r7, #12]
 80043ce:	f000 f8ed 	bl	80045ac <I2C_WaitOnSTOPFlagUntilTimeout>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d001      	beq.n	80043dc <HAL_I2C_Master_Receive+0x1a4>
    {
      return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e01a      	b.n	8004412 <HAL_I2C_Master_Receive+0x1da>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2220      	movs	r2, #32
 80043e2:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	6859      	ldr	r1, [r3, #4]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681a      	ldr	r2, [r3, #0]
 80043ee:	4b0c      	ldr	r3, [pc, #48]	@ (8004420 <HAL_I2C_Master_Receive+0x1e8>)
 80043f0:	400b      	ands	r3, r1
 80043f2:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	2220      	movs	r2, #32
 80043f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	2200      	movs	r2, #0
 8004400:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2200      	movs	r2, #0
 8004408:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800440c:	2300      	movs	r3, #0
 800440e:	e000      	b.n	8004412 <HAL_I2C_Master_Receive+0x1da>
  }
  else
  {
    return HAL_BUSY;
 8004410:	2302      	movs	r3, #2
  }
}
 8004412:	4618      	mov	r0, r3
 8004414:	3718      	adds	r7, #24
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	80002400 	.word	0x80002400
 8004420:	fe00e800 	.word	0xfe00e800

08004424 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	699b      	ldr	r3, [r3, #24]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b02      	cmp	r3, #2
 8004438:	d103      	bne.n	8004442 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	2200      	movs	r2, #0
 8004440:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	699b      	ldr	r3, [r3, #24]
 8004448:	f003 0301 	and.w	r3, r3, #1
 800444c:	2b01      	cmp	r3, #1
 800444e:	d007      	beq.n	8004460 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	699a      	ldr	r2, [r3, #24]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f042 0201 	orr.w	r2, r2, #1
 800445e:	619a      	str	r2, [r3, #24]
  }
}
 8004460:	bf00      	nop
 8004462:	370c      	adds	r7, #12
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr

0800446c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b084      	sub	sp, #16
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	603b      	str	r3, [r7, #0]
 8004478:	4613      	mov	r3, r2
 800447a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800447c:	e03b      	b.n	80044f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800447e:	69ba      	ldr	r2, [r7, #24]
 8004480:	6839      	ldr	r1, [r7, #0]
 8004482:	68f8      	ldr	r0, [r7, #12]
 8004484:	f000 f962 	bl	800474c <I2C_IsErrorOccurred>
 8004488:	4603      	mov	r3, r0
 800448a:	2b00      	cmp	r3, #0
 800448c:	d001      	beq.n	8004492 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e041      	b.n	8004516 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004498:	d02d      	beq.n	80044f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800449a:	f7fd ff3d 	bl	8002318 <HAL_GetTick>
 800449e:	4602      	mov	r2, r0
 80044a0:	69bb      	ldr	r3, [r7, #24]
 80044a2:	1ad3      	subs	r3, r2, r3
 80044a4:	683a      	ldr	r2, [r7, #0]
 80044a6:	429a      	cmp	r2, r3
 80044a8:	d302      	bcc.n	80044b0 <I2C_WaitOnFlagUntilTimeout+0x44>
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d122      	bne.n	80044f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	699a      	ldr	r2, [r3, #24]
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	4013      	ands	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	429a      	cmp	r2, r3
 80044be:	bf0c      	ite	eq
 80044c0:	2301      	moveq	r3, #1
 80044c2:	2300      	movne	r3, #0
 80044c4:	b2db      	uxtb	r3, r3
 80044c6:	461a      	mov	r2, r3
 80044c8:	79fb      	ldrb	r3, [r7, #7]
 80044ca:	429a      	cmp	r2, r3
 80044cc:	d113      	bne.n	80044f6 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044d2:	f043 0220 	orr.w	r2, r3, #32
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2220      	movs	r2, #32
 80044de:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	2200      	movs	r2, #0
 80044e6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 80044f2:	2301      	movs	r3, #1
 80044f4:	e00f      	b.n	8004516 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	699a      	ldr	r2, [r3, #24]
 80044fc:	68bb      	ldr	r3, [r7, #8]
 80044fe:	4013      	ands	r3, r2
 8004500:	68ba      	ldr	r2, [r7, #8]
 8004502:	429a      	cmp	r2, r3
 8004504:	bf0c      	ite	eq
 8004506:	2301      	moveq	r3, #1
 8004508:	2300      	movne	r3, #0
 800450a:	b2db      	uxtb	r3, r3
 800450c:	461a      	mov	r2, r3
 800450e:	79fb      	ldrb	r3, [r7, #7]
 8004510:	429a      	cmp	r2, r3
 8004512:	d0b4      	beq.n	800447e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004514:	2300      	movs	r3, #0
}
 8004516:	4618      	mov	r0, r3
 8004518:	3710      	adds	r7, #16
 800451a:	46bd      	mov	sp, r7
 800451c:	bd80      	pop	{r7, pc}

0800451e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800451e:	b580      	push	{r7, lr}
 8004520:	b084      	sub	sp, #16
 8004522:	af00      	add	r7, sp, #0
 8004524:	60f8      	str	r0, [r7, #12]
 8004526:	60b9      	str	r1, [r7, #8]
 8004528:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800452a:	e033      	b.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	68b9      	ldr	r1, [r7, #8]
 8004530:	68f8      	ldr	r0, [r7, #12]
 8004532:	f000 f90b 	bl	800474c <I2C_IsErrorOccurred>
 8004536:	4603      	mov	r3, r0
 8004538:	2b00      	cmp	r3, #0
 800453a:	d001      	beq.n	8004540 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e031      	b.n	80045a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004540:	68bb      	ldr	r3, [r7, #8]
 8004542:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004546:	d025      	beq.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004548:	f7fd fee6 	bl	8002318 <HAL_GetTick>
 800454c:	4602      	mov	r2, r0
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	1ad3      	subs	r3, r2, r3
 8004552:	68ba      	ldr	r2, [r7, #8]
 8004554:	429a      	cmp	r2, r3
 8004556:	d302      	bcc.n	800455e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b00      	cmp	r3, #0
 800455c:	d11a      	bne.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	699b      	ldr	r3, [r3, #24]
 8004564:	f003 0302 	and.w	r3, r3, #2
 8004568:	2b02      	cmp	r3, #2
 800456a:	d013      	beq.n	8004594 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004570:	f043 0220 	orr.w	r2, r3, #32
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	2220      	movs	r2, #32
 800457c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2200      	movs	r2, #0
 8004584:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2200      	movs	r2, #0
 800458c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004590:	2301      	movs	r3, #1
 8004592:	e007      	b.n	80045a4 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	f003 0302 	and.w	r3, r3, #2
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d1c4      	bne.n	800452c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80045a2:	2300      	movs	r3, #0
}
 80045a4:	4618      	mov	r0, r3
 80045a6:	3710      	adds	r7, #16
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}

080045ac <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b084      	sub	sp, #16
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	60f8      	str	r0, [r7, #12]
 80045b4:	60b9      	str	r1, [r7, #8]
 80045b6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80045b8:	e02f      	b.n	800461a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80045ba:	687a      	ldr	r2, [r7, #4]
 80045bc:	68b9      	ldr	r1, [r7, #8]
 80045be:	68f8      	ldr	r0, [r7, #12]
 80045c0:	f000 f8c4 	bl	800474c <I2C_IsErrorOccurred>
 80045c4:	4603      	mov	r3, r0
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d001      	beq.n	80045ce <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80045ca:	2301      	movs	r3, #1
 80045cc:	e02d      	b.n	800462a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045ce:	f7fd fea3 	bl	8002318 <HAL_GetTick>
 80045d2:	4602      	mov	r2, r0
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	1ad3      	subs	r3, r2, r3
 80045d8:	68ba      	ldr	r2, [r7, #8]
 80045da:	429a      	cmp	r2, r3
 80045dc:	d302      	bcc.n	80045e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d11a      	bne.n	800461a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f003 0320 	and.w	r3, r3, #32
 80045ee:	2b20      	cmp	r3, #32
 80045f0:	d013      	beq.n	800461a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f6:	f043 0220 	orr.w	r2, r3, #32
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	2220      	movs	r2, #32
 8004602:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	2200      	movs	r2, #0
 800460a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e007      	b.n	800462a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	699b      	ldr	r3, [r3, #24]
 8004620:	f003 0320 	and.w	r3, r3, #32
 8004624:	2b20      	cmp	r3, #32
 8004626:	d1c8      	bne.n	80045ba <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004628:	2300      	movs	r3, #0
}
 800462a:	4618      	mov	r0, r3
 800462c:	3710      	adds	r7, #16
 800462e:	46bd      	mov	sp, r7
 8004630:	bd80      	pop	{r7, pc}
	...

08004634 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b086      	sub	sp, #24
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	75fb      	strb	r3, [r7, #23]

  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 8004644:	e071      	b.n	800472a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	68b9      	ldr	r1, [r7, #8]
 800464a:	68f8      	ldr	r0, [r7, #12]
 800464c:	f000 f87e 	bl	800474c <I2C_IsErrorOccurred>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d001      	beq.n	800465a <I2C_WaitOnRXNEFlagUntilTimeout+0x26>
    {
      status = HAL_ERROR;
 8004656:	2301      	movs	r3, #1
 8004658:	75fb      	strb	r3, [r7, #23]
    }

    /* Check if a STOPF is detected */
    if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET) && (status == HAL_OK))
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	699b      	ldr	r3, [r3, #24]
 8004660:	f003 0320 	and.w	r3, r3, #32
 8004664:	2b20      	cmp	r3, #32
 8004666:	d13b      	bne.n	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
 8004668:	7dfb      	ldrb	r3, [r7, #23]
 800466a:	2b00      	cmp	r3, #0
 800466c:	d138      	bne.n	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
    {
      /* Check if an RXNE is pending */
      /* Store Last receive data if any */
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET) && (hi2c->XferSize > 0U))
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	699b      	ldr	r3, [r3, #24]
 8004674:	f003 0304 	and.w	r3, r3, #4
 8004678:	2b04      	cmp	r3, #4
 800467a:	d105      	bne.n	8004688 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004680:	2b00      	cmp	r3, #0
 8004682:	d001      	beq.n	8004688 <I2C_WaitOnRXNEFlagUntilTimeout+0x54>
      {
        /* Return HAL_OK */
        /* The Reading of data from RXDR will be done in caller function */
        status = HAL_OK;
 8004684:	2300      	movs	r3, #0
 8004686:	75fb      	strb	r3, [r7, #23]
      }

      /* Check a no-acknowledge have been detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699b      	ldr	r3, [r3, #24]
 800468e:	f003 0310 	and.w	r3, r3, #16
 8004692:	2b10      	cmp	r3, #16
 8004694:	d121      	bne.n	80046da <I2C_WaitOnRXNEFlagUntilTimeout+0xa6>
      {
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004696:	68fb      	ldr	r3, [r7, #12]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	2210      	movs	r2, #16
 800469c:	61da      	str	r2, [r3, #28]
        hi2c->ErrorCode = HAL_I2C_ERROR_AF;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2204      	movs	r2, #4
 80046a2:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2220      	movs	r2, #32
 80046aa:	61da      	str	r2, [r3, #28]

        /* Clear Configuration Register 2 */
        I2C_RESET_CR2(hi2c);
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	6859      	ldr	r1, [r3, #4]
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	681a      	ldr	r2, [r3, #0]
 80046b6:	4b24      	ldr	r3, [pc, #144]	@ (8004748 <I2C_WaitOnRXNEFlagUntilTimeout+0x114>)
 80046b8:	400b      	ands	r3, r1
 80046ba:	6053      	str	r3, [r2, #4]

        hi2c->State = HAL_I2C_STATE_READY;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	2220      	movs	r2, #32
 80046c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	2200      	movs	r2, #0
 80046c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	2200      	movs	r2, #0
 80046d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 80046d4:	2301      	movs	r3, #1
 80046d6:	75fb      	strb	r3, [r7, #23]
 80046d8:	e002      	b.n	80046e0 <I2C_WaitOnRXNEFlagUntilTimeout+0xac>
      }
      else
      {
        hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2200      	movs	r2, #0
 80046de:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }

    /* Check for the Timeout */
    if ((((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U)) && (status == HAL_OK))
 80046e0:	f7fd fe1a 	bl	8002318 <HAL_GetTick>
 80046e4:	4602      	mov	r2, r0
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	1ad3      	subs	r3, r2, r3
 80046ea:	68ba      	ldr	r2, [r7, #8]
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d302      	bcc.n	80046f6 <I2C_WaitOnRXNEFlagUntilTimeout+0xc2>
 80046f0:	68bb      	ldr	r3, [r7, #8]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d119      	bne.n	800472a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
 80046f6:	7dfb      	ldrb	r3, [r7, #23]
 80046f8:	2b00      	cmp	r3, #0
 80046fa:	d116      	bne.n	800472a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	699b      	ldr	r3, [r3, #24]
 8004702:	f003 0304 	and.w	r3, r3, #4
 8004706:	2b04      	cmp	r3, #4
 8004708:	d00f      	beq.n	800472a <I2C_WaitOnRXNEFlagUntilTimeout+0xf6>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800470e:	f043 0220 	orr.w	r2, r3, #32
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	2220      	movs	r2, #32
 800471a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	2200      	movs	r2, #0
 8004722:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        status = HAL_ERROR;
 8004726:	2301      	movs	r3, #1
 8004728:	75fb      	strb	r3, [r7, #23]
  while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET) && (status == HAL_OK))
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	699b      	ldr	r3, [r3, #24]
 8004730:	f003 0304 	and.w	r3, r3, #4
 8004734:	2b04      	cmp	r3, #4
 8004736:	d002      	beq.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0x10a>
 8004738:	7dfb      	ldrb	r3, [r7, #23]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d083      	beq.n	8004646 <I2C_WaitOnRXNEFlagUntilTimeout+0x12>
      }
    }
  }
  return status;
 800473e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004740:	4618      	mov	r0, r3
 8004742:	3718      	adds	r7, #24
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	fe00e800 	.word	0xfe00e800

0800474c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b08a      	sub	sp, #40	@ 0x28
 8004750:	af00      	add	r7, sp, #0
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	60b9      	str	r1, [r7, #8]
 8004756:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004758:	2300      	movs	r3, #0
 800475a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	699b      	ldr	r3, [r3, #24]
 8004764:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8004766:	2300      	movs	r3, #0
 8004768:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800476e:	69bb      	ldr	r3, [r7, #24]
 8004770:	f003 0310 	and.w	r3, r3, #16
 8004774:	2b00      	cmp	r3, #0
 8004776:	d068      	beq.n	800484a <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2210      	movs	r2, #16
 800477e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004780:	e049      	b.n	8004816 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8004782:	68bb      	ldr	r3, [r7, #8]
 8004784:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004788:	d045      	beq.n	8004816 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800478a:	f7fd fdc5 	bl	8002318 <HAL_GetTick>
 800478e:	4602      	mov	r2, r0
 8004790:	69fb      	ldr	r3, [r7, #28]
 8004792:	1ad3      	subs	r3, r2, r3
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	429a      	cmp	r2, r3
 8004798:	d302      	bcc.n	80047a0 <I2C_IsErrorOccurred+0x54>
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2b00      	cmp	r3, #0
 800479e:	d13a      	bne.n	8004816 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80047a0:	68fb      	ldr	r3, [r7, #12]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047aa:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80047ac:	68fb      	ldr	r3, [r7, #12]
 80047ae:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80047b2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80047be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047c2:	d121      	bne.n	8004808 <I2C_IsErrorOccurred+0xbc>
 80047c4:	697b      	ldr	r3, [r7, #20]
 80047c6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047ca:	d01d      	beq.n	8004808 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80047cc:	7cfb      	ldrb	r3, [r7, #19]
 80047ce:	2b20      	cmp	r3, #32
 80047d0:	d01a      	beq.n	8004808 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	685a      	ldr	r2, [r3, #4]
 80047d8:	68fb      	ldr	r3, [r7, #12]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80047e0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80047e2:	f7fd fd99 	bl	8002318 <HAL_GetTick>
 80047e6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80047e8:	e00e      	b.n	8004808 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80047ea:	f7fd fd95 	bl	8002318 <HAL_GetTick>
 80047ee:	4602      	mov	r2, r0
 80047f0:	69fb      	ldr	r3, [r7, #28]
 80047f2:	1ad3      	subs	r3, r2, r3
 80047f4:	2b19      	cmp	r3, #25
 80047f6:	d907      	bls.n	8004808 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80047f8:	6a3b      	ldr	r3, [r7, #32]
 80047fa:	f043 0320 	orr.w	r3, r3, #32
 80047fe:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 8004806:	e006      	b.n	8004816 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	699b      	ldr	r3, [r3, #24]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b20      	cmp	r3, #32
 8004814:	d1e9      	bne.n	80047ea <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	f003 0320 	and.w	r3, r3, #32
 8004820:	2b20      	cmp	r3, #32
 8004822:	d003      	beq.n	800482c <I2C_IsErrorOccurred+0xe0>
 8004824:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004828:	2b00      	cmp	r3, #0
 800482a:	d0aa      	beq.n	8004782 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800482c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004830:	2b00      	cmp	r3, #0
 8004832:	d103      	bne.n	800483c <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2220      	movs	r2, #32
 800483a:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	f043 0304 	orr.w	r3, r3, #4
 8004842:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8004844:	2301      	movs	r3, #1
 8004846:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	699b      	ldr	r3, [r3, #24]
 8004850:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8004852:	69bb      	ldr	r3, [r7, #24]
 8004854:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004858:	2b00      	cmp	r3, #0
 800485a:	d00b      	beq.n	8004874 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800485c:	6a3b      	ldr	r3, [r7, #32]
 800485e:	f043 0301 	orr.w	r3, r3, #1
 8004862:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800486c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800486e:	2301      	movs	r3, #1
 8004870:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8004874:	69bb      	ldr	r3, [r7, #24]
 8004876:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800487a:	2b00      	cmp	r3, #0
 800487c:	d00b      	beq.n	8004896 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800487e:	6a3b      	ldr	r3, [r7, #32]
 8004880:	f043 0308 	orr.w	r3, r3, #8
 8004884:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004886:	68fb      	ldr	r3, [r7, #12]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800488e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004890:	2301      	movs	r3, #1
 8004892:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8004896:	69bb      	ldr	r3, [r7, #24]
 8004898:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800489c:	2b00      	cmp	r3, #0
 800489e:	d00b      	beq.n	80048b8 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80048a0:	6a3b      	ldr	r3, [r7, #32]
 80048a2:	f043 0302 	orr.w	r3, r3, #2
 80048a6:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048b0:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 80048b8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80048bc:	2b00      	cmp	r3, #0
 80048be:	d01c      	beq.n	80048fa <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f7ff fdaf 	bl	8004424 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	6859      	ldr	r1, [r3, #4]
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	4b0d      	ldr	r3, [pc, #52]	@ (8004908 <I2C_IsErrorOccurred+0x1bc>)
 80048d2:	400b      	ands	r3, r1
 80048d4:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	431a      	orrs	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80048e2:	68fb      	ldr	r3, [r7, #12]
 80048e4:	2220      	movs	r2, #32
 80048e6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2200      	movs	r2, #0
 80048f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80048fa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3728      	adds	r7, #40	@ 0x28
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	fe00e800 	.word	0xfe00e800

0800490c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	60f8      	str	r0, [r7, #12]
 8004914:	607b      	str	r3, [r7, #4]
 8004916:	460b      	mov	r3, r1
 8004918:	817b      	strh	r3, [r7, #10]
 800491a:	4613      	mov	r3, r2
 800491c:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800491e:	897b      	ldrh	r3, [r7, #10]
 8004920:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004924:	7a7b      	ldrb	r3, [r7, #9]
 8004926:	041b      	lsls	r3, r3, #16
 8004928:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800492c:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004932:	6a3b      	ldr	r3, [r7, #32]
 8004934:	4313      	orrs	r3, r2
 8004936:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800493a:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	685a      	ldr	r2, [r3, #4]
 8004942:	6a3b      	ldr	r3, [r7, #32]
 8004944:	0d5b      	lsrs	r3, r3, #21
 8004946:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800494a:	4b08      	ldr	r3, [pc, #32]	@ (800496c <I2C_TransferConfig+0x60>)
 800494c:	430b      	orrs	r3, r1
 800494e:	43db      	mvns	r3, r3
 8004950:	ea02 0103 	and.w	r1, r2, r3
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	697a      	ldr	r2, [r7, #20]
 800495a:	430a      	orrs	r2, r1
 800495c:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800495e:	bf00      	nop
 8004960:	371c      	adds	r7, #28
 8004962:	46bd      	mov	sp, r7
 8004964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004968:	4770      	bx	lr
 800496a:	bf00      	nop
 800496c:	03ff63ff 	.word	0x03ff63ff

08004970 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004970:	b480      	push	{r7}
 8004972:	b083      	sub	sp, #12
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b20      	cmp	r3, #32
 8004984:	d138      	bne.n	80049f8 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800498c:	2b01      	cmp	r3, #1
 800498e:	d101      	bne.n	8004994 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004990:	2302      	movs	r3, #2
 8004992:	e032      	b.n	80049fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	2201      	movs	r2, #1
 8004998:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2224      	movs	r2, #36	@ 0x24
 80049a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0201 	bic.w	r2, r2, #1
 80049b2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	681a      	ldr	r2, [r3, #0]
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80049c2:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	6819      	ldr	r1, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	683a      	ldr	r2, [r7, #0]
 80049d0:	430a      	orrs	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	681a      	ldr	r2, [r3, #0]
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	f042 0201 	orr.w	r2, r2, #1
 80049e2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80049f4:	2300      	movs	r3, #0
 80049f6:	e000      	b.n	80049fa <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80049f8:	2302      	movs	r3, #2
  }
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	370c      	adds	r7, #12
 80049fe:	46bd      	mov	sp, r7
 8004a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a04:	4770      	bx	lr

08004a06 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004a06:	b480      	push	{r7}
 8004a08:	b085      	sub	sp, #20
 8004a0a:	af00      	add	r7, sp, #0
 8004a0c:	6078      	str	r0, [r7, #4]
 8004a0e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004a16:	b2db      	uxtb	r3, r3
 8004a18:	2b20      	cmp	r3, #32
 8004a1a:	d139      	bne.n	8004a90 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d101      	bne.n	8004a2a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8004a26:	2302      	movs	r3, #2
 8004a28:	e033      	b.n	8004a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	2201      	movs	r2, #1
 8004a2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2224      	movs	r2, #36	@ 0x24
 8004a36:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	681a      	ldr	r2, [r3, #0]
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f022 0201 	bic.w	r2, r2, #1
 8004a48:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004a58:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681a      	ldr	r2, [r3, #0]
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f042 0201 	orr.w	r2, r2, #1
 8004a7a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2220      	movs	r2, #32
 8004a80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2200      	movs	r2, #0
 8004a88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	e000      	b.n	8004a92 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004a90:	2302      	movs	r3, #2
  }
}
 8004a92:	4618      	mov	r0, r3
 8004a94:	3714      	adds	r7, #20
 8004a96:	46bd      	mov	sp, r7
 8004a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9c:	4770      	bx	lr
	...

08004aa0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aa4:	4b0d      	ldr	r3, [pc, #52]	@ (8004adc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004ab0:	d102      	bne.n	8004ab8 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8004ab2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ab6:	e00b      	b.n	8004ad0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8004ab8:	4b08      	ldr	r3, [pc, #32]	@ (8004adc <HAL_PWREx_GetVoltageRange+0x3c>)
 8004aba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004abe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ac2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ac6:	d102      	bne.n	8004ace <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8004ac8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004acc:	e000      	b.n	8004ad0 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8004ace:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8004ad0:	4618      	mov	r0, r3
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad8:	4770      	bx	lr
 8004ada:	bf00      	nop
 8004adc:	40007000 	.word	0x40007000

08004ae0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d141      	bne.n	8004b72 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004aee:	4b4b      	ldr	r3, [pc, #300]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004af6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004afa:	d131      	bne.n	8004b60 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004afc:	4b47      	ldr	r3, [pc, #284]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004afe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b02:	4a46      	ldr	r2, [pc, #280]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b04:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b08:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b0c:	4b43      	ldr	r3, [pc, #268]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004b14:	4a41      	ldr	r2, [pc, #260]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b16:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b1a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004b1c:	4b40      	ldr	r3, [pc, #256]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	2232      	movs	r2, #50	@ 0x32
 8004b22:	fb02 f303 	mul.w	r3, r2, r3
 8004b26:	4a3f      	ldr	r2, [pc, #252]	@ (8004c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004b28:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2c:	0c9b      	lsrs	r3, r3, #18
 8004b2e:	3301      	adds	r3, #1
 8004b30:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b32:	e002      	b.n	8004b3a <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	3b01      	subs	r3, #1
 8004b38:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004b3a:	4b38      	ldr	r3, [pc, #224]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b3c:	695b      	ldr	r3, [r3, #20]
 8004b3e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b42:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b46:	d102      	bne.n	8004b4e <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d1f2      	bne.n	8004b34 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004b4e:	4b33      	ldr	r3, [pc, #204]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b50:	695b      	ldr	r3, [r3, #20]
 8004b52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b5a:	d158      	bne.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e057      	b.n	8004c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b60:	4b2e      	ldr	r3, [pc, #184]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b66:	4a2d      	ldr	r2, [pc, #180]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b68:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004b6c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004b70:	e04d      	b.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004b78:	d141      	bne.n	8004bfe <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b7a:	4b28      	ldr	r3, [pc, #160]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8004b82:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004b86:	d131      	bne.n	8004bec <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b88:	4b24      	ldr	r3, [pc, #144]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004b8e:	4a23      	ldr	r2, [pc, #140]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b94:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b98:	4b20      	ldr	r3, [pc, #128]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004ba0:	4a1e      	ldr	r2, [pc, #120]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004ba2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004ba6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8004ba8:	4b1d      	ldr	r3, [pc, #116]	@ (8004c20 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	2232      	movs	r2, #50	@ 0x32
 8004bae:	fb02 f303 	mul.w	r3, r2, r3
 8004bb2:	4a1c      	ldr	r2, [pc, #112]	@ (8004c24 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	0c9b      	lsrs	r3, r3, #18
 8004bba:	3301      	adds	r3, #1
 8004bbc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bbe:	e002      	b.n	8004bc6 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bc6:	4b15      	ldr	r3, [pc, #84]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bc8:	695b      	ldr	r3, [r3, #20]
 8004bca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004bce:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004bd2:	d102      	bne.n	8004bda <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d1f2      	bne.n	8004bc0 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bda:	4b10      	ldr	r3, [pc, #64]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bdc:	695b      	ldr	r3, [r3, #20]
 8004bde:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004be6:	d112      	bne.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e011      	b.n	8004c10 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004bec:	4b0b      	ldr	r3, [pc, #44]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004bf2:	4a0a      	ldr	r2, [pc, #40]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bf4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bf8:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8004bfc:	e007      	b.n	8004c0e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004bfe:	4b07      	ldr	r3, [pc, #28]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8004c06:	4a05      	ldr	r2, [pc, #20]	@ (8004c1c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c08:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004c0c:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8004c0e:	2300      	movs	r3, #0
}
 8004c10:	4618      	mov	r0, r3
 8004c12:	3714      	adds	r7, #20
 8004c14:	46bd      	mov	sp, r7
 8004c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c1a:	4770      	bx	lr
 8004c1c:	40007000 	.word	0x40007000
 8004c20:	20000004 	.word	0x20000004
 8004c24:	431bde83 	.word	0x431bde83

08004c28 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8004c28:	b480      	push	{r7}
 8004c2a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8004c2c:	4b05      	ldr	r3, [pc, #20]	@ (8004c44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	4a04      	ldr	r2, [pc, #16]	@ (8004c44 <HAL_PWREx_EnableVddIO2+0x1c>)
 8004c32:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004c36:	6053      	str	r3, [r2, #4]
}
 8004c38:	bf00      	nop
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	40007000 	.word	0x40007000

08004c48 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004c48:	b580      	push	{r7, lr}
 8004c4a:	b088      	sub	sp, #32
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d102      	bne.n	8004c5c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8004c56:	2301      	movs	r3, #1
 8004c58:	f000 bc08 	b.w	800546c <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004c5c:	4b96      	ldr	r3, [pc, #600]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004c5e:	689b      	ldr	r3, [r3, #8]
 8004c60:	f003 030c 	and.w	r3, r3, #12
 8004c64:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004c66:	4b94      	ldr	r3, [pc, #592]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004c68:	68db      	ldr	r3, [r3, #12]
 8004c6a:	f003 0303 	and.w	r3, r3, #3
 8004c6e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 0310 	and.w	r3, r3, #16
 8004c78:	2b00      	cmp	r3, #0
 8004c7a:	f000 80e4 	beq.w	8004e46 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004c7e:	69bb      	ldr	r3, [r7, #24]
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d007      	beq.n	8004c94 <HAL_RCC_OscConfig+0x4c>
 8004c84:	69bb      	ldr	r3, [r7, #24]
 8004c86:	2b0c      	cmp	r3, #12
 8004c88:	f040 808b 	bne.w	8004da2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8004c8c:	697b      	ldr	r3, [r7, #20]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	f040 8087 	bne.w	8004da2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004c94:	4b88      	ldr	r3, [pc, #544]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d005      	beq.n	8004cac <HAL_RCC_OscConfig+0x64>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	699b      	ldr	r3, [r3, #24]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d101      	bne.n	8004cac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8004ca8:	2301      	movs	r3, #1
 8004caa:	e3df      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	6a1a      	ldr	r2, [r3, #32]
 8004cb0:	4b81      	ldr	r3, [pc, #516]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f003 0308 	and.w	r3, r3, #8
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d004      	beq.n	8004cc6 <HAL_RCC_OscConfig+0x7e>
 8004cbc:	4b7e      	ldr	r3, [pc, #504]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cc4:	e005      	b.n	8004cd2 <HAL_RCC_OscConfig+0x8a>
 8004cc6:	4b7c      	ldr	r3, [pc, #496]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004cc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8004ccc:	091b      	lsrs	r3, r3, #4
 8004cce:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d223      	bcs.n	8004d1e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f000 fdcc 	bl	8005878 <RCC_SetFlashLatencyFromMSIRange>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d001      	beq.n	8004cea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8004ce6:	2301      	movs	r3, #1
 8004ce8:	e3c0      	b.n	800546c <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004cea:	4b73      	ldr	r3, [pc, #460]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	4a72      	ldr	r2, [pc, #456]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004cf0:	f043 0308 	orr.w	r3, r3, #8
 8004cf4:	6013      	str	r3, [r2, #0]
 8004cf6:	4b70      	ldr	r3, [pc, #448]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6a1b      	ldr	r3, [r3, #32]
 8004d02:	496d      	ldr	r1, [pc, #436]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d08:	4b6b      	ldr	r3, [pc, #428]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d0a:	685b      	ldr	r3, [r3, #4]
 8004d0c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	021b      	lsls	r3, r3, #8
 8004d16:	4968      	ldr	r1, [pc, #416]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d18:	4313      	orrs	r3, r2
 8004d1a:	604b      	str	r3, [r1, #4]
 8004d1c:	e025      	b.n	8004d6a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004d1e:	4b66      	ldr	r3, [pc, #408]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a65      	ldr	r2, [pc, #404]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d24:	f043 0308 	orr.w	r3, r3, #8
 8004d28:	6013      	str	r3, [r2, #0]
 8004d2a:	4b63      	ldr	r3, [pc, #396]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6a1b      	ldr	r3, [r3, #32]
 8004d36:	4960      	ldr	r1, [pc, #384]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d38:	4313      	orrs	r3, r2
 8004d3a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004d3c:	4b5e      	ldr	r3, [pc, #376]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	69db      	ldr	r3, [r3, #28]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	495b      	ldr	r1, [pc, #364]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d4c:	4313      	orrs	r3, r2
 8004d4e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d109      	bne.n	8004d6a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	f000 fd8c 	bl	8005878 <RCC_SetFlashLatencyFromMSIRange>
 8004d60:	4603      	mov	r3, r0
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d001      	beq.n	8004d6a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e380      	b.n	800546c <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004d6a:	f000 fcc1 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 8004d6e:	4602      	mov	r2, r0
 8004d70:	4b51      	ldr	r3, [pc, #324]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004d72:	689b      	ldr	r3, [r3, #8]
 8004d74:	091b      	lsrs	r3, r3, #4
 8004d76:	f003 030f 	and.w	r3, r3, #15
 8004d7a:	4950      	ldr	r1, [pc, #320]	@ (8004ebc <HAL_RCC_OscConfig+0x274>)
 8004d7c:	5ccb      	ldrb	r3, [r1, r3]
 8004d7e:	f003 031f 	and.w	r3, r3, #31
 8004d82:	fa22 f303 	lsr.w	r3, r2, r3
 8004d86:	4a4e      	ldr	r2, [pc, #312]	@ (8004ec0 <HAL_RCC_OscConfig+0x278>)
 8004d88:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8004d8a:	4b4e      	ldr	r3, [pc, #312]	@ (8004ec4 <HAL_RCC_OscConfig+0x27c>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fd fa72 	bl	8002278 <HAL_InitTick>
 8004d94:	4603      	mov	r3, r0
 8004d96:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8004d98:	7bfb      	ldrb	r3, [r7, #15]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d052      	beq.n	8004e44 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8004d9e:	7bfb      	ldrb	r3, [r7, #15]
 8004da0:	e364      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	699b      	ldr	r3, [r3, #24]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d032      	beq.n	8004e10 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8004daa:	4b43      	ldr	r3, [pc, #268]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	4a42      	ldr	r2, [pc, #264]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004db0:	f043 0301 	orr.w	r3, r3, #1
 8004db4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004db6:	f7fd faaf 	bl	8002318 <HAL_GetTick>
 8004dba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dbc:	e008      	b.n	8004dd0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004dbe:	f7fd faab 	bl	8002318 <HAL_GetTick>
 8004dc2:	4602      	mov	r2, r0
 8004dc4:	693b      	ldr	r3, [r7, #16]
 8004dc6:	1ad3      	subs	r3, r2, r3
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	d901      	bls.n	8004dd0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8004dcc:	2303      	movs	r3, #3
 8004dce:	e34d      	b.n	800546c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8004dd0:	4b39      	ldr	r3, [pc, #228]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d0f0      	beq.n	8004dbe <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8004ddc:	4b36      	ldr	r3, [pc, #216]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a35      	ldr	r2, [pc, #212]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004de2:	f043 0308 	orr.w	r3, r3, #8
 8004de6:	6013      	str	r3, [r2, #0]
 8004de8:	4b33      	ldr	r3, [pc, #204]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	4930      	ldr	r1, [pc, #192]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004df6:	4313      	orrs	r3, r2
 8004df8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8004dfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	69db      	ldr	r3, [r3, #28]
 8004e06:	021b      	lsls	r3, r3, #8
 8004e08:	492b      	ldr	r1, [pc, #172]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004e0a:	4313      	orrs	r3, r2
 8004e0c:	604b      	str	r3, [r1, #4]
 8004e0e:	e01a      	b.n	8004e46 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8004e10:	4b29      	ldr	r3, [pc, #164]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	4a28      	ldr	r2, [pc, #160]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004e16:	f023 0301 	bic.w	r3, r3, #1
 8004e1a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8004e1c:	f7fd fa7c 	bl	8002318 <HAL_GetTick>
 8004e20:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e22:	e008      	b.n	8004e36 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8004e24:	f7fd fa78 	bl	8002318 <HAL_GetTick>
 8004e28:	4602      	mov	r2, r0
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	1ad3      	subs	r3, r2, r3
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d901      	bls.n	8004e36 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8004e32:	2303      	movs	r3, #3
 8004e34:	e31a      	b.n	800546c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8004e36:	4b20      	ldr	r3, [pc, #128]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	f003 0302 	and.w	r3, r3, #2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d1f0      	bne.n	8004e24 <HAL_RCC_OscConfig+0x1dc>
 8004e42:	e000      	b.n	8004e46 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8004e44:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d073      	beq.n	8004f3a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8004e52:	69bb      	ldr	r3, [r7, #24]
 8004e54:	2b08      	cmp	r3, #8
 8004e56:	d005      	beq.n	8004e64 <HAL_RCC_OscConfig+0x21c>
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b0c      	cmp	r3, #12
 8004e5c:	d10e      	bne.n	8004e7c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8004e5e:	697b      	ldr	r3, [r7, #20]
 8004e60:	2b03      	cmp	r3, #3
 8004e62:	d10b      	bne.n	8004e7c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e64:	4b14      	ldr	r3, [pc, #80]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d063      	beq.n	8004f38 <HAL_RCC_OscConfig+0x2f0>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	685b      	ldr	r3, [r3, #4]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d15f      	bne.n	8004f38 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8004e78:	2301      	movs	r3, #1
 8004e7a:	e2f7      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004e84:	d106      	bne.n	8004e94 <HAL_RCC_OscConfig+0x24c>
 8004e86:	4b0c      	ldr	r3, [pc, #48]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	4a0b      	ldr	r2, [pc, #44]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004e90:	6013      	str	r3, [r2, #0]
 8004e92:	e025      	b.n	8004ee0 <HAL_RCC_OscConfig+0x298>
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	685b      	ldr	r3, [r3, #4]
 8004e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004e9c:	d114      	bne.n	8004ec8 <HAL_RCC_OscConfig+0x280>
 8004e9e:	4b06      	ldr	r3, [pc, #24]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	4a05      	ldr	r2, [pc, #20]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004ea8:	6013      	str	r3, [r2, #0]
 8004eaa:	4b03      	ldr	r3, [pc, #12]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	4a02      	ldr	r2, [pc, #8]	@ (8004eb8 <HAL_RCC_OscConfig+0x270>)
 8004eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004eb4:	6013      	str	r3, [r2, #0]
 8004eb6:	e013      	b.n	8004ee0 <HAL_RCC_OscConfig+0x298>
 8004eb8:	40021000 	.word	0x40021000
 8004ebc:	0800b048 	.word	0x0800b048
 8004ec0:	20000004 	.word	0x20000004
 8004ec4:	20000008 	.word	0x20000008
 8004ec8:	4ba0      	ldr	r3, [pc, #640]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a9f      	ldr	r2, [pc, #636]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004ece:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004ed2:	6013      	str	r3, [r2, #0]
 8004ed4:	4b9d      	ldr	r3, [pc, #628]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	4a9c      	ldr	r2, [pc, #624]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004eda:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004ede:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	685b      	ldr	r3, [r3, #4]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d013      	beq.n	8004f10 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ee8:	f7fd fa16 	bl	8002318 <HAL_GetTick>
 8004eec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004eee:	e008      	b.n	8004f02 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004ef0:	f7fd fa12 	bl	8002318 <HAL_GetTick>
 8004ef4:	4602      	mov	r2, r0
 8004ef6:	693b      	ldr	r3, [r7, #16]
 8004ef8:	1ad3      	subs	r3, r2, r3
 8004efa:	2b64      	cmp	r3, #100	@ 0x64
 8004efc:	d901      	bls.n	8004f02 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8004efe:	2303      	movs	r3, #3
 8004f00:	e2b4      	b.n	800546c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f02:	4b92      	ldr	r3, [pc, #584]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d0f0      	beq.n	8004ef0 <HAL_RCC_OscConfig+0x2a8>
 8004f0e:	e014      	b.n	8004f3a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fd fa02 	bl	8002318 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f18:	f7fd f9fe 	bl	8002318 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b64      	cmp	r3, #100	@ 0x64
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e2a0      	b.n	800546c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f2a:	4b88      	ldr	r3, [pc, #544]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d1f0      	bne.n	8004f18 <HAL_RCC_OscConfig+0x2d0>
 8004f36:	e000      	b.n	8004f3a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004f38:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f003 0302 	and.w	r3, r3, #2
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d060      	beq.n	8005008 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8004f46:	69bb      	ldr	r3, [r7, #24]
 8004f48:	2b04      	cmp	r3, #4
 8004f4a:	d005      	beq.n	8004f58 <HAL_RCC_OscConfig+0x310>
 8004f4c:	69bb      	ldr	r3, [r7, #24]
 8004f4e:	2b0c      	cmp	r3, #12
 8004f50:	d119      	bne.n	8004f86 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8004f52:	697b      	ldr	r3, [r7, #20]
 8004f54:	2b02      	cmp	r3, #2
 8004f56:	d116      	bne.n	8004f86 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f58:	4b7c      	ldr	r3, [pc, #496]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d005      	beq.n	8004f70 <HAL_RCC_OscConfig+0x328>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d101      	bne.n	8004f70 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e27d      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f70:	4b76      	ldr	r3, [pc, #472]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	691b      	ldr	r3, [r3, #16]
 8004f7c:	061b      	lsls	r3, r3, #24
 8004f7e:	4973      	ldr	r1, [pc, #460]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004f80:	4313      	orrs	r3, r2
 8004f82:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004f84:	e040      	b.n	8005008 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	68db      	ldr	r3, [r3, #12]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d023      	beq.n	8004fd6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	4a6e      	ldr	r2, [pc, #440]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004f94:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004f98:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f9a:	f7fd f9bd 	bl	8002318 <HAL_GetTick>
 8004f9e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fa0:	e008      	b.n	8004fb4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fa2:	f7fd f9b9 	bl	8002318 <HAL_GetTick>
 8004fa6:	4602      	mov	r2, r0
 8004fa8:	693b      	ldr	r3, [r7, #16]
 8004faa:	1ad3      	subs	r3, r2, r3
 8004fac:	2b02      	cmp	r3, #2
 8004fae:	d901      	bls.n	8004fb4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8004fb0:	2303      	movs	r3, #3
 8004fb2:	e25b      	b.n	800546c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fb4:	4b65      	ldr	r3, [pc, #404]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d0f0      	beq.n	8004fa2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004fc0:	4b62      	ldr	r3, [pc, #392]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	691b      	ldr	r3, [r3, #16]
 8004fcc:	061b      	lsls	r3, r3, #24
 8004fce:	495f      	ldr	r1, [pc, #380]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004fd0:	4313      	orrs	r3, r2
 8004fd2:	604b      	str	r3, [r1, #4]
 8004fd4:	e018      	b.n	8005008 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	4a5c      	ldr	r2, [pc, #368]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004fdc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004fe0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004fe2:	f7fd f999 	bl	8002318 <HAL_GetTick>
 8004fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004fe8:	e008      	b.n	8004ffc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004fea:	f7fd f995 	bl	8002318 <HAL_GetTick>
 8004fee:	4602      	mov	r2, r0
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	2b02      	cmp	r3, #2
 8004ff6:	d901      	bls.n	8004ffc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e237      	b.n	800546c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ffc:	4b53      	ldr	r3, [pc, #332]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005004:	2b00      	cmp	r3, #0
 8005006:	d1f0      	bne.n	8004fea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f003 0308 	and.w	r3, r3, #8
 8005010:	2b00      	cmp	r3, #0
 8005012:	d03c      	beq.n	800508e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	695b      	ldr	r3, [r3, #20]
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01c      	beq.n	8005056 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800501c:	4b4b      	ldr	r3, [pc, #300]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 800501e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005022:	4a4a      	ldr	r2, [pc, #296]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8005024:	f043 0301 	orr.w	r3, r3, #1
 8005028:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800502c:	f7fd f974 	bl	8002318 <HAL_GetTick>
 8005030:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005032:	e008      	b.n	8005046 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005034:	f7fd f970 	bl	8002318 <HAL_GetTick>
 8005038:	4602      	mov	r2, r0
 800503a:	693b      	ldr	r3, [r7, #16]
 800503c:	1ad3      	subs	r3, r2, r3
 800503e:	2b02      	cmp	r3, #2
 8005040:	d901      	bls.n	8005046 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8005042:	2303      	movs	r3, #3
 8005044:	e212      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005046:	4b41      	ldr	r3, [pc, #260]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8005048:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800504c:	f003 0302 	and.w	r3, r3, #2
 8005050:	2b00      	cmp	r3, #0
 8005052:	d0ef      	beq.n	8005034 <HAL_RCC_OscConfig+0x3ec>
 8005054:	e01b      	b.n	800508e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005056:	4b3d      	ldr	r3, [pc, #244]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8005058:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800505c:	4a3b      	ldr	r2, [pc, #236]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005066:	f7fd f957 	bl	8002318 <HAL_GetTick>
 800506a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800506c:	e008      	b.n	8005080 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800506e:	f7fd f953 	bl	8002318 <HAL_GetTick>
 8005072:	4602      	mov	r2, r0
 8005074:	693b      	ldr	r3, [r7, #16]
 8005076:	1ad3      	subs	r3, r2, r3
 8005078:	2b02      	cmp	r3, #2
 800507a:	d901      	bls.n	8005080 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800507c:	2303      	movs	r3, #3
 800507e:	e1f5      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005080:	4b32      	ldr	r3, [pc, #200]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8005082:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005086:	f003 0302 	and.w	r3, r3, #2
 800508a:	2b00      	cmp	r3, #0
 800508c:	d1ef      	bne.n	800506e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f003 0304 	and.w	r3, r3, #4
 8005096:	2b00      	cmp	r3, #0
 8005098:	f000 80a6 	beq.w	80051e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800509c:	2300      	movs	r3, #0
 800509e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80050a0:	4b2a      	ldr	r3, [pc, #168]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 80050a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d10d      	bne.n	80050c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80050ac:	4b27      	ldr	r3, [pc, #156]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 80050ae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050b0:	4a26      	ldr	r2, [pc, #152]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 80050b2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80050b6:	6593      	str	r3, [r2, #88]	@ 0x58
 80050b8:	4b24      	ldr	r3, [pc, #144]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 80050ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80050bc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80050c0:	60bb      	str	r3, [r7, #8]
 80050c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80050c4:	2301      	movs	r3, #1
 80050c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050c8:	4b21      	ldr	r3, [pc, #132]	@ (8005150 <HAL_RCC_OscConfig+0x508>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80050d0:	2b00      	cmp	r3, #0
 80050d2:	d118      	bne.n	8005106 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80050d4:	4b1e      	ldr	r3, [pc, #120]	@ (8005150 <HAL_RCC_OscConfig+0x508>)
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	4a1d      	ldr	r2, [pc, #116]	@ (8005150 <HAL_RCC_OscConfig+0x508>)
 80050da:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80050e0:	f7fd f91a 	bl	8002318 <HAL_GetTick>
 80050e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050e6:	e008      	b.n	80050fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050e8:	f7fd f916 	bl	8002318 <HAL_GetTick>
 80050ec:	4602      	mov	r2, r0
 80050ee:	693b      	ldr	r3, [r7, #16]
 80050f0:	1ad3      	subs	r3, r2, r3
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e1b8      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80050fa:	4b15      	ldr	r3, [pc, #84]	@ (8005150 <HAL_RCC_OscConfig+0x508>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005102:	2b00      	cmp	r3, #0
 8005104:	d0f0      	beq.n	80050e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	689b      	ldr	r3, [r3, #8]
 800510a:	2b01      	cmp	r3, #1
 800510c:	d108      	bne.n	8005120 <HAL_RCC_OscConfig+0x4d8>
 800510e:	4b0f      	ldr	r3, [pc, #60]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8005110:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005114:	4a0d      	ldr	r2, [pc, #52]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8005116:	f043 0301 	orr.w	r3, r3, #1
 800511a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 800511e:	e029      	b.n	8005174 <HAL_RCC_OscConfig+0x52c>
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	689b      	ldr	r3, [r3, #8]
 8005124:	2b05      	cmp	r3, #5
 8005126:	d115      	bne.n	8005154 <HAL_RCC_OscConfig+0x50c>
 8005128:	4b08      	ldr	r3, [pc, #32]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 800512a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800512e:	4a07      	ldr	r2, [pc, #28]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8005130:	f043 0304 	orr.w	r3, r3, #4
 8005134:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005138:	4b04      	ldr	r3, [pc, #16]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 800513a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800513e:	4a03      	ldr	r2, [pc, #12]	@ (800514c <HAL_RCC_OscConfig+0x504>)
 8005140:	f043 0301 	orr.w	r3, r3, #1
 8005144:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005148:	e014      	b.n	8005174 <HAL_RCC_OscConfig+0x52c>
 800514a:	bf00      	nop
 800514c:	40021000 	.word	0x40021000
 8005150:	40007000 	.word	0x40007000
 8005154:	4b9d      	ldr	r3, [pc, #628]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005156:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800515a:	4a9c      	ldr	r2, [pc, #624]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 800515c:	f023 0301 	bic.w	r3, r3, #1
 8005160:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005164:	4b99      	ldr	r3, [pc, #612]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005166:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800516a:	4a98      	ldr	r2, [pc, #608]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 800516c:	f023 0304 	bic.w	r3, r3, #4
 8005170:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	2b00      	cmp	r3, #0
 800517a:	d016      	beq.n	80051aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800517c:	f7fd f8cc 	bl	8002318 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005182:	e00a      	b.n	800519a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005184:	f7fd f8c8 	bl	8002318 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005192:	4293      	cmp	r3, r2
 8005194:	d901      	bls.n	800519a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8005196:	2303      	movs	r3, #3
 8005198:	e168      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800519a:	4b8c      	ldr	r3, [pc, #560]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 800519c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051a0:	f003 0302 	and.w	r3, r3, #2
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d0ed      	beq.n	8005184 <HAL_RCC_OscConfig+0x53c>
 80051a8:	e015      	b.n	80051d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051aa:	f7fd f8b5 	bl	8002318 <HAL_GetTick>
 80051ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051b0:	e00a      	b.n	80051c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80051b2:	f7fd f8b1 	bl	8002318 <HAL_GetTick>
 80051b6:	4602      	mov	r2, r0
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	1ad3      	subs	r3, r2, r3
 80051bc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80051c0:	4293      	cmp	r3, r2
 80051c2:	d901      	bls.n	80051c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80051c4:	2303      	movs	r3, #3
 80051c6:	e151      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80051c8:	4b80      	ldr	r3, [pc, #512]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 80051ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80051ce:	f003 0302 	and.w	r3, r3, #2
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d1ed      	bne.n	80051b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80051d6:	7ffb      	ldrb	r3, [r7, #31]
 80051d8:	2b01      	cmp	r3, #1
 80051da:	d105      	bne.n	80051e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80051dc:	4b7b      	ldr	r3, [pc, #492]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 80051de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80051e0:	4a7a      	ldr	r2, [pc, #488]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 80051e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80051e6:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	f003 0320 	and.w	r3, r3, #32
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d03c      	beq.n	800526e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d01c      	beq.n	8005236 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80051fc:	4b73      	ldr	r3, [pc, #460]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 80051fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005202:	4a72      	ldr	r2, [pc, #456]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005204:	f043 0301 	orr.w	r3, r3, #1
 8005208:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800520c:	f7fd f884 	bl	8002318 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005214:	f7fd f880 	bl	8002318 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b02      	cmp	r3, #2
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e122      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005226:	4b69      	ldr	r3, [pc, #420]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005228:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800522c:	f003 0302 	and.w	r3, r3, #2
 8005230:	2b00      	cmp	r3, #0
 8005232:	d0ef      	beq.n	8005214 <HAL_RCC_OscConfig+0x5cc>
 8005234:	e01b      	b.n	800526e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005236:	4b65      	ldr	r3, [pc, #404]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005238:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800523c:	4a63      	ldr	r2, [pc, #396]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 800523e:	f023 0301 	bic.w	r3, r3, #1
 8005242:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005246:	f7fd f867 	bl	8002318 <HAL_GetTick>
 800524a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800524c:	e008      	b.n	8005260 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800524e:	f7fd f863 	bl	8002318 <HAL_GetTick>
 8005252:	4602      	mov	r2, r0
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	1ad3      	subs	r3, r2, r3
 8005258:	2b02      	cmp	r3, #2
 800525a:	d901      	bls.n	8005260 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800525c:	2303      	movs	r3, #3
 800525e:	e105      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005260:	4b5a      	ldr	r3, [pc, #360]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005262:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d1ef      	bne.n	800524e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005272:	2b00      	cmp	r3, #0
 8005274:	f000 80f9 	beq.w	800546a <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800527c:	2b02      	cmp	r3, #2
 800527e:	f040 80cf 	bne.w	8005420 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8005282:	4b52      	ldr	r3, [pc, #328]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005284:	68db      	ldr	r3, [r3, #12]
 8005286:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f003 0203 	and.w	r2, r3, #3
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005292:	429a      	cmp	r2, r3
 8005294:	d12c      	bne.n	80052f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005296:	697b      	ldr	r3, [r7, #20]
 8005298:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80052a0:	3b01      	subs	r3, #1
 80052a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80052a4:	429a      	cmp	r2, r3
 80052a6:	d123      	bne.n	80052f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052a8:	697b      	ldr	r3, [r7, #20]
 80052aa:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80052b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052b4:	429a      	cmp	r2, r3
 80052b6:	d11b      	bne.n	80052f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052b8:	697b      	ldr	r3, [r7, #20]
 80052ba:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80052c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80052c4:	429a      	cmp	r2, r3
 80052c6:	d113      	bne.n	80052f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052d2:	085b      	lsrs	r3, r3, #1
 80052d4:	3b01      	subs	r3, #1
 80052d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052d8:	429a      	cmp	r2, r3
 80052da:	d109      	bne.n	80052f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052dc:	697b      	ldr	r3, [r7, #20]
 80052de:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052e6:	085b      	lsrs	r3, r3, #1
 80052e8:	3b01      	subs	r3, #1
 80052ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d071      	beq.n	80053d4 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80052f0:	69bb      	ldr	r3, [r7, #24]
 80052f2:	2b0c      	cmp	r3, #12
 80052f4:	d068      	beq.n	80053c8 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80052f6:	4b35      	ldr	r3, [pc, #212]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d105      	bne.n	800530e <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8005302:	4b32      	ldr	r3, [pc, #200]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800530a:	2b00      	cmp	r3, #0
 800530c:	d001      	beq.n	8005312 <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 800530e:	2301      	movs	r3, #1
 8005310:	e0ac      	b.n	800546c <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8005312:	4b2e      	ldr	r3, [pc, #184]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	4a2d      	ldr	r2, [pc, #180]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005318:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800531c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800531e:	f7fc fffb 	bl	8002318 <HAL_GetTick>
 8005322:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005324:	e008      	b.n	8005338 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005326:	f7fc fff7 	bl	8002318 <HAL_GetTick>
 800532a:	4602      	mov	r2, r0
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	1ad3      	subs	r3, r2, r3
 8005330:	2b02      	cmp	r3, #2
 8005332:	d901      	bls.n	8005338 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8005334:	2303      	movs	r3, #3
 8005336:	e099      	b.n	800546c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005338:	4b24      	ldr	r3, [pc, #144]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005340:	2b00      	cmp	r3, #0
 8005342:	d1f0      	bne.n	8005326 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005344:	4b21      	ldr	r3, [pc, #132]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005346:	68da      	ldr	r2, [r3, #12]
 8005348:	4b21      	ldr	r3, [pc, #132]	@ (80053d0 <HAL_RCC_OscConfig+0x788>)
 800534a:	4013      	ands	r3, r2
 800534c:	687a      	ldr	r2, [r7, #4]
 800534e:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8005350:	687a      	ldr	r2, [r7, #4]
 8005352:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8005354:	3a01      	subs	r2, #1
 8005356:	0112      	lsls	r2, r2, #4
 8005358:	4311      	orrs	r1, r2
 800535a:	687a      	ldr	r2, [r7, #4]
 800535c:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800535e:	0212      	lsls	r2, r2, #8
 8005360:	4311      	orrs	r1, r2
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005366:	0852      	lsrs	r2, r2, #1
 8005368:	3a01      	subs	r2, #1
 800536a:	0552      	lsls	r2, r2, #21
 800536c:	4311      	orrs	r1, r2
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8005372:	0852      	lsrs	r2, r2, #1
 8005374:	3a01      	subs	r2, #1
 8005376:	0652      	lsls	r2, r2, #25
 8005378:	4311      	orrs	r1, r2
 800537a:	687a      	ldr	r2, [r7, #4]
 800537c:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 800537e:	06d2      	lsls	r2, r2, #27
 8005380:	430a      	orrs	r2, r1
 8005382:	4912      	ldr	r1, [pc, #72]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005384:	4313      	orrs	r3, r2
 8005386:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8005388:	4b10      	ldr	r3, [pc, #64]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	4a0f      	ldr	r2, [pc, #60]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 800538e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8005392:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8005394:	4b0d      	ldr	r3, [pc, #52]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 8005396:	68db      	ldr	r3, [r3, #12]
 8005398:	4a0c      	ldr	r2, [pc, #48]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 800539a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800539e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80053a0:	f7fc ffba 	bl	8002318 <HAL_GetTick>
 80053a4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053a6:	e008      	b.n	80053ba <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053a8:	f7fc ffb6 	bl	8002318 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	693b      	ldr	r3, [r7, #16]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b02      	cmp	r3, #2
 80053b4:	d901      	bls.n	80053ba <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e058      	b.n	800546c <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053ba:	4b04      	ldr	r3, [pc, #16]	@ (80053cc <HAL_RCC_OscConfig+0x784>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80053c6:	e050      	b.n	800546a <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80053c8:	2301      	movs	r3, #1
 80053ca:	e04f      	b.n	800546c <HAL_RCC_OscConfig+0x824>
 80053cc:	40021000 	.word	0x40021000
 80053d0:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d4:	4b27      	ldr	r3, [pc, #156]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d144      	bne.n	800546a <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80053e0:	4b24      	ldr	r3, [pc, #144]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	4a23      	ldr	r2, [pc, #140]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 80053e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053ea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053ec:	4b21      	ldr	r3, [pc, #132]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 80053ee:	68db      	ldr	r3, [r3, #12]
 80053f0:	4a20      	ldr	r2, [pc, #128]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 80053f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80053f6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80053f8:	f7fc ff8e 	bl	8002318 <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005400:	f7fc ff8a 	bl	8002318 <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e02c      	b.n	800546c <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005412:	4b18      	ldr	r3, [pc, #96]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0x7b8>
 800541e:	e024      	b.n	800546a <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	2b0c      	cmp	r3, #12
 8005424:	d01f      	beq.n	8005466 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005426:	4b13      	ldr	r3, [pc, #76]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a12      	ldr	r2, [pc, #72]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 800542c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fc ff71 	bl	8002318 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800543a:	f7fc ff6d 	bl	8002318 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e00f      	b.n	800546c <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800544c:	4b09      	ldr	r3, [pc, #36]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005458:	4b06      	ldr	r3, [pc, #24]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 800545a:	68da      	ldr	r2, [r3, #12]
 800545c:	4905      	ldr	r1, [pc, #20]	@ (8005474 <HAL_RCC_OscConfig+0x82c>)
 800545e:	4b06      	ldr	r3, [pc, #24]	@ (8005478 <HAL_RCC_OscConfig+0x830>)
 8005460:	4013      	ands	r3, r2
 8005462:	60cb      	str	r3, [r1, #12]
 8005464:	e001      	b.n	800546a <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8005466:	2301      	movs	r3, #1
 8005468:	e000      	b.n	800546c <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 800546a:	2300      	movs	r3, #0
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}
 8005474:	40021000 	.word	0x40021000
 8005478:	feeefffc 	.word	0xfeeefffc

0800547c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800547c:	b580      	push	{r7, lr}
 800547e:	b086      	sub	sp, #24
 8005480:	af00      	add	r7, sp, #0
 8005482:	6078      	str	r0, [r7, #4]
 8005484:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005486:	2300      	movs	r3, #0
 8005488:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2b00      	cmp	r3, #0
 800548e:	d101      	bne.n	8005494 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005490:	2301      	movs	r3, #1
 8005492:	e11d      	b.n	80056d0 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005494:	4b90      	ldr	r3, [pc, #576]	@ (80056d8 <HAL_RCC_ClockConfig+0x25c>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 030f 	and.w	r3, r3, #15
 800549c:	683a      	ldr	r2, [r7, #0]
 800549e:	429a      	cmp	r2, r3
 80054a0:	d910      	bls.n	80054c4 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a2:	4b8d      	ldr	r3, [pc, #564]	@ (80056d8 <HAL_RCC_ClockConfig+0x25c>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f023 020f 	bic.w	r2, r3, #15
 80054aa:	498b      	ldr	r1, [pc, #556]	@ (80056d8 <HAL_RCC_ClockConfig+0x25c>)
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	4313      	orrs	r3, r2
 80054b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054b2:	4b89      	ldr	r3, [pc, #548]	@ (80056d8 <HAL_RCC_ClockConfig+0x25c>)
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f003 030f 	and.w	r3, r3, #15
 80054ba:	683a      	ldr	r2, [r7, #0]
 80054bc:	429a      	cmp	r2, r3
 80054be:	d001      	beq.n	80054c4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80054c0:	2301      	movs	r3, #1
 80054c2:	e105      	b.n	80056d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d010      	beq.n	80054f2 <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	689a      	ldr	r2, [r3, #8]
 80054d4:	4b81      	ldr	r3, [pc, #516]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054dc:	429a      	cmp	r2, r3
 80054de:	d908      	bls.n	80054f2 <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80054e0:	4b7e      	ldr	r3, [pc, #504]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80054e2:	689b      	ldr	r3, [r3, #8]
 80054e4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	689b      	ldr	r3, [r3, #8]
 80054ec:	497b      	ldr	r1, [pc, #492]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80054ee:	4313      	orrs	r3, r2
 80054f0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f003 0301 	and.w	r3, r3, #1
 80054fa:	2b00      	cmp	r3, #0
 80054fc:	d079      	beq.n	80055f2 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	2b03      	cmp	r3, #3
 8005504:	d11e      	bne.n	8005544 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005506:	4b75      	ldr	r3, [pc, #468]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800550e:	2b00      	cmp	r3, #0
 8005510:	d101      	bne.n	8005516 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	e0dc      	b.n	80056d0 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8005516:	f000 fa09 	bl	800592c <RCC_GetSysClockFreqFromPLLSource>
 800551a:	4603      	mov	r3, r0
 800551c:	4a70      	ldr	r2, [pc, #448]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 800551e:	4293      	cmp	r3, r2
 8005520:	d946      	bls.n	80055b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005522:	4b6e      	ldr	r3, [pc, #440]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800552a:	2b00      	cmp	r3, #0
 800552c:	d140      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800552e:	4b6b      	ldr	r3, [pc, #428]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005530:	689b      	ldr	r3, [r3, #8]
 8005532:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005536:	4a69      	ldr	r2, [pc, #420]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005538:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800553c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800553e:	2380      	movs	r3, #128	@ 0x80
 8005540:	617b      	str	r3, [r7, #20]
 8005542:	e035      	b.n	80055b0 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2b02      	cmp	r3, #2
 800554a:	d107      	bne.n	800555c <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800554c:	4b63      	ldr	r3, [pc, #396]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005554:	2b00      	cmp	r3, #0
 8005556:	d115      	bne.n	8005584 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005558:	2301      	movs	r3, #1
 800555a:	e0b9      	b.n	80056d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	685b      	ldr	r3, [r3, #4]
 8005560:	2b00      	cmp	r3, #0
 8005562:	d107      	bne.n	8005574 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005564:	4b5d      	ldr	r3, [pc, #372]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 0302 	and.w	r3, r3, #2
 800556c:	2b00      	cmp	r3, #0
 800556e:	d109      	bne.n	8005584 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005570:	2301      	movs	r3, #1
 8005572:	e0ad      	b.n	80056d0 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005574:	4b59      	ldr	r3, [pc, #356]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800557c:	2b00      	cmp	r3, #0
 800557e:	d101      	bne.n	8005584 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8005580:	2301      	movs	r3, #1
 8005582:	e0a5      	b.n	80056d0 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8005584:	f000 f8b4 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 8005588:	4603      	mov	r3, r0
 800558a:	4a55      	ldr	r2, [pc, #340]	@ (80056e0 <HAL_RCC_ClockConfig+0x264>)
 800558c:	4293      	cmp	r3, r2
 800558e:	d90f      	bls.n	80055b0 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8005590:	4b52      	ldr	r3, [pc, #328]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005598:	2b00      	cmp	r3, #0
 800559a:	d109      	bne.n	80055b0 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800559c:	4b4f      	ldr	r3, [pc, #316]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 800559e:	689b      	ldr	r3, [r3, #8]
 80055a0:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80055a4:	4a4d      	ldr	r2, [pc, #308]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80055a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055aa:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80055ac:	2380      	movs	r3, #128	@ 0x80
 80055ae:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055b0:	4b4a      	ldr	r3, [pc, #296]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80055b2:	689b      	ldr	r3, [r3, #8]
 80055b4:	f023 0203 	bic.w	r2, r3, #3
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	685b      	ldr	r3, [r3, #4]
 80055bc:	4947      	ldr	r1, [pc, #284]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80055be:	4313      	orrs	r3, r2
 80055c0:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055c2:	f7fc fea9 	bl	8002318 <HAL_GetTick>
 80055c6:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055c8:	e00a      	b.n	80055e0 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055ca:	f7fc fea5 	bl	8002318 <HAL_GetTick>
 80055ce:	4602      	mov	r2, r0
 80055d0:	693b      	ldr	r3, [r7, #16]
 80055d2:	1ad3      	subs	r3, r2, r3
 80055d4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80055d8:	4293      	cmp	r3, r2
 80055da:	d901      	bls.n	80055e0 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 80055dc:	2303      	movs	r3, #3
 80055de:	e077      	b.n	80056d0 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e0:	4b3e      	ldr	r3, [pc, #248]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80055e2:	689b      	ldr	r3, [r3, #8]
 80055e4:	f003 020c 	and.w	r2, r3, #12
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	685b      	ldr	r3, [r3, #4]
 80055ec:	009b      	lsls	r3, r3, #2
 80055ee:	429a      	cmp	r2, r3
 80055f0:	d1eb      	bne.n	80055ca <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2b80      	cmp	r3, #128	@ 0x80
 80055f6:	d105      	bne.n	8005604 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80055f8:	4b38      	ldr	r3, [pc, #224]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80055fa:	689b      	ldr	r3, [r3, #8]
 80055fc:	4a37      	ldr	r2, [pc, #220]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80055fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005602:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f003 0302 	and.w	r3, r3, #2
 800560c:	2b00      	cmp	r3, #0
 800560e:	d010      	beq.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	689a      	ldr	r2, [r3, #8]
 8005614:	4b31      	ldr	r3, [pc, #196]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005616:	689b      	ldr	r3, [r3, #8]
 8005618:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800561c:	429a      	cmp	r2, r3
 800561e:	d208      	bcs.n	8005632 <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005620:	4b2e      	ldr	r3, [pc, #184]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005622:	689b      	ldr	r3, [r3, #8]
 8005624:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	492b      	ldr	r1, [pc, #172]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 800562e:	4313      	orrs	r3, r2
 8005630:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005632:	4b29      	ldr	r3, [pc, #164]	@ (80056d8 <HAL_RCC_ClockConfig+0x25c>)
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	f003 030f 	and.w	r3, r3, #15
 800563a:	683a      	ldr	r2, [r7, #0]
 800563c:	429a      	cmp	r2, r3
 800563e:	d210      	bcs.n	8005662 <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005640:	4b25      	ldr	r3, [pc, #148]	@ (80056d8 <HAL_RCC_ClockConfig+0x25c>)
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f023 020f 	bic.w	r2, r3, #15
 8005648:	4923      	ldr	r1, [pc, #140]	@ (80056d8 <HAL_RCC_ClockConfig+0x25c>)
 800564a:	683b      	ldr	r3, [r7, #0]
 800564c:	4313      	orrs	r3, r2
 800564e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005650:	4b21      	ldr	r3, [pc, #132]	@ (80056d8 <HAL_RCC_ClockConfig+0x25c>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f003 030f 	and.w	r3, r3, #15
 8005658:	683a      	ldr	r2, [r7, #0]
 800565a:	429a      	cmp	r2, r3
 800565c:	d001      	beq.n	8005662 <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800565e:	2301      	movs	r3, #1
 8005660:	e036      	b.n	80056d0 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f003 0304 	and.w	r3, r3, #4
 800566a:	2b00      	cmp	r3, #0
 800566c:	d008      	beq.n	8005680 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800566e:	4b1b      	ldr	r3, [pc, #108]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	68db      	ldr	r3, [r3, #12]
 800567a:	4918      	ldr	r1, [pc, #96]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 800567c:	4313      	orrs	r3, r2
 800567e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0308 	and.w	r3, r3, #8
 8005688:	2b00      	cmp	r3, #0
 800568a:	d009      	beq.n	80056a0 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800568c:	4b13      	ldr	r3, [pc, #76]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 800568e:	689b      	ldr	r3, [r3, #8]
 8005690:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	691b      	ldr	r3, [r3, #16]
 8005698:	00db      	lsls	r3, r3, #3
 800569a:	4910      	ldr	r1, [pc, #64]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 800569c:	4313      	orrs	r3, r2
 800569e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056a0:	f000 f826 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 80056a4:	4602      	mov	r2, r0
 80056a6:	4b0d      	ldr	r3, [pc, #52]	@ (80056dc <HAL_RCC_ClockConfig+0x260>)
 80056a8:	689b      	ldr	r3, [r3, #8]
 80056aa:	091b      	lsrs	r3, r3, #4
 80056ac:	f003 030f 	and.w	r3, r3, #15
 80056b0:	490c      	ldr	r1, [pc, #48]	@ (80056e4 <HAL_RCC_ClockConfig+0x268>)
 80056b2:	5ccb      	ldrb	r3, [r1, r3]
 80056b4:	f003 031f 	and.w	r3, r3, #31
 80056b8:	fa22 f303 	lsr.w	r3, r2, r3
 80056bc:	4a0a      	ldr	r2, [pc, #40]	@ (80056e8 <HAL_RCC_ClockConfig+0x26c>)
 80056be:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80056c0:	4b0a      	ldr	r3, [pc, #40]	@ (80056ec <HAL_RCC_ClockConfig+0x270>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	4618      	mov	r0, r3
 80056c6:	f7fc fdd7 	bl	8002278 <HAL_InitTick>
 80056ca:	4603      	mov	r3, r0
 80056cc:	73fb      	strb	r3, [r7, #15]

  return status;
 80056ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80056d0:	4618      	mov	r0, r3
 80056d2:	3718      	adds	r7, #24
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	40022000 	.word	0x40022000
 80056dc:	40021000 	.word	0x40021000
 80056e0:	04c4b400 	.word	0x04c4b400
 80056e4:	0800b048 	.word	0x0800b048
 80056e8:	20000004 	.word	0x20000004
 80056ec:	20000008 	.word	0x20000008

080056f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b089      	sub	sp, #36	@ 0x24
 80056f4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80056f6:	2300      	movs	r3, #0
 80056f8:	61fb      	str	r3, [r7, #28]
 80056fa:	2300      	movs	r3, #0
 80056fc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056fe:	4b3e      	ldr	r3, [pc, #248]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005700:	689b      	ldr	r3, [r3, #8]
 8005702:	f003 030c 	and.w	r3, r3, #12
 8005706:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005708:	4b3b      	ldr	r3, [pc, #236]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 800570a:	68db      	ldr	r3, [r3, #12]
 800570c:	f003 0303 	and.w	r3, r3, #3
 8005710:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d005      	beq.n	8005724 <HAL_RCC_GetSysClockFreq+0x34>
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	2b0c      	cmp	r3, #12
 800571c:	d121      	bne.n	8005762 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2b01      	cmp	r3, #1
 8005722:	d11e      	bne.n	8005762 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005724:	4b34      	ldr	r3, [pc, #208]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	f003 0308 	and.w	r3, r3, #8
 800572c:	2b00      	cmp	r3, #0
 800572e:	d107      	bne.n	8005740 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005730:	4b31      	ldr	r3, [pc, #196]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005732:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005736:	0a1b      	lsrs	r3, r3, #8
 8005738:	f003 030f 	and.w	r3, r3, #15
 800573c:	61fb      	str	r3, [r7, #28]
 800573e:	e005      	b.n	800574c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005740:	4b2d      	ldr	r3, [pc, #180]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	091b      	lsrs	r3, r3, #4
 8005746:	f003 030f 	and.w	r3, r3, #15
 800574a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800574c:	4a2b      	ldr	r2, [pc, #172]	@ (80057fc <HAL_RCC_GetSysClockFreq+0x10c>)
 800574e:	69fb      	ldr	r3, [r7, #28]
 8005750:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005754:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005756:	693b      	ldr	r3, [r7, #16]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d10d      	bne.n	8005778 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800575c:	69fb      	ldr	r3, [r7, #28]
 800575e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005760:	e00a      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005762:	693b      	ldr	r3, [r7, #16]
 8005764:	2b04      	cmp	r3, #4
 8005766:	d102      	bne.n	800576e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005768:	4b25      	ldr	r3, [pc, #148]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x110>)
 800576a:	61bb      	str	r3, [r7, #24]
 800576c:	e004      	b.n	8005778 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800576e:	693b      	ldr	r3, [r7, #16]
 8005770:	2b08      	cmp	r3, #8
 8005772:	d101      	bne.n	8005778 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005774:	4b23      	ldr	r3, [pc, #140]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x114>)
 8005776:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005778:	693b      	ldr	r3, [r7, #16]
 800577a:	2b0c      	cmp	r3, #12
 800577c:	d134      	bne.n	80057e8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800577e:	4b1e      	ldr	r3, [pc, #120]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 8005780:	68db      	ldr	r3, [r3, #12]
 8005782:	f003 0303 	and.w	r3, r3, #3
 8005786:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005788:	68bb      	ldr	r3, [r7, #8]
 800578a:	2b02      	cmp	r3, #2
 800578c:	d003      	beq.n	8005796 <HAL_RCC_GetSysClockFreq+0xa6>
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	2b03      	cmp	r3, #3
 8005792:	d003      	beq.n	800579c <HAL_RCC_GetSysClockFreq+0xac>
 8005794:	e005      	b.n	80057a2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8005796:	4b1a      	ldr	r3, [pc, #104]	@ (8005800 <HAL_RCC_GetSysClockFreq+0x110>)
 8005798:	617b      	str	r3, [r7, #20]
      break;
 800579a:	e005      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800579c:	4b19      	ldr	r3, [pc, #100]	@ (8005804 <HAL_RCC_GetSysClockFreq+0x114>)
 800579e:	617b      	str	r3, [r7, #20]
      break;
 80057a0:	e002      	b.n	80057a8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80057a2:	69fb      	ldr	r3, [r7, #28]
 80057a4:	617b      	str	r3, [r7, #20]
      break;
 80057a6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80057a8:	4b13      	ldr	r3, [pc, #76]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	091b      	lsrs	r3, r3, #4
 80057ae:	f003 030f 	and.w	r3, r3, #15
 80057b2:	3301      	adds	r3, #1
 80057b4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80057b6:	4b10      	ldr	r3, [pc, #64]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057b8:	68db      	ldr	r3, [r3, #12]
 80057ba:	0a1b      	lsrs	r3, r3, #8
 80057bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80057c0:	697a      	ldr	r2, [r7, #20]
 80057c2:	fb03 f202 	mul.w	r2, r3, r2
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057cc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057ce:	4b0a      	ldr	r3, [pc, #40]	@ (80057f8 <HAL_RCC_GetSysClockFreq+0x108>)
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	0e5b      	lsrs	r3, r3, #25
 80057d4:	f003 0303 	and.w	r3, r3, #3
 80057d8:	3301      	adds	r3, #1
 80057da:	005b      	lsls	r3, r3, #1
 80057dc:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80057de:	697a      	ldr	r2, [r7, #20]
 80057e0:	683b      	ldr	r3, [r7, #0]
 80057e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80057e6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80057e8:	69bb      	ldr	r3, [r7, #24]
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3724      	adds	r7, #36	@ 0x24
 80057ee:	46bd      	mov	sp, r7
 80057f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	40021000 	.word	0x40021000
 80057fc:	0800b060 	.word	0x0800b060
 8005800:	00f42400 	.word	0x00f42400
 8005804:	007a1200 	.word	0x007a1200

08005808 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005808:	b480      	push	{r7}
 800580a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800580c:	4b03      	ldr	r3, [pc, #12]	@ (800581c <HAL_RCC_GetHCLKFreq+0x14>)
 800580e:	681b      	ldr	r3, [r3, #0]
}
 8005810:	4618      	mov	r0, r3
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr
 800581a:	bf00      	nop
 800581c:	20000004 	.word	0x20000004

08005820 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005824:	f7ff fff0 	bl	8005808 <HAL_RCC_GetHCLKFreq>
 8005828:	4602      	mov	r2, r0
 800582a:	4b06      	ldr	r3, [pc, #24]	@ (8005844 <HAL_RCC_GetPCLK1Freq+0x24>)
 800582c:	689b      	ldr	r3, [r3, #8]
 800582e:	0a1b      	lsrs	r3, r3, #8
 8005830:	f003 0307 	and.w	r3, r3, #7
 8005834:	4904      	ldr	r1, [pc, #16]	@ (8005848 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005836:	5ccb      	ldrb	r3, [r1, r3]
 8005838:	f003 031f 	and.w	r3, r3, #31
 800583c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005840:	4618      	mov	r0, r3
 8005842:	bd80      	pop	{r7, pc}
 8005844:	40021000 	.word	0x40021000
 8005848:	0800b058 	.word	0x0800b058

0800584c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800584c:	b580      	push	{r7, lr}
 800584e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005850:	f7ff ffda 	bl	8005808 <HAL_RCC_GetHCLKFreq>
 8005854:	4602      	mov	r2, r0
 8005856:	4b06      	ldr	r3, [pc, #24]	@ (8005870 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005858:	689b      	ldr	r3, [r3, #8]
 800585a:	0adb      	lsrs	r3, r3, #11
 800585c:	f003 0307 	and.w	r3, r3, #7
 8005860:	4904      	ldr	r1, [pc, #16]	@ (8005874 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005862:	5ccb      	ldrb	r3, [r1, r3]
 8005864:	f003 031f 	and.w	r3, r3, #31
 8005868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800586c:	4618      	mov	r0, r3
 800586e:	bd80      	pop	{r7, pc}
 8005870:	40021000 	.word	0x40021000
 8005874:	0800b058 	.word	0x0800b058

08005878 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b086      	sub	sp, #24
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8005880:	2300      	movs	r3, #0
 8005882:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005884:	4b27      	ldr	r3, [pc, #156]	@ (8005924 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8005886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800588c:	2b00      	cmp	r3, #0
 800588e:	d003      	beq.n	8005898 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005890:	f7ff f906 	bl	8004aa0 <HAL_PWREx_GetVoltageRange>
 8005894:	6178      	str	r0, [r7, #20]
 8005896:	e014      	b.n	80058c2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8005898:	4b22      	ldr	r3, [pc, #136]	@ (8005924 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800589a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800589c:	4a21      	ldr	r2, [pc, #132]	@ (8005924 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800589e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80058a2:	6593      	str	r3, [r2, #88]	@ 0x58
 80058a4:	4b1f      	ldr	r3, [pc, #124]	@ (8005924 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80058a6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80058ac:	60fb      	str	r3, [r7, #12]
 80058ae:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80058b0:	f7ff f8f6 	bl	8004aa0 <HAL_PWREx_GetVoltageRange>
 80058b4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80058b6:	4b1b      	ldr	r3, [pc, #108]	@ (8005924 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80058b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80058ba:	4a1a      	ldr	r2, [pc, #104]	@ (8005924 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 80058bc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80058c0:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80058c2:	697b      	ldr	r3, [r7, #20]
 80058c4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80058c8:	d10b      	bne.n	80058e2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b80      	cmp	r3, #128	@ 0x80
 80058ce:	d913      	bls.n	80058f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2ba0      	cmp	r3, #160	@ 0xa0
 80058d4:	d902      	bls.n	80058dc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80058d6:	2302      	movs	r3, #2
 80058d8:	613b      	str	r3, [r7, #16]
 80058da:	e00d      	b.n	80058f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058dc:	2301      	movs	r3, #1
 80058de:	613b      	str	r3, [r7, #16]
 80058e0:	e00a      	b.n	80058f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	2b7f      	cmp	r3, #127	@ 0x7f
 80058e6:	d902      	bls.n	80058ee <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80058e8:	2302      	movs	r3, #2
 80058ea:	613b      	str	r3, [r7, #16]
 80058ec:	e004      	b.n	80058f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	2b70      	cmp	r3, #112	@ 0x70
 80058f2:	d101      	bne.n	80058f8 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80058f4:	2301      	movs	r3, #1
 80058f6:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80058f8:	4b0b      	ldr	r3, [pc, #44]	@ (8005928 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f023 020f 	bic.w	r2, r3, #15
 8005900:	4909      	ldr	r1, [pc, #36]	@ (8005928 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	4313      	orrs	r3, r2
 8005906:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005908:	4b07      	ldr	r3, [pc, #28]	@ (8005928 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f003 030f 	and.w	r3, r3, #15
 8005910:	693a      	ldr	r2, [r7, #16]
 8005912:	429a      	cmp	r2, r3
 8005914:	d001      	beq.n	800591a <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 800591a:	2300      	movs	r3, #0
}
 800591c:	4618      	mov	r0, r3
 800591e:	3718      	adds	r7, #24
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	40021000 	.word	0x40021000
 8005928:	40022000 	.word	0x40022000

0800592c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800592c:	b480      	push	{r7}
 800592e:	b087      	sub	sp, #28
 8005930:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005932:	4b2d      	ldr	r3, [pc, #180]	@ (80059e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005934:	68db      	ldr	r3, [r3, #12]
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2b03      	cmp	r3, #3
 8005940:	d00b      	beq.n	800595a <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	2b03      	cmp	r3, #3
 8005946:	d825      	bhi.n	8005994 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d008      	beq.n	8005960 <RCC_GetSysClockFreqFromPLLSource+0x34>
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2b02      	cmp	r3, #2
 8005952:	d11f      	bne.n	8005994 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8005954:	4b25      	ldr	r3, [pc, #148]	@ (80059ec <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8005956:	613b      	str	r3, [r7, #16]
    break;
 8005958:	e01f      	b.n	800599a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 800595a:	4b25      	ldr	r3, [pc, #148]	@ (80059f0 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 800595c:	613b      	str	r3, [r7, #16]
    break;
 800595e:	e01c      	b.n	800599a <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005960:	4b21      	ldr	r3, [pc, #132]	@ (80059e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	f003 0308 	and.w	r3, r3, #8
 8005968:	2b00      	cmp	r3, #0
 800596a:	d107      	bne.n	800597c <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800596c:	4b1e      	ldr	r3, [pc, #120]	@ (80059e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800596e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005972:	0a1b      	lsrs	r3, r3, #8
 8005974:	f003 030f 	and.w	r3, r3, #15
 8005978:	617b      	str	r3, [r7, #20]
 800597a:	e005      	b.n	8005988 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800597c:	4b1a      	ldr	r3, [pc, #104]	@ (80059e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	091b      	lsrs	r3, r3, #4
 8005982:	f003 030f 	and.w	r3, r3, #15
 8005986:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8005988:	4a1a      	ldr	r2, [pc, #104]	@ (80059f4 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005990:	613b      	str	r3, [r7, #16]
    break;
 8005992:	e002      	b.n	800599a <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]
    break;
 8005998:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800599a:	4b13      	ldr	r3, [pc, #76]	@ (80059e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	091b      	lsrs	r3, r3, #4
 80059a0:	f003 030f 	and.w	r3, r3, #15
 80059a4:	3301      	adds	r3, #1
 80059a6:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80059a8:	4b0f      	ldr	r3, [pc, #60]	@ (80059e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059aa:	68db      	ldr	r3, [r3, #12]
 80059ac:	0a1b      	lsrs	r3, r3, #8
 80059ae:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80059b2:	693a      	ldr	r2, [r7, #16]
 80059b4:	fb03 f202 	mul.w	r2, r3, r2
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80059be:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80059c0:	4b09      	ldr	r3, [pc, #36]	@ (80059e8 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 80059c2:	68db      	ldr	r3, [r3, #12]
 80059c4:	0e5b      	lsrs	r3, r3, #25
 80059c6:	f003 0303 	and.w	r3, r3, #3
 80059ca:	3301      	adds	r3, #1
 80059cc:	005b      	lsls	r3, r3, #1
 80059ce:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80059d0:	693a      	ldr	r2, [r7, #16]
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059d8:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80059da:	683b      	ldr	r3, [r7, #0]
}
 80059dc:	4618      	mov	r0, r3
 80059de:	371c      	adds	r7, #28
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr
 80059e8:	40021000 	.word	0x40021000
 80059ec:	00f42400 	.word	0x00f42400
 80059f0:	007a1200 	.word	0x007a1200
 80059f4:	0800b060 	.word	0x0800b060

080059f8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80059f8:	b580      	push	{r7, lr}
 80059fa:	b086      	sub	sp, #24
 80059fc:	af00      	add	r7, sp, #0
 80059fe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005a00:	2300      	movs	r3, #0
 8005a02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005a04:	2300      	movs	r3, #0
 8005a06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d040      	beq.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a18:	2b80      	cmp	r3, #128	@ 0x80
 8005a1a:	d02a      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a1c:	2b80      	cmp	r3, #128	@ 0x80
 8005a1e:	d825      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005a20:	2b60      	cmp	r3, #96	@ 0x60
 8005a22:	d026      	beq.n	8005a72 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8005a24:	2b60      	cmp	r3, #96	@ 0x60
 8005a26:	d821      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005a28:	2b40      	cmp	r3, #64	@ 0x40
 8005a2a:	d006      	beq.n	8005a3a <HAL_RCCEx_PeriphCLKConfig+0x42>
 8005a2c:	2b40      	cmp	r3, #64	@ 0x40
 8005a2e:	d81d      	bhi.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d009      	beq.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8005a34:	2b20      	cmp	r3, #32
 8005a36:	d010      	beq.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x62>
 8005a38:	e018      	b.n	8005a6c <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005a3a:	4b89      	ldr	r3, [pc, #548]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	4a88      	ldr	r2, [pc, #544]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a40:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005a44:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a46:	e015      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	3304      	adds	r3, #4
 8005a4c:	2100      	movs	r1, #0
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f000 fb02 	bl	8006058 <RCCEx_PLLSAI1_Config>
 8005a54:	4603      	mov	r3, r0
 8005a56:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a58:	e00c      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	3320      	adds	r3, #32
 8005a5e:	2100      	movs	r1, #0
 8005a60:	4618      	mov	r0, r3
 8005a62:	f000 fbed 	bl	8006240 <RCCEx_PLLSAI2_Config>
 8005a66:	4603      	mov	r3, r0
 8005a68:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8005a6a:	e003      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	74fb      	strb	r3, [r7, #19]
      break;
 8005a70:	e000      	b.n	8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 8005a72:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005a74:	7cfb      	ldrb	r3, [r7, #19]
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10b      	bne.n	8005a92 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a7a:	4b79      	ldr	r3, [pc, #484]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a7c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005a80:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005a88:	4975      	ldr	r1, [pc, #468]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005a90:	e001      	b.n	8005a96 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005a92:	7cfb      	ldrb	r3, [r7, #19]
 8005a94:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d047      	beq.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005aa6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005aaa:	d030      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005aac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ab0:	d82a      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005ab2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005ab6:	d02a      	beq.n	8005b0e <HAL_RCCEx_PeriphCLKConfig+0x116>
 8005ab8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8005abc:	d824      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005abe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac2:	d008      	beq.n	8005ad6 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8005ac4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005ac8:	d81e      	bhi.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d00a      	beq.n	8005ae4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8005ace:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005ad2:	d010      	beq.n	8005af6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8005ad4:	e018      	b.n	8005b08 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ad6:	4b62      	ldr	r3, [pc, #392]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005ad8:	68db      	ldr	r3, [r3, #12]
 8005ada:	4a61      	ldr	r2, [pc, #388]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005adc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005ae0:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005ae2:	e015      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	3304      	adds	r3, #4
 8005ae8:	2100      	movs	r1, #0
 8005aea:	4618      	mov	r0, r3
 8005aec:	f000 fab4 	bl	8006058 <RCCEx_PLLSAI1_Config>
 8005af0:	4603      	mov	r3, r0
 8005af2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005af4:	e00c      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	3320      	adds	r3, #32
 8005afa:	2100      	movs	r1, #0
 8005afc:	4618      	mov	r0, r3
 8005afe:	f000 fb9f 	bl	8006240 <RCCEx_PLLSAI2_Config>
 8005b02:	4603      	mov	r3, r0
 8005b04:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8005b06:	e003      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8005b08:	2301      	movs	r3, #1
 8005b0a:	74fb      	strb	r3, [r7, #19]
      break;
 8005b0c:	e000      	b.n	8005b10 <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 8005b0e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8005b10:	7cfb      	ldrb	r3, [r7, #19]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d10b      	bne.n	8005b2e <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005b16:	4b52      	ldr	r3, [pc, #328]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005b1c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b24:	494e      	ldr	r1, [pc, #312]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b26:	4313      	orrs	r3, r2
 8005b28:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 8005b2c:	e001      	b.n	8005b32 <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005b2e:	7cfb      	ldrb	r3, [r7, #19]
 8005b30:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	f000 809f 	beq.w	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005b40:	2300      	movs	r3, #0
 8005b42:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005b44:	4b46      	ldr	r3, [pc, #280]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d101      	bne.n	8005b54 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 8005b50:	2301      	movs	r3, #1
 8005b52:	e000      	b.n	8005b56 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8005b54:	2300      	movs	r3, #0
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00d      	beq.n	8005b76 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005b5a:	4b41      	ldr	r3, [pc, #260]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b5c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b5e:	4a40      	ldr	r2, [pc, #256]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b60:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005b64:	6593      	str	r3, [r2, #88]	@ 0x58
 8005b66:	4b3e      	ldr	r3, [pc, #248]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005b68:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005b6a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005b6e:	60bb      	str	r3, [r7, #8]
 8005b70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005b72:	2301      	movs	r3, #1
 8005b74:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005b76:	4b3b      	ldr	r3, [pc, #236]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	4a3a      	ldr	r2, [pc, #232]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005b7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005b80:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005b82:	f7fc fbc9 	bl	8002318 <HAL_GetTick>
 8005b86:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b88:	e009      	b.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005b8a:	f7fc fbc5 	bl	8002318 <HAL_GetTick>
 8005b8e:	4602      	mov	r2, r0
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	2b02      	cmp	r3, #2
 8005b96:	d902      	bls.n	8005b9e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8005b98:	2303      	movs	r3, #3
 8005b9a:	74fb      	strb	r3, [r7, #19]
        break;
 8005b9c:	e005      	b.n	8005baa <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8005b9e:	4b31      	ldr	r3, [pc, #196]	@ (8005c64 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ba6:	2b00      	cmp	r3, #0
 8005ba8:	d0ef      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8005baa:	7cfb      	ldrb	r3, [r7, #19]
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	d15b      	bne.n	8005c68 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005bb0:	4b2b      	ldr	r3, [pc, #172]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bb2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005bba:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	d01f      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bc8:	697a      	ldr	r2, [r7, #20]
 8005bca:	429a      	cmp	r2, r3
 8005bcc:	d019      	beq.n	8005c02 <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005bce:	4b24      	ldr	r3, [pc, #144]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bd4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005bd8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005bda:	4b21      	ldr	r3, [pc, #132]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005be0:	4a1f      	ldr	r2, [pc, #124]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005be2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005be6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005bea:	4b1d      	ldr	r3, [pc, #116]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bec:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005bf0:	4a1b      	ldr	r2, [pc, #108]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bf2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005bf6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005bfa:	4a19      	ldr	r2, [pc, #100]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005bfc:	697b      	ldr	r3, [r7, #20]
 8005bfe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	f003 0301 	and.w	r3, r3, #1
 8005c08:	2b00      	cmp	r3, #0
 8005c0a:	d016      	beq.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c0c:	f7fc fb84 	bl	8002318 <HAL_GetTick>
 8005c10:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c12:	e00b      	b.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005c14:	f7fc fb80 	bl	8002318 <HAL_GetTick>
 8005c18:	4602      	mov	r2, r0
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1ad3      	subs	r3, r2, r3
 8005c1e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c22:	4293      	cmp	r3, r2
 8005c24:	d902      	bls.n	8005c2c <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	74fb      	strb	r3, [r7, #19]
            break;
 8005c2a:	e006      	b.n	8005c3a <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005c2c:	4b0c      	ldr	r3, [pc, #48]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c32:	f003 0302 	and.w	r3, r3, #2
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d0ec      	beq.n	8005c14 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8005c3a:	7cfb      	ldrb	r3, [r7, #19]
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10c      	bne.n	8005c5a <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005c40:	4b07      	ldr	r3, [pc, #28]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c46:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005c50:	4903      	ldr	r1, [pc, #12]	@ (8005c60 <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8005c52:	4313      	orrs	r3, r2
 8005c54:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8005c58:	e008      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005c5a:	7cfb      	ldrb	r3, [r7, #19]
 8005c5c:	74bb      	strb	r3, [r7, #18]
 8005c5e:	e005      	b.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x274>
 8005c60:	40021000 	.word	0x40021000
 8005c64:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005c68:	7cfb      	ldrb	r3, [r7, #19]
 8005c6a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005c6c:	7c7b      	ldrb	r3, [r7, #17]
 8005c6e:	2b01      	cmp	r3, #1
 8005c70:	d105      	bne.n	8005c7e <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005c72:	4ba0      	ldr	r3, [pc, #640]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c74:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005c76:	4a9f      	ldr	r2, [pc, #636]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c78:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005c7c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 0301 	and.w	r3, r3, #1
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d00a      	beq.n	8005ca0 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005c8a:	4b9a      	ldr	r3, [pc, #616]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c8c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005c90:	f023 0203 	bic.w	r2, r3, #3
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c98:	4996      	ldr	r1, [pc, #600]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005c9a:	4313      	orrs	r3, r2
 8005c9c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f003 0302 	and.w	r3, r3, #2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d00a      	beq.n	8005cc2 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005cac:	4b91      	ldr	r3, [pc, #580]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cb2:	f023 020c 	bic.w	r2, r3, #12
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cba:	498e      	ldr	r1, [pc, #568]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0304 	and.w	r3, r3, #4
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d00a      	beq.n	8005ce4 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005cce:	4b89      	ldr	r3, [pc, #548]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cd4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005cdc:	4985      	ldr	r1, [pc, #532]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cde:	4313      	orrs	r3, r2
 8005ce0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f003 0308 	and.w	r3, r3, #8
 8005cec:	2b00      	cmp	r3, #0
 8005cee:	d00a      	beq.n	8005d06 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005cf0:	4b80      	ldr	r3, [pc, #512]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005cf6:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005cfe:	497d      	ldr	r1, [pc, #500]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d00:	4313      	orrs	r3, r2
 8005d02:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	f003 0310 	and.w	r3, r3, #16
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d00a      	beq.n	8005d28 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005d12:	4b78      	ldr	r3, [pc, #480]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d18:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d20:	4974      	ldr	r1, [pc, #464]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d22:	4313      	orrs	r3, r2
 8005d24:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f003 0320 	and.w	r3, r3, #32
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d00a      	beq.n	8005d4a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005d34:	4b6f      	ldr	r3, [pc, #444]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d3a:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d42:	496c      	ldr	r1, [pc, #432]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d44:	4313      	orrs	r3, r2
 8005d46:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00a      	beq.n	8005d6c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005d56:	4b67      	ldr	r3, [pc, #412]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d58:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d5c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8005d64:	4963      	ldr	r1, [pc, #396]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d66:	4313      	orrs	r3, r2
 8005d68:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d00a      	beq.n	8005d8e <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005d78:	4b5e      	ldr	r3, [pc, #376]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005d7e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005d86:	495b      	ldr	r1, [pc, #364]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d88:	4313      	orrs	r3, r2
 8005d8a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00a      	beq.n	8005db0 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005d9a:	4b56      	ldr	r3, [pc, #344]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005d9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005da0:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8005da8:	4952      	ldr	r1, [pc, #328]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005daa:	4313      	orrs	r3, r2
 8005dac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d00a      	beq.n	8005dd2 <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005dbc:	4b4d      	ldr	r3, [pc, #308]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005dc2:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005dca:	494a      	ldr	r1, [pc, #296]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dcc:	4313      	orrs	r3, r2
 8005dce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d00a      	beq.n	8005df4 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005dde:	4b45      	ldr	r3, [pc, #276]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005de0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005de4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8005dec:	4941      	ldr	r1, [pc, #260]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005dee:	4313      	orrs	r3, r2
 8005df0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d00a      	beq.n	8005e16 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005e00:	4b3c      	ldr	r3, [pc, #240]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e02:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e06:	f023 0203 	bic.w	r2, r3, #3
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005e0e:	4939      	ldr	r1, [pc, #228]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e10:	4313      	orrs	r3, r2
 8005e12:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d028      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005e22:	4b34      	ldr	r3, [pc, #208]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005e28:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e30:	4930      	ldr	r1, [pc, #192]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e32:	4313      	orrs	r3, r2
 8005e34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e3c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005e40:	d106      	bne.n	8005e50 <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005e42:	4b2c      	ldr	r3, [pc, #176]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e44:	68db      	ldr	r3, [r3, #12]
 8005e46:	4a2b      	ldr	r2, [pc, #172]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e48:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005e4c:	60d3      	str	r3, [r2, #12]
 8005e4e:	e011      	b.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e54:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005e58:	d10c      	bne.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	3304      	adds	r3, #4
 8005e5e:	2101      	movs	r1, #1
 8005e60:	4618      	mov	r0, r3
 8005e62:	f000 f8f9 	bl	8006058 <RCCEx_PLLSAI1_Config>
 8005e66:	4603      	mov	r3, r0
 8005e68:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8005e6a:	7cfb      	ldrb	r3, [r7, #19]
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d001      	beq.n	8005e74 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 8005e70:	7cfb      	ldrb	r3, [r7, #19]
 8005e72:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d04d      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005e84:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005e88:	d108      	bne.n	8005e9c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8005e8a:	4b1a      	ldr	r3, [pc, #104]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e8c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005e90:	4a18      	ldr	r2, [pc, #96]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e92:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005e96:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005e9a:	e012      	b.n	8005ec2 <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8005e9c:	4b15      	ldr	r3, [pc, #84]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005e9e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ea2:	4a14      	ldr	r2, [pc, #80]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ea4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ea8:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8005eac:	4b11      	ldr	r3, [pc, #68]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005eb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005eba:	490e      	ldr	r1, [pc, #56]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ebc:	4313      	orrs	r3, r2
 8005ebe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ec6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005eca:	d106      	bne.n	8005eda <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005ecc:	4b09      	ldr	r3, [pc, #36]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ece:	68db      	ldr	r3, [r3, #12]
 8005ed0:	4a08      	ldr	r2, [pc, #32]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ed2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005ed6:	60d3      	str	r3, [r2, #12]
 8005ed8:	e020      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005ede:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ee2:	d109      	bne.n	8005ef8 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8005ee4:	4b03      	ldr	r3, [pc, #12]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	4a02      	ldr	r2, [pc, #8]	@ (8005ef4 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8005eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005eee:	60d3      	str	r3, [r2, #12]
 8005ef0:	e014      	b.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
 8005ef2:	bf00      	nop
 8005ef4:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8005efc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f00:	d10c      	bne.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	3304      	adds	r3, #4
 8005f06:	2101      	movs	r1, #1
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 f8a5 	bl	8006058 <RCCEx_PLLSAI1_Config>
 8005f0e:	4603      	mov	r3, r0
 8005f10:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f12:	7cfb      	ldrb	r3, [r7, #19]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d001      	beq.n	8005f1c <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 8005f18:	7cfb      	ldrb	r3, [r7, #19]
 8005f1a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d028      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005f28:	4b4a      	ldr	r3, [pc, #296]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f36:	4947      	ldr	r1, [pc, #284]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f38:	4313      	orrs	r3, r2
 8005f3a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f42:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005f46:	d106      	bne.n	8005f56 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005f48:	4b42      	ldr	r3, [pc, #264]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f4a:	68db      	ldr	r3, [r3, #12]
 8005f4c:	4a41      	ldr	r2, [pc, #260]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f4e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005f52:	60d3      	str	r3, [r2, #12]
 8005f54:	e011      	b.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005f5a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8005f5e:	d10c      	bne.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	3304      	adds	r3, #4
 8005f64:	2101      	movs	r1, #1
 8005f66:	4618      	mov	r0, r3
 8005f68:	f000 f876 	bl	8006058 <RCCEx_PLLSAI1_Config>
 8005f6c:	4603      	mov	r3, r0
 8005f6e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005f70:	7cfb      	ldrb	r3, [r7, #19]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d001      	beq.n	8005f7a <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8005f76:	7cfb      	ldrb	r3, [r7, #19]
 8005f78:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d01e      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005f86:	4b33      	ldr	r3, [pc, #204]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f88:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005f8c:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f96:	492f      	ldr	r1, [pc, #188]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005f98:	4313      	orrs	r3, r2
 8005f9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005fa8:	d10c      	bne.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	3304      	adds	r3, #4
 8005fae:	2102      	movs	r1, #2
 8005fb0:	4618      	mov	r0, r3
 8005fb2:	f000 f851 	bl	8006058 <RCCEx_PLLSAI1_Config>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8005fba:	7cfb      	ldrb	r3, [r7, #19]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d001      	beq.n	8005fc4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 8005fc0:	7cfb      	ldrb	r3, [r7, #19]
 8005fc2:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00b      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8005fd0:	4b20      	ldr	r3, [pc, #128]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005fd6:	f023 0204 	bic.w	r2, r3, #4
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe0:	491c      	ldr	r1, [pc, #112]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d00b      	beq.n	800600c <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8005ff4:	4b17      	ldr	r3, [pc, #92]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005ff6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005ffa:	f023 0218 	bic.w	r2, r3, #24
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006004:	4913      	ldr	r1, [pc, #76]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006006:	4313      	orrs	r3, r2
 8006008:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006014:	2b00      	cmp	r3, #0
 8006016:	d017      	beq.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 8006018:	4b0e      	ldr	r3, [pc, #56]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800601a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800601e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006028:	490a      	ldr	r1, [pc, #40]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800602a:	4313      	orrs	r3, r2
 800602c:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8006036:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800603a:	d105      	bne.n	8006048 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800603c:	4b05      	ldr	r3, [pc, #20]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800603e:	68db      	ldr	r3, [r3, #12]
 8006040:	4a04      	ldr	r2, [pc, #16]	@ (8006054 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8006042:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006046:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8006048:	7cbb      	ldrb	r3, [r7, #18]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3718      	adds	r7, #24
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	40021000 	.word	0x40021000

08006058 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006066:	4b72      	ldr	r3, [pc, #456]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006068:	68db      	ldr	r3, [r3, #12]
 800606a:	f003 0303 	and.w	r3, r3, #3
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00e      	beq.n	8006090 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8006072:	4b6f      	ldr	r3, [pc, #444]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006074:	68db      	ldr	r3, [r3, #12]
 8006076:	f003 0203 	and.w	r2, r3, #3
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	429a      	cmp	r2, r3
 8006080:	d103      	bne.n	800608a <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	681b      	ldr	r3, [r3, #0]
       ||
 8006086:	2b00      	cmp	r3, #0
 8006088:	d142      	bne.n	8006110 <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 800608a:	2301      	movs	r3, #1
 800608c:	73fb      	strb	r3, [r7, #15]
 800608e:	e03f      	b.n	8006110 <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	2b03      	cmp	r3, #3
 8006096:	d018      	beq.n	80060ca <RCCEx_PLLSAI1_Config+0x72>
 8006098:	2b03      	cmp	r3, #3
 800609a:	d825      	bhi.n	80060e8 <RCCEx_PLLSAI1_Config+0x90>
 800609c:	2b01      	cmp	r3, #1
 800609e:	d002      	beq.n	80060a6 <RCCEx_PLLSAI1_Config+0x4e>
 80060a0:	2b02      	cmp	r3, #2
 80060a2:	d009      	beq.n	80060b8 <RCCEx_PLLSAI1_Config+0x60>
 80060a4:	e020      	b.n	80060e8 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80060a6:	4b62      	ldr	r3, [pc, #392]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f003 0302 	and.w	r3, r3, #2
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d11d      	bne.n	80060ee <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 80060b2:	2301      	movs	r3, #1
 80060b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060b6:	e01a      	b.n	80060ee <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80060b8:	4b5d      	ldr	r3, [pc, #372]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d116      	bne.n	80060f2 <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 80060c4:	2301      	movs	r3, #1
 80060c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80060c8:	e013      	b.n	80060f2 <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80060ca:	4b59      	ldr	r3, [pc, #356]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10f      	bne.n	80060f6 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80060d6:	4b56      	ldr	r3, [pc, #344]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d109      	bne.n	80060f6 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 80060e2:	2301      	movs	r3, #1
 80060e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80060e6:	e006      	b.n	80060f6 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 80060e8:	2301      	movs	r3, #1
 80060ea:	73fb      	strb	r3, [r7, #15]
      break;
 80060ec:	e004      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80060ee:	bf00      	nop
 80060f0:	e002      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80060f2:	bf00      	nop
 80060f4:	e000      	b.n	80060f8 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 80060f6:	bf00      	nop
    }

    if(status == HAL_OK)
 80060f8:	7bfb      	ldrb	r3, [r7, #15]
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d108      	bne.n	8006110 <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 80060fe:	4b4c      	ldr	r3, [pc, #304]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006100:	68db      	ldr	r3, [r3, #12]
 8006102:	f023 0203 	bic.w	r2, r3, #3
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	4949      	ldr	r1, [pc, #292]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800610c:	4313      	orrs	r3, r2
 800610e:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8006110:	7bfb      	ldrb	r3, [r7, #15]
 8006112:	2b00      	cmp	r3, #0
 8006114:	f040 8086 	bne.w	8006224 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8006118:	4b45      	ldr	r3, [pc, #276]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	4a44      	ldr	r2, [pc, #272]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800611e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8006122:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006124:	f7fc f8f8 	bl	8002318 <HAL_GetTick>
 8006128:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800612a:	e009      	b.n	8006140 <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800612c:	f7fc f8f4 	bl	8002318 <HAL_GetTick>
 8006130:	4602      	mov	r2, r0
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	1ad3      	subs	r3, r2, r3
 8006136:	2b02      	cmp	r3, #2
 8006138:	d902      	bls.n	8006140 <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 800613a:	2303      	movs	r3, #3
 800613c:	73fb      	strb	r3, [r7, #15]
        break;
 800613e:	e005      	b.n	800614c <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006140:	4b3b      	ldr	r3, [pc, #236]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8006148:	2b00      	cmp	r3, #0
 800614a:	d1ef      	bne.n	800612c <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 800614c:	7bfb      	ldrb	r3, [r7, #15]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d168      	bne.n	8006224 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8006152:	683b      	ldr	r3, [r7, #0]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d113      	bne.n	8006180 <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006158:	4b35      	ldr	r3, [pc, #212]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800615a:	691a      	ldr	r2, [r3, #16]
 800615c:	4b35      	ldr	r3, [pc, #212]	@ (8006234 <RCCEx_PLLSAI1_Config+0x1dc>)
 800615e:	4013      	ands	r3, r2
 8006160:	687a      	ldr	r2, [r7, #4]
 8006162:	6892      	ldr	r2, [r2, #8]
 8006164:	0211      	lsls	r1, r2, #8
 8006166:	687a      	ldr	r2, [r7, #4]
 8006168:	68d2      	ldr	r2, [r2, #12]
 800616a:	06d2      	lsls	r2, r2, #27
 800616c:	4311      	orrs	r1, r2
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	6852      	ldr	r2, [r2, #4]
 8006172:	3a01      	subs	r2, #1
 8006174:	0112      	lsls	r2, r2, #4
 8006176:	430a      	orrs	r2, r1
 8006178:	492d      	ldr	r1, [pc, #180]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 800617a:	4313      	orrs	r3, r2
 800617c:	610b      	str	r3, [r1, #16]
 800617e:	e02d      	b.n	80061dc <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8006180:	683b      	ldr	r3, [r7, #0]
 8006182:	2b01      	cmp	r3, #1
 8006184:	d115      	bne.n	80061b2 <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006186:	4b2a      	ldr	r3, [pc, #168]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006188:	691a      	ldr	r2, [r3, #16]
 800618a:	4b2b      	ldr	r3, [pc, #172]	@ (8006238 <RCCEx_PLLSAI1_Config+0x1e0>)
 800618c:	4013      	ands	r3, r2
 800618e:	687a      	ldr	r2, [r7, #4]
 8006190:	6892      	ldr	r2, [r2, #8]
 8006192:	0211      	lsls	r1, r2, #8
 8006194:	687a      	ldr	r2, [r7, #4]
 8006196:	6912      	ldr	r2, [r2, #16]
 8006198:	0852      	lsrs	r2, r2, #1
 800619a:	3a01      	subs	r2, #1
 800619c:	0552      	lsls	r2, r2, #21
 800619e:	4311      	orrs	r1, r2
 80061a0:	687a      	ldr	r2, [r7, #4]
 80061a2:	6852      	ldr	r2, [r2, #4]
 80061a4:	3a01      	subs	r2, #1
 80061a6:	0112      	lsls	r2, r2, #4
 80061a8:	430a      	orrs	r2, r1
 80061aa:	4921      	ldr	r1, [pc, #132]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061ac:	4313      	orrs	r3, r2
 80061ae:	610b      	str	r3, [r1, #16]
 80061b0:	e014      	b.n	80061dc <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80061b2:	4b1f      	ldr	r3, [pc, #124]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061b4:	691a      	ldr	r2, [r3, #16]
 80061b6:	4b21      	ldr	r3, [pc, #132]	@ (800623c <RCCEx_PLLSAI1_Config+0x1e4>)
 80061b8:	4013      	ands	r3, r2
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	6892      	ldr	r2, [r2, #8]
 80061be:	0211      	lsls	r1, r2, #8
 80061c0:	687a      	ldr	r2, [r7, #4]
 80061c2:	6952      	ldr	r2, [r2, #20]
 80061c4:	0852      	lsrs	r2, r2, #1
 80061c6:	3a01      	subs	r2, #1
 80061c8:	0652      	lsls	r2, r2, #25
 80061ca:	4311      	orrs	r1, r2
 80061cc:	687a      	ldr	r2, [r7, #4]
 80061ce:	6852      	ldr	r2, [r2, #4]
 80061d0:	3a01      	subs	r2, #1
 80061d2:	0112      	lsls	r2, r2, #4
 80061d4:	430a      	orrs	r2, r1
 80061d6:	4916      	ldr	r1, [pc, #88]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061d8:	4313      	orrs	r3, r2
 80061da:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80061dc:	4b14      	ldr	r3, [pc, #80]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a13      	ldr	r2, [pc, #76]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 80061e2:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80061e6:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80061e8:	f7fc f896 	bl	8002318 <HAL_GetTick>
 80061ec:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80061ee:	e009      	b.n	8006204 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80061f0:	f7fc f892 	bl	8002318 <HAL_GetTick>
 80061f4:	4602      	mov	r2, r0
 80061f6:	68bb      	ldr	r3, [r7, #8]
 80061f8:	1ad3      	subs	r3, r2, r3
 80061fa:	2b02      	cmp	r3, #2
 80061fc:	d902      	bls.n	8006204 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80061fe:	2303      	movs	r3, #3
 8006200:	73fb      	strb	r3, [r7, #15]
          break;
 8006202:	e005      	b.n	8006210 <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006204:	4b0a      	ldr	r3, [pc, #40]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d0ef      	beq.n	80061f0 <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8006210:	7bfb      	ldrb	r3, [r7, #15]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d106      	bne.n	8006224 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006216:	4b06      	ldr	r3, [pc, #24]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006218:	691a      	ldr	r2, [r3, #16]
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	699b      	ldr	r3, [r3, #24]
 800621e:	4904      	ldr	r1, [pc, #16]	@ (8006230 <RCCEx_PLLSAI1_Config+0x1d8>)
 8006220:	4313      	orrs	r3, r2
 8006222:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8006224:	7bfb      	ldrb	r3, [r7, #15]
}
 8006226:	4618      	mov	r0, r3
 8006228:	3710      	adds	r7, #16
 800622a:	46bd      	mov	sp, r7
 800622c:	bd80      	pop	{r7, pc}
 800622e:	bf00      	nop
 8006230:	40021000 	.word	0x40021000
 8006234:	07ff800f 	.word	0x07ff800f
 8006238:	ff9f800f 	.word	0xff9f800f
 800623c:	f9ff800f 	.word	0xf9ff800f

08006240 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8006240:	b580      	push	{r7, lr}
 8006242:	b084      	sub	sp, #16
 8006244:	af00      	add	r7, sp, #0
 8006246:	6078      	str	r0, [r7, #4]
 8006248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800624a:	2300      	movs	r3, #0
 800624c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800624e:	4b72      	ldr	r3, [pc, #456]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006250:	68db      	ldr	r3, [r3, #12]
 8006252:	f003 0303 	and.w	r3, r3, #3
 8006256:	2b00      	cmp	r3, #0
 8006258:	d00e      	beq.n	8006278 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800625a:	4b6f      	ldr	r3, [pc, #444]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800625c:	68db      	ldr	r3, [r3, #12]
 800625e:	f003 0203 	and.w	r2, r3, #3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	429a      	cmp	r2, r3
 8006268:	d103      	bne.n	8006272 <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
       ||
 800626e:	2b00      	cmp	r3, #0
 8006270:	d142      	bne.n	80062f8 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8006272:	2301      	movs	r3, #1
 8006274:	73fb      	strb	r3, [r7, #15]
 8006276:	e03f      	b.n	80062f8 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	2b03      	cmp	r3, #3
 800627e:	d018      	beq.n	80062b2 <RCCEx_PLLSAI2_Config+0x72>
 8006280:	2b03      	cmp	r3, #3
 8006282:	d825      	bhi.n	80062d0 <RCCEx_PLLSAI2_Config+0x90>
 8006284:	2b01      	cmp	r3, #1
 8006286:	d002      	beq.n	800628e <RCCEx_PLLSAI2_Config+0x4e>
 8006288:	2b02      	cmp	r3, #2
 800628a:	d009      	beq.n	80062a0 <RCCEx_PLLSAI2_Config+0x60>
 800628c:	e020      	b.n	80062d0 <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800628e:	4b62      	ldr	r3, [pc, #392]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f003 0302 	and.w	r3, r3, #2
 8006296:	2b00      	cmp	r3, #0
 8006298:	d11d      	bne.n	80062d6 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 800629a:	2301      	movs	r3, #1
 800629c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800629e:	e01a      	b.n	80062d6 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80062a0:	4b5d      	ldr	r3, [pc, #372]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d116      	bne.n	80062da <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 80062ac:	2301      	movs	r3, #1
 80062ae:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80062b0:	e013      	b.n	80062da <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80062b2:	4b59      	ldr	r3, [pc, #356]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d10f      	bne.n	80062de <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80062be:	4b56      	ldr	r3, [pc, #344]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d109      	bne.n	80062de <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80062ce:	e006      	b.n	80062de <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 80062d0:	2301      	movs	r3, #1
 80062d2:	73fb      	strb	r3, [r7, #15]
      break;
 80062d4:	e004      	b.n	80062e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80062d6:	bf00      	nop
 80062d8:	e002      	b.n	80062e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80062da:	bf00      	nop
 80062dc:	e000      	b.n	80062e0 <RCCEx_PLLSAI2_Config+0xa0>
      break;
 80062de:	bf00      	nop
    }

    if(status == HAL_OK)
 80062e0:	7bfb      	ldrb	r3, [r7, #15]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d108      	bne.n	80062f8 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 80062e6:	4b4c      	ldr	r3, [pc, #304]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062e8:	68db      	ldr	r3, [r3, #12]
 80062ea:	f023 0203 	bic.w	r2, r3, #3
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4949      	ldr	r1, [pc, #292]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80062f4:	4313      	orrs	r3, r2
 80062f6:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 80062f8:	7bfb      	ldrb	r3, [r7, #15]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	f040 8086 	bne.w	800640c <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8006300:	4b45      	ldr	r3, [pc, #276]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	4a44      	ldr	r2, [pc, #272]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006306:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800630a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800630c:	f7fc f804 	bl	8002318 <HAL_GetTick>
 8006310:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006312:	e009      	b.n	8006328 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006314:	f7fc f800 	bl	8002318 <HAL_GetTick>
 8006318:	4602      	mov	r2, r0
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	1ad3      	subs	r3, r2, r3
 800631e:	2b02      	cmp	r3, #2
 8006320:	d902      	bls.n	8006328 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8006322:	2303      	movs	r3, #3
 8006324:	73fb      	strb	r3, [r7, #15]
        break;
 8006326:	e005      	b.n	8006334 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006328:	4b3b      	ldr	r3, [pc, #236]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8006330:	2b00      	cmp	r3, #0
 8006332:	d1ef      	bne.n	8006314 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8006334:	7bfb      	ldrb	r3, [r7, #15]
 8006336:	2b00      	cmp	r3, #0
 8006338:	d168      	bne.n	800640c <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d113      	bne.n	8006368 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006340:	4b35      	ldr	r3, [pc, #212]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006342:	695a      	ldr	r2, [r3, #20]
 8006344:	4b35      	ldr	r3, [pc, #212]	@ (800641c <RCCEx_PLLSAI2_Config+0x1dc>)
 8006346:	4013      	ands	r3, r2
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	6892      	ldr	r2, [r2, #8]
 800634c:	0211      	lsls	r1, r2, #8
 800634e:	687a      	ldr	r2, [r7, #4]
 8006350:	68d2      	ldr	r2, [r2, #12]
 8006352:	06d2      	lsls	r2, r2, #27
 8006354:	4311      	orrs	r1, r2
 8006356:	687a      	ldr	r2, [r7, #4]
 8006358:	6852      	ldr	r2, [r2, #4]
 800635a:	3a01      	subs	r2, #1
 800635c:	0112      	lsls	r2, r2, #4
 800635e:	430a      	orrs	r2, r1
 8006360:	492d      	ldr	r1, [pc, #180]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006362:	4313      	orrs	r3, r2
 8006364:	614b      	str	r3, [r1, #20]
 8006366:	e02d      	b.n	80063c4 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	2b01      	cmp	r3, #1
 800636c:	d115      	bne.n	800639a <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800636e:	4b2a      	ldr	r3, [pc, #168]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006370:	695a      	ldr	r2, [r3, #20]
 8006372:	4b2b      	ldr	r3, [pc, #172]	@ (8006420 <RCCEx_PLLSAI2_Config+0x1e0>)
 8006374:	4013      	ands	r3, r2
 8006376:	687a      	ldr	r2, [r7, #4]
 8006378:	6892      	ldr	r2, [r2, #8]
 800637a:	0211      	lsls	r1, r2, #8
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6912      	ldr	r2, [r2, #16]
 8006380:	0852      	lsrs	r2, r2, #1
 8006382:	3a01      	subs	r2, #1
 8006384:	0552      	lsls	r2, r2, #21
 8006386:	4311      	orrs	r1, r2
 8006388:	687a      	ldr	r2, [r7, #4]
 800638a:	6852      	ldr	r2, [r2, #4]
 800638c:	3a01      	subs	r2, #1
 800638e:	0112      	lsls	r2, r2, #4
 8006390:	430a      	orrs	r2, r1
 8006392:	4921      	ldr	r1, [pc, #132]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006394:	4313      	orrs	r3, r2
 8006396:	614b      	str	r3, [r1, #20]
 8006398:	e014      	b.n	80063c4 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800639a:	4b1f      	ldr	r3, [pc, #124]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 800639c:	695a      	ldr	r2, [r3, #20]
 800639e:	4b21      	ldr	r3, [pc, #132]	@ (8006424 <RCCEx_PLLSAI2_Config+0x1e4>)
 80063a0:	4013      	ands	r3, r2
 80063a2:	687a      	ldr	r2, [r7, #4]
 80063a4:	6892      	ldr	r2, [r2, #8]
 80063a6:	0211      	lsls	r1, r2, #8
 80063a8:	687a      	ldr	r2, [r7, #4]
 80063aa:	6952      	ldr	r2, [r2, #20]
 80063ac:	0852      	lsrs	r2, r2, #1
 80063ae:	3a01      	subs	r2, #1
 80063b0:	0652      	lsls	r2, r2, #25
 80063b2:	4311      	orrs	r1, r2
 80063b4:	687a      	ldr	r2, [r7, #4]
 80063b6:	6852      	ldr	r2, [r2, #4]
 80063b8:	3a01      	subs	r2, #1
 80063ba:	0112      	lsls	r2, r2, #4
 80063bc:	430a      	orrs	r2, r1
 80063be:	4916      	ldr	r1, [pc, #88]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063c0:	4313      	orrs	r3, r2
 80063c2:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80063c4:	4b14      	ldr	r3, [pc, #80]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4a13      	ldr	r2, [pc, #76]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80063ce:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80063d0:	f7fb ffa2 	bl	8002318 <HAL_GetTick>
 80063d4:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063d6:	e009      	b.n	80063ec <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80063d8:	f7fb ff9e 	bl	8002318 <HAL_GetTick>
 80063dc:	4602      	mov	r2, r0
 80063de:	68bb      	ldr	r3, [r7, #8]
 80063e0:	1ad3      	subs	r3, r2, r3
 80063e2:	2b02      	cmp	r3, #2
 80063e4:	d902      	bls.n	80063ec <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 80063e6:	2303      	movs	r3, #3
 80063e8:	73fb      	strb	r3, [r7, #15]
          break;
 80063ea:	e005      	b.n	80063f8 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80063ec:	4b0a      	ldr	r3, [pc, #40]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d0ef      	beq.n	80063d8 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 80063f8:	7bfb      	ldrb	r3, [r7, #15]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d106      	bne.n	800640c <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80063fe:	4b06      	ldr	r3, [pc, #24]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006400:	695a      	ldr	r2, [r3, #20]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	4904      	ldr	r1, [pc, #16]	@ (8006418 <RCCEx_PLLSAI2_Config+0x1d8>)
 8006408:	4313      	orrs	r3, r2
 800640a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}
 8006416:	bf00      	nop
 8006418:	40021000 	.word	0x40021000
 800641c:	07ff800f 	.word	0x07ff800f
 8006420:	ff9f800f 	.word	0xff9f800f
 8006424:	f9ff800f 	.word	0xf9ff800f

08006428 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d101      	bne.n	800643a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006436:	2301      	movs	r3, #1
 8006438:	e042      	b.n	80064c0 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006440:	2b00      	cmp	r3, #0
 8006442:	d106      	bne.n	8006452 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800644c:	6878      	ldr	r0, [r7, #4]
 800644e:	f7fb fcc3 	bl	8001dd8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	2224      	movs	r2, #36	@ 0x24
 8006456:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	681a      	ldr	r2, [r3, #0]
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f022 0201 	bic.w	r2, r2, #1
 8006468:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800646e:	2b00      	cmp	r3, #0
 8006470:	d002      	beq.n	8006478 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 ff60 	bl	8007338 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006478:	6878      	ldr	r0, [r7, #4]
 800647a:	f000 fc61 	bl	8006d40 <UART_SetConfig>
 800647e:	4603      	mov	r3, r0
 8006480:	2b01      	cmp	r3, #1
 8006482:	d101      	bne.n	8006488 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006484:	2301      	movs	r3, #1
 8006486:	e01b      	b.n	80064c0 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	685a      	ldr	r2, [r3, #4]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006496:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	689a      	ldr	r2, [r3, #8]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80064a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	681a      	ldr	r2, [r3, #0]
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	f042 0201 	orr.w	r2, r2, #1
 80064b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 ffdf 	bl	800747c <UART_CheckIdleState>
 80064be:	4603      	mov	r3, r0
}
 80064c0:	4618      	mov	r0, r3
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b08a      	sub	sp, #40	@ 0x28
 80064cc:	af02      	add	r7, sp, #8
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	603b      	str	r3, [r7, #0]
 80064d4:	4613      	mov	r3, r2
 80064d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064de:	2b20      	cmp	r3, #32
 80064e0:	d17b      	bne.n	80065da <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80064e2:	68bb      	ldr	r3, [r7, #8]
 80064e4:	2b00      	cmp	r3, #0
 80064e6:	d002      	beq.n	80064ee <HAL_UART_Transmit+0x26>
 80064e8:	88fb      	ldrh	r3, [r7, #6]
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d101      	bne.n	80064f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80064ee:	2301      	movs	r3, #1
 80064f0:	e074      	b.n	80065dc <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	2200      	movs	r2, #0
 80064f6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	2221      	movs	r2, #33	@ 0x21
 80064fe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006502:	f7fb ff09 	bl	8002318 <HAL_GetTick>
 8006506:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	88fa      	ldrh	r2, [r7, #6]
 800650c:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	88fa      	ldrh	r2, [r7, #6]
 8006514:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	689b      	ldr	r3, [r3, #8]
 800651c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006520:	d108      	bne.n	8006534 <HAL_UART_Transmit+0x6c>
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	691b      	ldr	r3, [r3, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d104      	bne.n	8006534 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800652a:	2300      	movs	r3, #0
 800652c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800652e:	68bb      	ldr	r3, [r7, #8]
 8006530:	61bb      	str	r3, [r7, #24]
 8006532:	e003      	b.n	800653c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006538:	2300      	movs	r3, #0
 800653a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800653c:	e030      	b.n	80065a0 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800653e:	683b      	ldr	r3, [r7, #0]
 8006540:	9300      	str	r3, [sp, #0]
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	2200      	movs	r2, #0
 8006546:	2180      	movs	r1, #128	@ 0x80
 8006548:	68f8      	ldr	r0, [r7, #12]
 800654a:	f001 f841 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 800654e:	4603      	mov	r3, r0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	2220      	movs	r2, #32
 8006558:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800655c:	2303      	movs	r3, #3
 800655e:	e03d      	b.n	80065dc <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006560:	69fb      	ldr	r3, [r7, #28]
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10b      	bne.n	800657e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006566:	69bb      	ldr	r3, [r7, #24]
 8006568:	881a      	ldrh	r2, [r3, #0]
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006572:	b292      	uxth	r2, r2
 8006574:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8006576:	69bb      	ldr	r3, [r7, #24]
 8006578:	3302      	adds	r3, #2
 800657a:	61bb      	str	r3, [r7, #24]
 800657c:	e007      	b.n	800658e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800657e:	69fb      	ldr	r3, [r7, #28]
 8006580:	781a      	ldrb	r2, [r3, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8006588:	69fb      	ldr	r3, [r7, #28]
 800658a:	3301      	adds	r3, #1
 800658c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8006594:	b29b      	uxth	r3, r3
 8006596:	3b01      	subs	r3, #1
 8006598:	b29a      	uxth	r2, r3
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 80065a6:	b29b      	uxth	r3, r3
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d1c8      	bne.n	800653e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80065ac:	683b      	ldr	r3, [r7, #0]
 80065ae:	9300      	str	r3, [sp, #0]
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	2140      	movs	r1, #64	@ 0x40
 80065b6:	68f8      	ldr	r0, [r7, #12]
 80065b8:	f001 f80a 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 80065bc:	4603      	mov	r3, r0
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d005      	beq.n	80065ce <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	2220      	movs	r2, #32
 80065c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 80065ca:	2303      	movs	r3, #3
 80065cc:	e006      	b.n	80065dc <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	2220      	movs	r2, #32
 80065d2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 80065d6:	2300      	movs	r3, #0
 80065d8:	e000      	b.n	80065dc <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 80065da:	2302      	movs	r3, #2
  }
}
 80065dc:	4618      	mov	r0, r3
 80065de:	3720      	adds	r7, #32
 80065e0:	46bd      	mov	sp, r7
 80065e2:	bd80      	pop	{r7, pc}

080065e4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b08a      	sub	sp, #40	@ 0x28
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	60f8      	str	r0, [r7, #12]
 80065ec:	60b9      	str	r1, [r7, #8]
 80065ee:	4613      	mov	r3, r2
 80065f0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80065f8:	2b20      	cmp	r3, #32
 80065fa:	d137      	bne.n	800666c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80065fc:	68bb      	ldr	r3, [r7, #8]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d002      	beq.n	8006608 <HAL_UART_Receive_IT+0x24>
 8006602:	88fb      	ldrh	r3, [r7, #6]
 8006604:	2b00      	cmp	r3, #0
 8006606:	d101      	bne.n	800660c <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8006608:	2301      	movs	r3, #1
 800660a:	e030      	b.n	800666e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	4a18      	ldr	r2, [pc, #96]	@ (8006678 <HAL_UART_Receive_IT+0x94>)
 8006618:	4293      	cmp	r3, r2
 800661a:	d01f      	beq.n	800665c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	685b      	ldr	r3, [r3, #4]
 8006622:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006626:	2b00      	cmp	r3, #0
 8006628:	d018      	beq.n	800665c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006630:	697b      	ldr	r3, [r7, #20]
 8006632:	e853 3f00 	ldrex	r3, [r3]
 8006636:	613b      	str	r3, [r7, #16]
   return(result);
 8006638:	693b      	ldr	r3, [r7, #16]
 800663a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800663e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	461a      	mov	r2, r3
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	623b      	str	r3, [r7, #32]
 800664a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800664c:	69f9      	ldr	r1, [r7, #28]
 800664e:	6a3a      	ldr	r2, [r7, #32]
 8006650:	e841 2300 	strex	r3, r2, [r1]
 8006654:	61bb      	str	r3, [r7, #24]
   return(result);
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	2b00      	cmp	r3, #0
 800665a:	d1e6      	bne.n	800662a <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800665c:	88fb      	ldrh	r3, [r7, #6]
 800665e:	461a      	mov	r2, r3
 8006660:	68b9      	ldr	r1, [r7, #8]
 8006662:	68f8      	ldr	r0, [r7, #12]
 8006664:	f001 f822 	bl	80076ac <UART_Start_Receive_IT>
 8006668:	4603      	mov	r3, r0
 800666a:	e000      	b.n	800666e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800666c:	2302      	movs	r3, #2
  }
}
 800666e:	4618      	mov	r0, r3
 8006670:	3728      	adds	r7, #40	@ 0x28
 8006672:	46bd      	mov	sp, r7
 8006674:	bd80      	pop	{r7, pc}
 8006676:	bf00      	nop
 8006678:	40008000 	.word	0x40008000

0800667c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b0ba      	sub	sp, #232	@ 0xe8
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	69db      	ldr	r3, [r3, #28]
 800668a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	689b      	ldr	r3, [r3, #8]
 800669e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80066a2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80066a6:	f640 030f 	movw	r3, #2063	@ 0x80f
 80066aa:	4013      	ands	r3, r2
 80066ac:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 80066b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d11b      	bne.n	80066f0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80066b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80066bc:	f003 0320 	and.w	r3, r3, #32
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d015      	beq.n	80066f0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80066c4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80066c8:	f003 0320 	and.w	r3, r3, #32
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d105      	bne.n	80066dc <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80066d0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80066d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d009      	beq.n	80066f0 <HAL_UART_IRQHandler+0x74>
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	f000 8300 	beq.w	8006ce6 <HAL_UART_IRQHandler+0x66a>
      {
        huart->RxISR(huart);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80066ea:	6878      	ldr	r0, [r7, #4]
 80066ec:	4798      	blx	r3
      }
      return;
 80066ee:	e2fa      	b.n	8006ce6 <HAL_UART_IRQHandler+0x66a>
    }
  }

  /* If some errors occur */
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
 80066f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80066f4:	2b00      	cmp	r3, #0
 80066f6:	f000 8123 	beq.w	8006940 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80066fa:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80066fe:	4b8d      	ldr	r3, [pc, #564]	@ (8006934 <HAL_UART_IRQHandler+0x2b8>)
 8006700:	4013      	ands	r3, r2
 8006702:	2b00      	cmp	r3, #0
 8006704:	d106      	bne.n	8006714 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006706:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 800670a:	4b8b      	ldr	r3, [pc, #556]	@ (8006938 <HAL_UART_IRQHandler+0x2bc>)
 800670c:	4013      	ands	r3, r2
 800670e:	2b00      	cmp	r3, #0
 8006710:	f000 8116 	beq.w	8006940 <HAL_UART_IRQHandler+0x2c4>
      && (((cr3its & USART_CR3_EIE) != 0U)
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006718:	f003 0301 	and.w	r3, r3, #1
 800671c:	2b00      	cmp	r3, #0
 800671e:	d011      	beq.n	8006744 <HAL_UART_IRQHandler+0xc8>
 8006720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006724:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006728:	2b00      	cmp	r3, #0
 800672a:	d00b      	beq.n	8006744 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800672c:	687b      	ldr	r3, [r7, #4]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2201      	movs	r2, #1
 8006732:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800673a:	f043 0201 	orr.w	r2, r3, #1
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006744:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006748:	f003 0302 	and.w	r3, r3, #2
 800674c:	2b00      	cmp	r3, #0
 800674e:	d011      	beq.n	8006774 <HAL_UART_IRQHandler+0xf8>
 8006750:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006754:	f003 0301 	and.w	r3, r3, #1
 8006758:	2b00      	cmp	r3, #0
 800675a:	d00b      	beq.n	8006774 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	2202      	movs	r2, #2
 8006762:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800676a:	f043 0204 	orr.w	r2, r3, #4
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006774:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006778:	f003 0304 	and.w	r3, r3, #4
 800677c:	2b00      	cmp	r3, #0
 800677e:	d011      	beq.n	80067a4 <HAL_UART_IRQHandler+0x128>
 8006780:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006784:	f003 0301 	and.w	r3, r3, #1
 8006788:	2b00      	cmp	r3, #0
 800678a:	d00b      	beq.n	80067a4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	2204      	movs	r2, #4
 8006792:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800679a:	f043 0202 	orr.w	r2, r3, #2
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
 80067a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067a8:	f003 0308 	and.w	r3, r3, #8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d017      	beq.n	80067e0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067b4:	f003 0320 	and.w	r3, r3, #32
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d105      	bne.n	80067c8 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 80067bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80067c0:	4b5c      	ldr	r3, [pc, #368]	@ (8006934 <HAL_UART_IRQHandler+0x2b8>)
 80067c2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d00b      	beq.n	80067e0 <HAL_UART_IRQHandler+0x164>
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
            ((cr3its & USART_CR3_EIE) != 0U)))
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	2208      	movs	r2, #8
 80067ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067d6:	f043 0208 	orr.w	r2, r3, #8
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80067e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d012      	beq.n	8006812 <HAL_UART_IRQHandler+0x196>
 80067ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80067f0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d00c      	beq.n	8006812 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006800:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006808:	f043 0220 	orr.w	r2, r3, #32
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006818:	2b00      	cmp	r3, #0
 800681a:	f000 8266 	beq.w	8006cea <HAL_UART_IRQHandler+0x66e>
    {
      /* UART in mode Receiver --------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800681e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006822:	f003 0320 	and.w	r3, r3, #32
 8006826:	2b00      	cmp	r3, #0
 8006828:	d013      	beq.n	8006852 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800682a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d105      	bne.n	8006842 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006836:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800683a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800683e:	2b00      	cmp	r3, #0
 8006840:	d007      	beq.n	8006852 <HAL_UART_IRQHandler+0x1d6>
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006846:	2b00      	cmp	r3, #0
 8006848:	d003      	beq.n	8006852 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800684e:	6878      	ldr	r0, [r7, #4]
 8006850:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006858:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	689b      	ldr	r3, [r3, #8]
 8006862:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006866:	2b40      	cmp	r3, #64	@ 0x40
 8006868:	d005      	beq.n	8006876 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800686a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800686e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006872:	2b00      	cmp	r3, #0
 8006874:	d054      	beq.n	8006920 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f001 f83a 	bl	80078f0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	689b      	ldr	r3, [r3, #8]
 8006882:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006886:	2b40      	cmp	r3, #64	@ 0x40
 8006888:	d146      	bne.n	8006918 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	3308      	adds	r3, #8
 8006890:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006894:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006898:	e853 3f00 	ldrex	r3, [r3]
 800689c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80068a0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80068a4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80068a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	3308      	adds	r3, #8
 80068b2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80068b6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80068ba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068be:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80068c2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80068c6:	e841 2300 	strex	r3, r2, [r1]
 80068ca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80068ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d1d9      	bne.n	800688a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d017      	beq.n	8006910 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068e6:	4a15      	ldr	r2, [pc, #84]	@ (800693c <HAL_UART_IRQHandler+0x2c0>)
 80068e8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80068f0:	4618      	mov	r0, r3
 80068f2:	f7fd f8fc 	bl	8003aee <HAL_DMA_Abort_IT>
 80068f6:	4603      	mov	r3, r0
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d019      	beq.n	8006930 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006904:	687a      	ldr	r2, [r7, #4]
 8006906:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 800690a:	4610      	mov	r0, r2
 800690c:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800690e:	e00f      	b.n	8006930 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f000 f9ff 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006916:	e00b      	b.n	8006930 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006918:	6878      	ldr	r0, [r7, #4]
 800691a:	f000 f9fb 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800691e:	e007      	b.n	8006930 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006920:	6878      	ldr	r0, [r7, #4]
 8006922:	f000 f9f7 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	2200      	movs	r2, #0
 800692a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 800692e:	e1dc      	b.n	8006cea <HAL_UART_IRQHandler+0x66e>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	bf00      	nop
    return;
 8006932:	e1da      	b.n	8006cea <HAL_UART_IRQHandler+0x66e>
 8006934:	10000001 	.word	0x10000001
 8006938:	04000120 	.word	0x04000120
 800693c:	080079bd 	.word	0x080079bd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006944:	2b01      	cmp	r3, #1
 8006946:	f040 8170 	bne.w	8006c2a <HAL_UART_IRQHandler+0x5ae>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800694a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800694e:	f003 0310 	and.w	r3, r3, #16
 8006952:	2b00      	cmp	r3, #0
 8006954:	f000 8169 	beq.w	8006c2a <HAL_UART_IRQHandler+0x5ae>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006958:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800695c:	f003 0310 	and.w	r3, r3, #16
 8006960:	2b00      	cmp	r3, #0
 8006962:	f000 8162 	beq.w	8006c2a <HAL_UART_IRQHandler+0x5ae>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	2210      	movs	r2, #16
 800696c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	689b      	ldr	r3, [r3, #8]
 8006974:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006978:	2b40      	cmp	r3, #64	@ 0x40
 800697a:	f040 80d8 	bne.w	8006b2e <HAL_UART_IRQHandler+0x4b2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685b      	ldr	r3, [r3, #4]
 8006988:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800698c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006990:	2b00      	cmp	r3, #0
 8006992:	f000 80af 	beq.w	8006af4 <HAL_UART_IRQHandler+0x478>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800699c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069a0:	429a      	cmp	r2, r3
 80069a2:	f080 80a7 	bcs.w	8006af4 <HAL_UART_IRQHandler+0x478>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80069ac:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f040 8087 	bne.w	8006ad2 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069cc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80069d0:	e853 3f00 	ldrex	r3, [r3]
 80069d4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80069d8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80069dc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069e0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	461a      	mov	r2, r3
 80069ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80069ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80069f2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069f6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80069fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80069fe:	e841 2300 	strex	r3, r2, [r1]
 8006a02:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8006a06:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d1da      	bne.n	80069c4 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	3308      	adds	r3, #8
 8006a14:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a16:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006a18:	e853 3f00 	ldrex	r3, [r3]
 8006a1c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8006a1e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006a20:	f023 0301 	bic.w	r3, r3, #1
 8006a24:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	3308      	adds	r3, #8
 8006a2e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8006a32:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8006a36:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a38:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8006a3a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8006a3e:	e841 2300 	strex	r3, r2, [r1]
 8006a42:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006a44:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d1e1      	bne.n	8006a0e <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a4a:	687b      	ldr	r3, [r7, #4]
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	3308      	adds	r3, #8
 8006a50:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a52:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006a54:	e853 3f00 	ldrex	r3, [r3]
 8006a58:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8006a5a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006a5c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006a60:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3308      	adds	r3, #8
 8006a6a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006a6e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006a70:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a72:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006a74:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006a76:	e841 2300 	strex	r3, r2, [r1]
 8006a7a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006a7c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d1e3      	bne.n	8006a4a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2220      	movs	r2, #32
 8006a86:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006a98:	e853 3f00 	ldrex	r3, [r3]
 8006a9c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006a9e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006aa0:	f023 0310 	bic.w	r3, r3, #16
 8006aa4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	461a      	mov	r2, r3
 8006aae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006ab2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006ab4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ab6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006ab8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006aba:	e841 2300 	strex	r3, r2, [r1]
 8006abe:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d1e4      	bne.n	8006a90 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006acc:	4618      	mov	r0, r3
 8006ace:	f7fc ffb2 	bl	8003a36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006ae4:	b29b      	uxth	r3, r3
 8006ae6:	1ad3      	subs	r3, r2, r3
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4619      	mov	r1, r3
 8006aec:	6878      	ldr	r0, [r7, #4]
 8006aee:	f000 f91b 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8006af2:	e0fc      	b.n	8006cee <HAL_UART_IRQHandler+0x672>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006afa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006afe:	429a      	cmp	r2, r3
 8006b00:	f040 80f5 	bne.w	8006cee <HAL_UART_IRQHandler+0x672>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	f003 0320 	and.w	r3, r3, #32
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	f040 80eb 	bne.w	8006cee <HAL_UART_IRQHandler+0x672>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	2202      	movs	r2, #2
 8006b1c:	671a      	str	r2, [r3, #112]	@ 0x70
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006b24:	4619      	mov	r1, r3
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 f8fe 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
      return;
 8006b2c:	e0df      	b.n	8006cee <HAL_UART_IRQHandler+0x672>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	1ad3      	subs	r3, r2, r3
 8006b3e:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006b48:	b29b      	uxth	r3, r3
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	f000 80d1 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x676>
          && (nb_rx_data > 0U))
 8006b50:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	f000 80cc 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x676>
      {
#if defined(USART_CR1_FIFOEN)
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b62:	e853 3f00 	ldrex	r3, [r3]
 8006b66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b6a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b6e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	461a      	mov	r2, r3
 8006b78:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006b7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b7e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b80:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b82:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b84:	e841 2300 	strex	r3, r2, [r1]
 8006b88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b8a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d1e4      	bne.n	8006b5a <HAL_UART_IRQHandler+0x4de>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	3308      	adds	r3, #8
 8006b96:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006b9a:	e853 3f00 	ldrex	r3, [r3]
 8006b9e:	623b      	str	r3, [r7, #32]
   return(result);
 8006ba0:	6a3b      	ldr	r3, [r7, #32]
 8006ba2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ba6:	f023 0301 	bic.w	r3, r3, #1
 8006baa:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	3308      	adds	r3, #8
 8006bb4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006bb8:	633a      	str	r2, [r7, #48]	@ 0x30
 8006bba:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bbc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bbe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bc0:	e841 2300 	strex	r3, r2, [r1]
 8006bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d1e1      	bne.n	8006b90 <HAL_UART_IRQHandler+0x514>
        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	2220      	movs	r2, #32
 8006bd0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2200      	movs	r2, #0
 8006bde:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be6:	693b      	ldr	r3, [r7, #16]
 8006be8:	e853 3f00 	ldrex	r3, [r3]
 8006bec:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	f023 0310 	bic.w	r3, r3, #16
 8006bf4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	461a      	mov	r2, r3
 8006bfe:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006c02:	61fb      	str	r3, [r7, #28]
 8006c04:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c06:	69b9      	ldr	r1, [r7, #24]
 8006c08:	69fa      	ldr	r2, [r7, #28]
 8006c0a:	e841 2300 	strex	r3, r2, [r1]
 8006c0e:	617b      	str	r3, [r7, #20]
   return(result);
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d1e4      	bne.n	8006be0 <HAL_UART_IRQHandler+0x564>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	2202      	movs	r2, #2
 8006c1a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006c1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8006c20:	4619      	mov	r1, r3
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f880 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006c28:	e063      	b.n	8006cf2 <HAL_UART_IRQHandler+0x676>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c2e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d00e      	beq.n	8006c54 <HAL_UART_IRQHandler+0x5d8>
 8006c36:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d008      	beq.n	8006c54 <HAL_UART_IRQHandler+0x5d8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8006c4a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f001 fc1f 	bl	8008490 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006c52:	e051      	b.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006c54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d014      	beq.n	8006c8a <HAL_UART_IRQHandler+0x60e>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c64:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d105      	bne.n	8006c78 <HAL_UART_IRQHandler+0x5fc>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006c6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8006c70:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d008      	beq.n	8006c8a <HAL_UART_IRQHandler+0x60e>
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
      && ((cr1its & USART_CR1_TXEIE) != 0U))
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d03a      	beq.n	8006cf6 <HAL_UART_IRQHandler+0x67a>
    {
      huart->TxISR(huart);
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	4798      	blx	r3
    }
    return;
 8006c88:	e035      	b.n	8006cf6 <HAL_UART_IRQHandler+0x67a>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006c8e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d009      	beq.n	8006caa <HAL_UART_IRQHandler+0x62e>
 8006c96:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006c9a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d003      	beq.n	8006caa <HAL_UART_IRQHandler+0x62e>
  {
    UART_EndTransmit_IT(huart);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f000 fea0 	bl	80079e8 <UART_EndTransmit_IT>
    return;
 8006ca8:	e026      	b.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
  }

#if defined(USART_CR1_FIFOEN)
  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006caa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cae:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d009      	beq.n	8006cca <HAL_UART_IRQHandler+0x64e>
 8006cb6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cba:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_UART_IRQHandler+0x64e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f001 fbf8 	bl	80084b8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006cc8:	e016      	b.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006cca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006cce:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d010      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
 8006cd6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	da0c      	bge.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006cde:	6878      	ldr	r0, [r7, #4]
 8006ce0:	f001 fbe0 	bl	80084a4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006ce4:	e008      	b.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006ce6:	bf00      	nop
 8006ce8:	e006      	b.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
    return;
 8006cea:	bf00      	nop
 8006cec:	e004      	b.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
      return;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <HAL_UART_IRQHandler+0x67c>
    return;
 8006cf6:	bf00      	nop
  }
#endif /* USART_CR1_FIFOEN */
}
 8006cf8:	37e8      	adds	r7, #232	@ 0xe8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop

08006d00 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d40:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d44:	b08c      	sub	sp, #48	@ 0x30
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006d4a:	2300      	movs	r3, #0
 8006d4c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d50:	697b      	ldr	r3, [r7, #20]
 8006d52:	689a      	ldr	r2, [r3, #8]
 8006d54:	697b      	ldr	r3, [r7, #20]
 8006d56:	691b      	ldr	r3, [r3, #16]
 8006d58:	431a      	orrs	r2, r3
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	695b      	ldr	r3, [r3, #20]
 8006d5e:	431a      	orrs	r2, r3
 8006d60:	697b      	ldr	r3, [r7, #20]
 8006d62:	69db      	ldr	r3, [r3, #28]
 8006d64:	4313      	orrs	r3, r2
 8006d66:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	4baa      	ldr	r3, [pc, #680]	@ (8007018 <UART_SetConfig+0x2d8>)
 8006d70:	4013      	ands	r3, r2
 8006d72:	697a      	ldr	r2, [r7, #20]
 8006d74:	6812      	ldr	r2, [r2, #0]
 8006d76:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006d78:	430b      	orrs	r3, r1
 8006d7a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	685b      	ldr	r3, [r3, #4]
 8006d82:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006d86:	697b      	ldr	r3, [r7, #20]
 8006d88:	68da      	ldr	r2, [r3, #12]
 8006d8a:	697b      	ldr	r3, [r7, #20]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	430a      	orrs	r2, r1
 8006d90:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006d92:	697b      	ldr	r3, [r7, #20]
 8006d94:	699b      	ldr	r3, [r3, #24]
 8006d96:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006d98:	697b      	ldr	r3, [r7, #20]
 8006d9a:	681b      	ldr	r3, [r3, #0]
 8006d9c:	4a9f      	ldr	r2, [pc, #636]	@ (800701c <UART_SetConfig+0x2dc>)
 8006d9e:	4293      	cmp	r3, r2
 8006da0:	d004      	beq.n	8006dac <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006da2:	697b      	ldr	r3, [r7, #20]
 8006da4:	6a1b      	ldr	r3, [r3, #32]
 8006da6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006da8:	4313      	orrs	r3, r2
 8006daa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	689b      	ldr	r3, [r3, #8]
 8006db2:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8006db6:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8006dba:	697a      	ldr	r2, [r7, #20]
 8006dbc:	6812      	ldr	r2, [r2, #0]
 8006dbe:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006dc0:	430b      	orrs	r3, r1
 8006dc2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006dc4:	697b      	ldr	r3, [r7, #20]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dca:	f023 010f 	bic.w	r1, r3, #15
 8006dce:	697b      	ldr	r3, [r7, #20]
 8006dd0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	430a      	orrs	r2, r1
 8006dd8:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	4a90      	ldr	r2, [pc, #576]	@ (8007020 <UART_SetConfig+0x2e0>)
 8006de0:	4293      	cmp	r3, r2
 8006de2:	d125      	bne.n	8006e30 <UART_SetConfig+0xf0>
 8006de4:	4b8f      	ldr	r3, [pc, #572]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006de6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006dea:	f003 0303 	and.w	r3, r3, #3
 8006dee:	2b03      	cmp	r3, #3
 8006df0:	d81a      	bhi.n	8006e28 <UART_SetConfig+0xe8>
 8006df2:	a201      	add	r2, pc, #4	@ (adr r2, 8006df8 <UART_SetConfig+0xb8>)
 8006df4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006df8:	08006e09 	.word	0x08006e09
 8006dfc:	08006e19 	.word	0x08006e19
 8006e00:	08006e11 	.word	0x08006e11
 8006e04:	08006e21 	.word	0x08006e21
 8006e08:	2301      	movs	r3, #1
 8006e0a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e0e:	e116      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e10:	2302      	movs	r3, #2
 8006e12:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e16:	e112      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e18:	2304      	movs	r3, #4
 8006e1a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e1e:	e10e      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e20:	2308      	movs	r3, #8
 8006e22:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e26:	e10a      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e28:	2310      	movs	r3, #16
 8006e2a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e2e:	e106      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e30:	697b      	ldr	r3, [r7, #20]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	4a7c      	ldr	r2, [pc, #496]	@ (8007028 <UART_SetConfig+0x2e8>)
 8006e36:	4293      	cmp	r3, r2
 8006e38:	d138      	bne.n	8006eac <UART_SetConfig+0x16c>
 8006e3a:	4b7a      	ldr	r3, [pc, #488]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006e3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006e40:	f003 030c 	and.w	r3, r3, #12
 8006e44:	2b0c      	cmp	r3, #12
 8006e46:	d82d      	bhi.n	8006ea4 <UART_SetConfig+0x164>
 8006e48:	a201      	add	r2, pc, #4	@ (adr r2, 8006e50 <UART_SetConfig+0x110>)
 8006e4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4e:	bf00      	nop
 8006e50:	08006e85 	.word	0x08006e85
 8006e54:	08006ea5 	.word	0x08006ea5
 8006e58:	08006ea5 	.word	0x08006ea5
 8006e5c:	08006ea5 	.word	0x08006ea5
 8006e60:	08006e95 	.word	0x08006e95
 8006e64:	08006ea5 	.word	0x08006ea5
 8006e68:	08006ea5 	.word	0x08006ea5
 8006e6c:	08006ea5 	.word	0x08006ea5
 8006e70:	08006e8d 	.word	0x08006e8d
 8006e74:	08006ea5 	.word	0x08006ea5
 8006e78:	08006ea5 	.word	0x08006ea5
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006e9d 	.word	0x08006e9d
 8006e84:	2300      	movs	r3, #0
 8006e86:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e8a:	e0d8      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e8c:	2302      	movs	r3, #2
 8006e8e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e92:	e0d4      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e94:	2304      	movs	r3, #4
 8006e96:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006e9a:	e0d0      	b.n	800703e <UART_SetConfig+0x2fe>
 8006e9c:	2308      	movs	r3, #8
 8006e9e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ea2:	e0cc      	b.n	800703e <UART_SetConfig+0x2fe>
 8006ea4:	2310      	movs	r3, #16
 8006ea6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006eaa:	e0c8      	b.n	800703e <UART_SetConfig+0x2fe>
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	4a5e      	ldr	r2, [pc, #376]	@ (800702c <UART_SetConfig+0x2ec>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d125      	bne.n	8006f02 <UART_SetConfig+0x1c2>
 8006eb6:	4b5b      	ldr	r3, [pc, #364]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006eb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006ebc:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006ec0:	2b30      	cmp	r3, #48	@ 0x30
 8006ec2:	d016      	beq.n	8006ef2 <UART_SetConfig+0x1b2>
 8006ec4:	2b30      	cmp	r3, #48	@ 0x30
 8006ec6:	d818      	bhi.n	8006efa <UART_SetConfig+0x1ba>
 8006ec8:	2b20      	cmp	r3, #32
 8006eca:	d00a      	beq.n	8006ee2 <UART_SetConfig+0x1a2>
 8006ecc:	2b20      	cmp	r3, #32
 8006ece:	d814      	bhi.n	8006efa <UART_SetConfig+0x1ba>
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d002      	beq.n	8006eda <UART_SetConfig+0x19a>
 8006ed4:	2b10      	cmp	r3, #16
 8006ed6:	d008      	beq.n	8006eea <UART_SetConfig+0x1aa>
 8006ed8:	e00f      	b.n	8006efa <UART_SetConfig+0x1ba>
 8006eda:	2300      	movs	r3, #0
 8006edc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee0:	e0ad      	b.n	800703e <UART_SetConfig+0x2fe>
 8006ee2:	2302      	movs	r3, #2
 8006ee4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ee8:	e0a9      	b.n	800703e <UART_SetConfig+0x2fe>
 8006eea:	2304      	movs	r3, #4
 8006eec:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef0:	e0a5      	b.n	800703e <UART_SetConfig+0x2fe>
 8006ef2:	2308      	movs	r3, #8
 8006ef4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ef8:	e0a1      	b.n	800703e <UART_SetConfig+0x2fe>
 8006efa:	2310      	movs	r3, #16
 8006efc:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f00:	e09d      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a4a      	ldr	r2, [pc, #296]	@ (8007030 <UART_SetConfig+0x2f0>)
 8006f08:	4293      	cmp	r3, r2
 8006f0a:	d125      	bne.n	8006f58 <UART_SetConfig+0x218>
 8006f0c:	4b45      	ldr	r3, [pc, #276]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006f0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f12:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006f16:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f18:	d016      	beq.n	8006f48 <UART_SetConfig+0x208>
 8006f1a:	2bc0      	cmp	r3, #192	@ 0xc0
 8006f1c:	d818      	bhi.n	8006f50 <UART_SetConfig+0x210>
 8006f1e:	2b80      	cmp	r3, #128	@ 0x80
 8006f20:	d00a      	beq.n	8006f38 <UART_SetConfig+0x1f8>
 8006f22:	2b80      	cmp	r3, #128	@ 0x80
 8006f24:	d814      	bhi.n	8006f50 <UART_SetConfig+0x210>
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d002      	beq.n	8006f30 <UART_SetConfig+0x1f0>
 8006f2a:	2b40      	cmp	r3, #64	@ 0x40
 8006f2c:	d008      	beq.n	8006f40 <UART_SetConfig+0x200>
 8006f2e:	e00f      	b.n	8006f50 <UART_SetConfig+0x210>
 8006f30:	2300      	movs	r3, #0
 8006f32:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f36:	e082      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f38:	2302      	movs	r3, #2
 8006f3a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f3e:	e07e      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f40:	2304      	movs	r3, #4
 8006f42:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f46:	e07a      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f48:	2308      	movs	r3, #8
 8006f4a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f4e:	e076      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f50:	2310      	movs	r3, #16
 8006f52:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f56:	e072      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f58:	697b      	ldr	r3, [r7, #20]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	4a35      	ldr	r2, [pc, #212]	@ (8007034 <UART_SetConfig+0x2f4>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d12a      	bne.n	8006fb8 <UART_SetConfig+0x278>
 8006f62:	4b30      	ldr	r3, [pc, #192]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006f64:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006f68:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f6c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f70:	d01a      	beq.n	8006fa8 <UART_SetConfig+0x268>
 8006f72:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006f76:	d81b      	bhi.n	8006fb0 <UART_SetConfig+0x270>
 8006f78:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f7c:	d00c      	beq.n	8006f98 <UART_SetConfig+0x258>
 8006f7e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006f82:	d815      	bhi.n	8006fb0 <UART_SetConfig+0x270>
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d003      	beq.n	8006f90 <UART_SetConfig+0x250>
 8006f88:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f8c:	d008      	beq.n	8006fa0 <UART_SetConfig+0x260>
 8006f8e:	e00f      	b.n	8006fb0 <UART_SetConfig+0x270>
 8006f90:	2300      	movs	r3, #0
 8006f92:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f96:	e052      	b.n	800703e <UART_SetConfig+0x2fe>
 8006f98:	2302      	movs	r3, #2
 8006f9a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006f9e:	e04e      	b.n	800703e <UART_SetConfig+0x2fe>
 8006fa0:	2304      	movs	r3, #4
 8006fa2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fa6:	e04a      	b.n	800703e <UART_SetConfig+0x2fe>
 8006fa8:	2308      	movs	r3, #8
 8006faa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fae:	e046      	b.n	800703e <UART_SetConfig+0x2fe>
 8006fb0:	2310      	movs	r3, #16
 8006fb2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006fb6:	e042      	b.n	800703e <UART_SetConfig+0x2fe>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a17      	ldr	r2, [pc, #92]	@ (800701c <UART_SetConfig+0x2dc>)
 8006fbe:	4293      	cmp	r3, r2
 8006fc0:	d13a      	bne.n	8007038 <UART_SetConfig+0x2f8>
 8006fc2:	4b18      	ldr	r3, [pc, #96]	@ (8007024 <UART_SetConfig+0x2e4>)
 8006fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006fc8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006fcc:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fd0:	d01a      	beq.n	8007008 <UART_SetConfig+0x2c8>
 8006fd2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006fd6:	d81b      	bhi.n	8007010 <UART_SetConfig+0x2d0>
 8006fd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fdc:	d00c      	beq.n	8006ff8 <UART_SetConfig+0x2b8>
 8006fde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fe2:	d815      	bhi.n	8007010 <UART_SetConfig+0x2d0>
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d003      	beq.n	8006ff0 <UART_SetConfig+0x2b0>
 8006fe8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006fec:	d008      	beq.n	8007000 <UART_SetConfig+0x2c0>
 8006fee:	e00f      	b.n	8007010 <UART_SetConfig+0x2d0>
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ff6:	e022      	b.n	800703e <UART_SetConfig+0x2fe>
 8006ff8:	2302      	movs	r3, #2
 8006ffa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006ffe:	e01e      	b.n	800703e <UART_SetConfig+0x2fe>
 8007000:	2304      	movs	r3, #4
 8007002:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007006:	e01a      	b.n	800703e <UART_SetConfig+0x2fe>
 8007008:	2308      	movs	r3, #8
 800700a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800700e:	e016      	b.n	800703e <UART_SetConfig+0x2fe>
 8007010:	2310      	movs	r3, #16
 8007012:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007016:	e012      	b.n	800703e <UART_SetConfig+0x2fe>
 8007018:	cfff69f3 	.word	0xcfff69f3
 800701c:	40008000 	.word	0x40008000
 8007020:	40013800 	.word	0x40013800
 8007024:	40021000 	.word	0x40021000
 8007028:	40004400 	.word	0x40004400
 800702c:	40004800 	.word	0x40004800
 8007030:	40004c00 	.word	0x40004c00
 8007034:	40005000 	.word	0x40005000
 8007038:	2310      	movs	r3, #16
 800703a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800703e:	697b      	ldr	r3, [r7, #20]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	4aae      	ldr	r2, [pc, #696]	@ (80072fc <UART_SetConfig+0x5bc>)
 8007044:	4293      	cmp	r3, r2
 8007046:	f040 8097 	bne.w	8007178 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800704a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800704e:	2b08      	cmp	r3, #8
 8007050:	d823      	bhi.n	800709a <UART_SetConfig+0x35a>
 8007052:	a201      	add	r2, pc, #4	@ (adr r2, 8007058 <UART_SetConfig+0x318>)
 8007054:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007058:	0800707d 	.word	0x0800707d
 800705c:	0800709b 	.word	0x0800709b
 8007060:	08007085 	.word	0x08007085
 8007064:	0800709b 	.word	0x0800709b
 8007068:	0800708b 	.word	0x0800708b
 800706c:	0800709b 	.word	0x0800709b
 8007070:	0800709b 	.word	0x0800709b
 8007074:	0800709b 	.word	0x0800709b
 8007078:	08007093 	.word	0x08007093
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800707c:	f7fe fbd0 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8007080:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007082:	e010      	b.n	80070a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007084:	4b9e      	ldr	r3, [pc, #632]	@ (8007300 <UART_SetConfig+0x5c0>)
 8007086:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007088:	e00d      	b.n	80070a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800708a:	f7fe fb31 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 800708e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007090:	e009      	b.n	80070a6 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007092:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007096:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007098:	e005      	b.n	80070a6 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800709e:	2301      	movs	r3, #1
 80070a0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80070a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80070a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070a8:	2b00      	cmp	r3, #0
 80070aa:	f000 8130 	beq.w	800730e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80070ae:	697b      	ldr	r3, [r7, #20]
 80070b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070b2:	4a94      	ldr	r2, [pc, #592]	@ (8007304 <UART_SetConfig+0x5c4>)
 80070b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070b8:	461a      	mov	r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	fbb3 f3f2 	udiv	r3, r3, r2
 80070c0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070c2:	697b      	ldr	r3, [r7, #20]
 80070c4:	685a      	ldr	r2, [r3, #4]
 80070c6:	4613      	mov	r3, r2
 80070c8:	005b      	lsls	r3, r3, #1
 80070ca:	4413      	add	r3, r2
 80070cc:	69ba      	ldr	r2, [r7, #24]
 80070ce:	429a      	cmp	r2, r3
 80070d0:	d305      	bcc.n	80070de <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80070d2:	697b      	ldr	r3, [r7, #20]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070d8:	69ba      	ldr	r2, [r7, #24]
 80070da:	429a      	cmp	r2, r3
 80070dc:	d903      	bls.n	80070e6 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80070e4:	e113      	b.n	800730e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80070e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e8:	2200      	movs	r2, #0
 80070ea:	60bb      	str	r3, [r7, #8]
 80070ec:	60fa      	str	r2, [r7, #12]
 80070ee:	697b      	ldr	r3, [r7, #20]
 80070f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80070f2:	4a84      	ldr	r2, [pc, #528]	@ (8007304 <UART_SetConfig+0x5c4>)
 80070f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	2200      	movs	r2, #0
 80070fc:	603b      	str	r3, [r7, #0]
 80070fe:	607a      	str	r2, [r7, #4]
 8007100:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007104:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8007108:	f7f9 fd66 	bl	8000bd8 <__aeabi_uldivmod>
 800710c:	4602      	mov	r2, r0
 800710e:	460b      	mov	r3, r1
 8007110:	4610      	mov	r0, r2
 8007112:	4619      	mov	r1, r3
 8007114:	f04f 0200 	mov.w	r2, #0
 8007118:	f04f 0300 	mov.w	r3, #0
 800711c:	020b      	lsls	r3, r1, #8
 800711e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8007122:	0202      	lsls	r2, r0, #8
 8007124:	6979      	ldr	r1, [r7, #20]
 8007126:	6849      	ldr	r1, [r1, #4]
 8007128:	0849      	lsrs	r1, r1, #1
 800712a:	2000      	movs	r0, #0
 800712c:	460c      	mov	r4, r1
 800712e:	4605      	mov	r5, r0
 8007130:	eb12 0804 	adds.w	r8, r2, r4
 8007134:	eb43 0905 	adc.w	r9, r3, r5
 8007138:	697b      	ldr	r3, [r7, #20]
 800713a:	685b      	ldr	r3, [r3, #4]
 800713c:	2200      	movs	r2, #0
 800713e:	469a      	mov	sl, r3
 8007140:	4693      	mov	fp, r2
 8007142:	4652      	mov	r2, sl
 8007144:	465b      	mov	r3, fp
 8007146:	4640      	mov	r0, r8
 8007148:	4649      	mov	r1, r9
 800714a:	f7f9 fd45 	bl	8000bd8 <__aeabi_uldivmod>
 800714e:	4602      	mov	r2, r0
 8007150:	460b      	mov	r3, r1
 8007152:	4613      	mov	r3, r2
 8007154:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007156:	6a3b      	ldr	r3, [r7, #32]
 8007158:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800715c:	d308      	bcc.n	8007170 <UART_SetConfig+0x430>
 800715e:	6a3b      	ldr	r3, [r7, #32]
 8007160:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007164:	d204      	bcs.n	8007170 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	6a3a      	ldr	r2, [r7, #32]
 800716c:	60da      	str	r2, [r3, #12]
 800716e:	e0ce      	b.n	800730e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8007170:	2301      	movs	r3, #1
 8007172:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8007176:	e0ca      	b.n	800730e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007178:	697b      	ldr	r3, [r7, #20]
 800717a:	69db      	ldr	r3, [r3, #28]
 800717c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007180:	d166      	bne.n	8007250 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8007182:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007186:	2b08      	cmp	r3, #8
 8007188:	d827      	bhi.n	80071da <UART_SetConfig+0x49a>
 800718a:	a201      	add	r2, pc, #4	@ (adr r2, 8007190 <UART_SetConfig+0x450>)
 800718c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007190:	080071b5 	.word	0x080071b5
 8007194:	080071bd 	.word	0x080071bd
 8007198:	080071c5 	.word	0x080071c5
 800719c:	080071db 	.word	0x080071db
 80071a0:	080071cb 	.word	0x080071cb
 80071a4:	080071db 	.word	0x080071db
 80071a8:	080071db 	.word	0x080071db
 80071ac:	080071db 	.word	0x080071db
 80071b0:	080071d3 	.word	0x080071d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80071b4:	f7fe fb34 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 80071b8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071ba:	e014      	b.n	80071e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80071bc:	f7fe fb46 	bl	800584c <HAL_RCC_GetPCLK2Freq>
 80071c0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071c2:	e010      	b.n	80071e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80071c4:	4b4e      	ldr	r3, [pc, #312]	@ (8007300 <UART_SetConfig+0x5c0>)
 80071c6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071c8:	e00d      	b.n	80071e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80071ca:	f7fe fa91 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 80071ce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80071d0:	e009      	b.n	80071e6 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80071d2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80071d6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80071d8:	e005      	b.n	80071e6 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80071da:	2300      	movs	r3, #0
 80071dc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80071e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80071e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	f000 8090 	beq.w	800730e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80071ee:	697b      	ldr	r3, [r7, #20]
 80071f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80071f2:	4a44      	ldr	r2, [pc, #272]	@ (8007304 <UART_SetConfig+0x5c4>)
 80071f4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80071f8:	461a      	mov	r2, r3
 80071fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071fc:	fbb3 f3f2 	udiv	r3, r3, r2
 8007200:	005a      	lsls	r2, r3, #1
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	685b      	ldr	r3, [r3, #4]
 8007206:	085b      	lsrs	r3, r3, #1
 8007208:	441a      	add	r2, r3
 800720a:	697b      	ldr	r3, [r7, #20]
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007212:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	2b0f      	cmp	r3, #15
 8007218:	d916      	bls.n	8007248 <UART_SetConfig+0x508>
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007220:	d212      	bcs.n	8007248 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007222:	6a3b      	ldr	r3, [r7, #32]
 8007224:	b29b      	uxth	r3, r3
 8007226:	f023 030f 	bic.w	r3, r3, #15
 800722a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	085b      	lsrs	r3, r3, #1
 8007230:	b29b      	uxth	r3, r3
 8007232:	f003 0307 	and.w	r3, r3, #7
 8007236:	b29a      	uxth	r2, r3
 8007238:	8bfb      	ldrh	r3, [r7, #30]
 800723a:	4313      	orrs	r3, r2
 800723c:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	8bfa      	ldrh	r2, [r7, #30]
 8007244:	60da      	str	r2, [r3, #12]
 8007246:	e062      	b.n	800730e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8007248:	2301      	movs	r3, #1
 800724a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800724e:	e05e      	b.n	800730e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007250:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007254:	2b08      	cmp	r3, #8
 8007256:	d828      	bhi.n	80072aa <UART_SetConfig+0x56a>
 8007258:	a201      	add	r2, pc, #4	@ (adr r2, 8007260 <UART_SetConfig+0x520>)
 800725a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800725e:	bf00      	nop
 8007260:	08007285 	.word	0x08007285
 8007264:	0800728d 	.word	0x0800728d
 8007268:	08007295 	.word	0x08007295
 800726c:	080072ab 	.word	0x080072ab
 8007270:	0800729b 	.word	0x0800729b
 8007274:	080072ab 	.word	0x080072ab
 8007278:	080072ab 	.word	0x080072ab
 800727c:	080072ab 	.word	0x080072ab
 8007280:	080072a3 	.word	0x080072a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007284:	f7fe facc 	bl	8005820 <HAL_RCC_GetPCLK1Freq>
 8007288:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800728a:	e014      	b.n	80072b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800728c:	f7fe fade 	bl	800584c <HAL_RCC_GetPCLK2Freq>
 8007290:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8007292:	e010      	b.n	80072b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007294:	4b1a      	ldr	r3, [pc, #104]	@ (8007300 <UART_SetConfig+0x5c0>)
 8007296:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8007298:	e00d      	b.n	80072b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800729a:	f7fe fa29 	bl	80056f0 <HAL_RCC_GetSysClockFreq>
 800729e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80072a0:	e009      	b.n	80072b6 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80072a2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80072a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80072a8:	e005      	b.n	80072b6 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 80072aa:	2300      	movs	r3, #0
 80072ac:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80072ae:	2301      	movs	r3, #1
 80072b0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80072b4:	bf00      	nop
    }

    if (pclk != 0U)
 80072b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d028      	beq.n	800730e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80072bc:	697b      	ldr	r3, [r7, #20]
 80072be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80072c0:	4a10      	ldr	r2, [pc, #64]	@ (8007304 <UART_SetConfig+0x5c4>)
 80072c2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80072c6:	461a      	mov	r2, r3
 80072c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072ca:	fbb3 f2f2 	udiv	r2, r3, r2
 80072ce:	697b      	ldr	r3, [r7, #20]
 80072d0:	685b      	ldr	r3, [r3, #4]
 80072d2:	085b      	lsrs	r3, r3, #1
 80072d4:	441a      	add	r2, r3
 80072d6:	697b      	ldr	r3, [r7, #20]
 80072d8:	685b      	ldr	r3, [r3, #4]
 80072da:	fbb2 f3f3 	udiv	r3, r2, r3
 80072de:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80072e0:	6a3b      	ldr	r3, [r7, #32]
 80072e2:	2b0f      	cmp	r3, #15
 80072e4:	d910      	bls.n	8007308 <UART_SetConfig+0x5c8>
 80072e6:	6a3b      	ldr	r3, [r7, #32]
 80072e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80072ec:	d20c      	bcs.n	8007308 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80072ee:	6a3b      	ldr	r3, [r7, #32]
 80072f0:	b29a      	uxth	r2, r3
 80072f2:	697b      	ldr	r3, [r7, #20]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	60da      	str	r2, [r3, #12]
 80072f8:	e009      	b.n	800730e <UART_SetConfig+0x5ce>
 80072fa:	bf00      	nop
 80072fc:	40008000 	.word	0x40008000
 8007300:	00f42400 	.word	0x00f42400
 8007304:	0800b090 	.word	0x0800b090
      }
      else
      {
        ret = HAL_ERROR;
 8007308:	2301      	movs	r3, #1
 800730a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2201      	movs	r2, #1
 8007312:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8007316:	697b      	ldr	r3, [r7, #20]
 8007318:	2201      	movs	r2, #1
 800731a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	2200      	movs	r2, #0
 8007322:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8007324:	697b      	ldr	r3, [r7, #20]
 8007326:	2200      	movs	r2, #0
 8007328:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800732a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800732e:	4618      	mov	r0, r3
 8007330:	3730      	adds	r7, #48	@ 0x30
 8007332:	46bd      	mov	sp, r7
 8007334:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08007338 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007344:	f003 0308 	and.w	r3, r3, #8
 8007348:	2b00      	cmp	r3, #0
 800734a:	d00a      	beq.n	8007362 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	430a      	orrs	r2, r1
 8007360:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007366:	f003 0301 	and.w	r3, r3, #1
 800736a:	2b00      	cmp	r3, #0
 800736c:	d00a      	beq.n	8007384 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	685b      	ldr	r3, [r3, #4]
 8007374:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	430a      	orrs	r2, r1
 8007382:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007388:	f003 0302 	and.w	r3, r3, #2
 800738c:	2b00      	cmp	r3, #0
 800738e:	d00a      	beq.n	80073a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	685b      	ldr	r3, [r3, #4]
 8007396:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	430a      	orrs	r2, r1
 80073a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073aa:	f003 0304 	and.w	r3, r3, #4
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d00a      	beq.n	80073c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	685b      	ldr	r3, [r3, #4]
 80073b8:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	430a      	orrs	r2, r1
 80073c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073cc:	f003 0310 	and.w	r3, r3, #16
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d00a      	beq.n	80073ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	689b      	ldr	r3, [r3, #8]
 80073da:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	430a      	orrs	r2, r1
 80073e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80073ee:	f003 0320 	and.w	r3, r3, #32
 80073f2:	2b00      	cmp	r3, #0
 80073f4:	d00a      	beq.n	800740c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	430a      	orrs	r2, r1
 800740a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007410:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007414:	2b00      	cmp	r3, #0
 8007416:	d01a      	beq.n	800744e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	685b      	ldr	r3, [r3, #4]
 800741e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	430a      	orrs	r2, r1
 800742c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8007432:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8007436:	d10a      	bne.n	800744e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	430a      	orrs	r2, r1
 800744c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007452:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007456:	2b00      	cmp	r3, #0
 8007458:	d00a      	beq.n	8007470 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	685b      	ldr	r3, [r3, #4]
 8007460:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	430a      	orrs	r2, r1
 800746e:	605a      	str	r2, [r3, #4]
  }
}
 8007470:	bf00      	nop
 8007472:	370c      	adds	r7, #12
 8007474:	46bd      	mov	sp, r7
 8007476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800747a:	4770      	bx	lr

0800747c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800747c:	b580      	push	{r7, lr}
 800747e:	b098      	sub	sp, #96	@ 0x60
 8007480:	af02      	add	r7, sp, #8
 8007482:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	2200      	movs	r2, #0
 8007488:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800748c:	f7fa ff44 	bl	8002318 <HAL_GetTick>
 8007490:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	f003 0308 	and.w	r3, r3, #8
 800749c:	2b08      	cmp	r3, #8
 800749e:	d12f      	bne.n	8007500 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80074a0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80074a4:	9300      	str	r3, [sp, #0]
 80074a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80074a8:	2200      	movs	r2, #0
 80074aa:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f88e 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 80074b4:	4603      	mov	r3, r0
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d022      	beq.n	8007500 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80074c2:	e853 3f00 	ldrex	r3, [r3]
 80074c6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80074c8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80074ca:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80074ce:	653b      	str	r3, [r7, #80]	@ 0x50
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	461a      	mov	r2, r3
 80074d6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80074d8:	647b      	str	r3, [r7, #68]	@ 0x44
 80074da:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074dc:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80074de:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80074e0:	e841 2300 	strex	r3, r2, [r1]
 80074e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80074e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d1e6      	bne.n	80074ba <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2220      	movs	r2, #32
 80074f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	2200      	movs	r2, #0
 80074f8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80074fc:	2303      	movs	r3, #3
 80074fe:	e063      	b.n	80075c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0304 	and.w	r3, r3, #4
 800750a:	2b04      	cmp	r3, #4
 800750c:	d149      	bne.n	80075a2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800750e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8007512:	9300      	str	r3, [sp, #0]
 8007514:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007516:	2200      	movs	r2, #0
 8007518:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800751c:	6878      	ldr	r0, [r7, #4]
 800751e:	f000 f857 	bl	80075d0 <UART_WaitOnFlagUntilTimeout>
 8007522:	4603      	mov	r3, r0
 8007524:	2b00      	cmp	r3, #0
 8007526:	d03c      	beq.n	80075a2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800752e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007530:	e853 3f00 	ldrex	r3, [r3]
 8007534:	623b      	str	r3, [r7, #32]
   return(result);
 8007536:	6a3b      	ldr	r3, [r7, #32]
 8007538:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800753c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	461a      	mov	r2, r3
 8007544:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007546:	633b      	str	r3, [r7, #48]	@ 0x30
 8007548:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800754a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800754c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800754e:	e841 2300 	strex	r3, r2, [r1]
 8007552:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007554:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007556:	2b00      	cmp	r3, #0
 8007558:	d1e6      	bne.n	8007528 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	3308      	adds	r3, #8
 8007560:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007562:	693b      	ldr	r3, [r7, #16]
 8007564:	e853 3f00 	ldrex	r3, [r3]
 8007568:	60fb      	str	r3, [r7, #12]
   return(result);
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	f023 0301 	bic.w	r3, r3, #1
 8007570:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	3308      	adds	r3, #8
 8007578:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800757a:	61fa      	str	r2, [r7, #28]
 800757c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800757e:	69b9      	ldr	r1, [r7, #24]
 8007580:	69fa      	ldr	r2, [r7, #28]
 8007582:	e841 2300 	strex	r3, r2, [r1]
 8007586:	617b      	str	r3, [r7, #20]
   return(result);
 8007588:	697b      	ldr	r3, [r7, #20]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d1e5      	bne.n	800755a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	2200      	movs	r2, #0
 800759a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800759e:	2303      	movs	r3, #3
 80075a0:	e012      	b.n	80075c8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2220      	movs	r2, #32
 80075a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	2220      	movs	r2, #32
 80075ae:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2200      	movs	r2, #0
 80075b6:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	2200      	movs	r2, #0
 80075bc:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	2200      	movs	r2, #0
 80075c2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80075c6:	2300      	movs	r3, #0
}
 80075c8:	4618      	mov	r0, r3
 80075ca:	3758      	adds	r7, #88	@ 0x58
 80075cc:	46bd      	mov	sp, r7
 80075ce:	bd80      	pop	{r7, pc}

080075d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80075d0:	b580      	push	{r7, lr}
 80075d2:	b084      	sub	sp, #16
 80075d4:	af00      	add	r7, sp, #0
 80075d6:	60f8      	str	r0, [r7, #12]
 80075d8:	60b9      	str	r1, [r7, #8]
 80075da:	603b      	str	r3, [r7, #0]
 80075dc:	4613      	mov	r3, r2
 80075de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80075e0:	e04f      	b.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80075e2:	69bb      	ldr	r3, [r7, #24]
 80075e4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80075e8:	d04b      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80075ea:	f7fa fe95 	bl	8002318 <HAL_GetTick>
 80075ee:	4602      	mov	r2, r0
 80075f0:	683b      	ldr	r3, [r7, #0]
 80075f2:	1ad3      	subs	r3, r2, r3
 80075f4:	69ba      	ldr	r2, [r7, #24]
 80075f6:	429a      	cmp	r2, r3
 80075f8:	d302      	bcc.n	8007600 <UART_WaitOnFlagUntilTimeout+0x30>
 80075fa:	69bb      	ldr	r3, [r7, #24]
 80075fc:	2b00      	cmp	r3, #0
 80075fe:	d101      	bne.n	8007604 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007600:	2303      	movs	r3, #3
 8007602:	e04e      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	f003 0304 	and.w	r3, r3, #4
 800760e:	2b00      	cmp	r3, #0
 8007610:	d037      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	2b80      	cmp	r3, #128	@ 0x80
 8007616:	d034      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
 8007618:	68bb      	ldr	r3, [r7, #8]
 800761a:	2b40      	cmp	r3, #64	@ 0x40
 800761c:	d031      	beq.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	69db      	ldr	r3, [r3, #28]
 8007624:	f003 0308 	and.w	r3, r3, #8
 8007628:	2b08      	cmp	r3, #8
 800762a:	d110      	bne.n	800764e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	2208      	movs	r2, #8
 8007632:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007634:	68f8      	ldr	r0, [r7, #12]
 8007636:	f000 f95b 	bl	80078f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	2208      	movs	r2, #8
 800763e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	2200      	movs	r2, #0
 8007646:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800764a:	2301      	movs	r3, #1
 800764c:	e029      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	69db      	ldr	r3, [r3, #28]
 8007654:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8007658:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800765c:	d111      	bne.n	8007682 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800765e:	68fb      	ldr	r3, [r7, #12]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007666:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007668:	68f8      	ldr	r0, [r7, #12]
 800766a:	f000 f941 	bl	80078f0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	2220      	movs	r2, #32
 8007672:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	2200      	movs	r2, #0
 800767a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 800767e:	2303      	movs	r3, #3
 8007680:	e00f      	b.n	80076a2 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007682:	68fb      	ldr	r3, [r7, #12]
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	69da      	ldr	r2, [r3, #28]
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	4013      	ands	r3, r2
 800768c:	68ba      	ldr	r2, [r7, #8]
 800768e:	429a      	cmp	r2, r3
 8007690:	bf0c      	ite	eq
 8007692:	2301      	moveq	r3, #1
 8007694:	2300      	movne	r3, #0
 8007696:	b2db      	uxtb	r3, r3
 8007698:	461a      	mov	r2, r3
 800769a:	79fb      	ldrb	r3, [r7, #7]
 800769c:	429a      	cmp	r2, r3
 800769e:	d0a0      	beq.n	80075e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80076a0:	2300      	movs	r3, #0
}
 80076a2:	4618      	mov	r0, r3
 80076a4:	3710      	adds	r7, #16
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
	...

080076ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b0a3      	sub	sp, #140	@ 0x8c
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	4613      	mov	r3, r2
 80076b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	68ba      	ldr	r2, [r7, #8]
 80076be:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	88fa      	ldrh	r2, [r7, #6]
 80076c4:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	88fa      	ldrh	r2, [r7, #6]
 80076cc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	2200      	movs	r2, #0
 80076d4:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	689b      	ldr	r3, [r3, #8]
 80076da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80076de:	d10e      	bne.n	80076fe <UART_Start_Receive_IT+0x52>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	691b      	ldr	r3, [r3, #16]
 80076e4:	2b00      	cmp	r3, #0
 80076e6:	d105      	bne.n	80076f4 <UART_Start_Receive_IT+0x48>
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	f240 12ff 	movw	r2, #511	@ 0x1ff
 80076ee:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076f2:	e02d      	b.n	8007750 <UART_Start_Receive_IT+0xa4>
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	22ff      	movs	r2, #255	@ 0xff
 80076f8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80076fc:	e028      	b.n	8007750 <UART_Start_Receive_IT+0xa4>
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	689b      	ldr	r3, [r3, #8]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d10d      	bne.n	8007722 <UART_Start_Receive_IT+0x76>
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	691b      	ldr	r3, [r3, #16]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d104      	bne.n	8007718 <UART_Start_Receive_IT+0x6c>
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	22ff      	movs	r2, #255	@ 0xff
 8007712:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007716:	e01b      	b.n	8007750 <UART_Start_Receive_IT+0xa4>
 8007718:	68fb      	ldr	r3, [r7, #12]
 800771a:	227f      	movs	r2, #127	@ 0x7f
 800771c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007720:	e016      	b.n	8007750 <UART_Start_Receive_IT+0xa4>
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	689b      	ldr	r3, [r3, #8]
 8007726:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800772a:	d10d      	bne.n	8007748 <UART_Start_Receive_IT+0x9c>
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	691b      	ldr	r3, [r3, #16]
 8007730:	2b00      	cmp	r3, #0
 8007732:	d104      	bne.n	800773e <UART_Start_Receive_IT+0x92>
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	227f      	movs	r2, #127	@ 0x7f
 8007738:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800773c:	e008      	b.n	8007750 <UART_Start_Receive_IT+0xa4>
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	223f      	movs	r2, #63	@ 0x3f
 8007742:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007746:	e003      	b.n	8007750 <UART_Start_Receive_IT+0xa4>
 8007748:	68fb      	ldr	r3, [r7, #12]
 800774a:	2200      	movs	r2, #0
 800774c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	2200      	movs	r2, #0
 8007754:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2222      	movs	r2, #34	@ 0x22
 800775c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	3308      	adds	r3, #8
 8007766:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007768:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800776a:	e853 3f00 	ldrex	r3, [r3]
 800776e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007770:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007772:	f043 0301 	orr.w	r3, r3, #1
 8007776:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	3308      	adds	r3, #8
 8007780:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8007784:	673a      	str	r2, [r7, #112]	@ 0x70
 8007786:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007788:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800778a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 800778c:	e841 2300 	strex	r3, r2, [r1]
 8007790:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 8007792:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007794:	2b00      	cmp	r3, #0
 8007796:	d1e3      	bne.n	8007760 <UART_Start_Receive_IT+0xb4>

#if defined(USART_CR1_FIFOEN)
  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800779c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80077a0:	d14f      	bne.n	8007842 <UART_Start_Receive_IT+0x196>
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80077a8:	88fa      	ldrh	r2, [r7, #6]
 80077aa:	429a      	cmp	r2, r3
 80077ac:	d349      	bcc.n	8007842 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	689b      	ldr	r3, [r3, #8]
 80077b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80077b6:	d107      	bne.n	80077c8 <UART_Start_Receive_IT+0x11c>
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	691b      	ldr	r3, [r3, #16]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d103      	bne.n	80077c8 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4a47      	ldr	r2, [pc, #284]	@ (80078e0 <UART_Start_Receive_IT+0x234>)
 80077c4:	675a      	str	r2, [r3, #116]	@ 0x74
 80077c6:	e002      	b.n	80077ce <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	4a46      	ldr	r2, [pc, #280]	@ (80078e4 <UART_Start_Receive_IT+0x238>)
 80077cc:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	691b      	ldr	r3, [r3, #16]
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d01a      	beq.n	800780c <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077dc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80077de:	e853 3f00 	ldrex	r3, [r3]
 80077e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80077e4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80077ea:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80077ee:	68fb      	ldr	r3, [r7, #12]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	461a      	mov	r2, r3
 80077f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80077f8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80077fa:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077fc:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 80077fe:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007800:	e841 2300 	strex	r3, r2, [r1]
 8007804:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8007806:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007808:	2b00      	cmp	r3, #0
 800780a:	d1e4      	bne.n	80077d6 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	3308      	adds	r3, #8
 8007812:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800781c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800781e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007822:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	3308      	adds	r3, #8
 800782a:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800782c:	64ba      	str	r2, [r7, #72]	@ 0x48
 800782e:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007830:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8007832:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007834:	e841 2300 	strex	r3, r2, [r1]
 8007838:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 800783a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1e5      	bne.n	800780c <UART_Start_Receive_IT+0x160>
 8007840:	e046      	b.n	80078d0 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800784a:	d107      	bne.n	800785c <UART_Start_Receive_IT+0x1b0>
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	691b      	ldr	r3, [r3, #16]
 8007850:	2b00      	cmp	r3, #0
 8007852:	d103      	bne.n	800785c <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4a24      	ldr	r2, [pc, #144]	@ (80078e8 <UART_Start_Receive_IT+0x23c>)
 8007858:	675a      	str	r2, [r3, #116]	@ 0x74
 800785a:	e002      	b.n	8007862 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	4a23      	ldr	r2, [pc, #140]	@ (80078ec <UART_Start_Receive_IT+0x240>)
 8007860:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d019      	beq.n	800789e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007870:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007872:	e853 3f00 	ldrex	r3, [r3]
 8007876:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800787a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 800787e:	677b      	str	r3, [r7, #116]	@ 0x74
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	461a      	mov	r2, r3
 8007886:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007888:	637b      	str	r3, [r7, #52]	@ 0x34
 800788a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800788c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800788e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007890:	e841 2300 	strex	r3, r2, [r1]
 8007894:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8007896:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007898:	2b00      	cmp	r3, #0
 800789a:	d1e6      	bne.n	800786a <UART_Start_Receive_IT+0x1be>
 800789c:	e018      	b.n	80078d0 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078a4:	697b      	ldr	r3, [r7, #20]
 80078a6:	e853 3f00 	ldrex	r3, [r3]
 80078aa:	613b      	str	r3, [r7, #16]
   return(result);
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	f043 0320 	orr.w	r3, r3, #32
 80078b2:	67bb      	str	r3, [r7, #120]	@ 0x78
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	461a      	mov	r2, r3
 80078ba:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80078bc:	623b      	str	r3, [r7, #32]
 80078be:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078c0:	69f9      	ldr	r1, [r7, #28]
 80078c2:	6a3a      	ldr	r2, [r7, #32]
 80078c4:	e841 2300 	strex	r3, r2, [r1]
 80078c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80078ca:	69bb      	ldr	r3, [r7, #24]
 80078cc:	2b00      	cmp	r3, #0
 80078ce:	d1e6      	bne.n	800789e <UART_Start_Receive_IT+0x1f2>
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80078d0:	2300      	movs	r3, #0
}
 80078d2:	4618      	mov	r0, r3
 80078d4:	378c      	adds	r7, #140	@ 0x8c
 80078d6:	46bd      	mov	sp, r7
 80078d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078dc:	4770      	bx	lr
 80078de:	bf00      	nop
 80078e0:	08008121 	.word	0x08008121
 80078e4:	08007db9 	.word	0x08007db9
 80078e8:	08007bfd 	.word	0x08007bfd
 80078ec:	08007a41 	.word	0x08007a41

080078f0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80078f0:	b480      	push	{r7}
 80078f2:	b095      	sub	sp, #84	@ 0x54
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007900:	e853 3f00 	ldrex	r3, [r3]
 8007904:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007908:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800790c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	461a      	mov	r2, r3
 8007914:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007916:	643b      	str	r3, [r7, #64]	@ 0x40
 8007918:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800791a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800791c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800791e:	e841 2300 	strex	r3, r2, [r1]
 8007922:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007924:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007926:	2b00      	cmp	r3, #0
 8007928:	d1e6      	bne.n	80078f8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3308      	adds	r3, #8
 8007930:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007932:	6a3b      	ldr	r3, [r7, #32]
 8007934:	e853 3f00 	ldrex	r3, [r3]
 8007938:	61fb      	str	r3, [r7, #28]
   return(result);
 800793a:	69fb      	ldr	r3, [r7, #28]
 800793c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	3308      	adds	r3, #8
 800794c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800794e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007950:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007952:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007954:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007956:	e841 2300 	strex	r3, r2, [r1]
 800795a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800795c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d1e3      	bne.n	800792a <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007966:	2b01      	cmp	r3, #1
 8007968:	d118      	bne.n	800799c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	681b      	ldr	r3, [r3, #0]
 800796e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007970:	68fb      	ldr	r3, [r7, #12]
 8007972:	e853 3f00 	ldrex	r3, [r3]
 8007976:	60bb      	str	r3, [r7, #8]
   return(result);
 8007978:	68bb      	ldr	r3, [r7, #8]
 800797a:	f023 0310 	bic.w	r3, r3, #16
 800797e:	647b      	str	r3, [r7, #68]	@ 0x44
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	461a      	mov	r2, r3
 8007986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007988:	61bb      	str	r3, [r7, #24]
 800798a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798c:	6979      	ldr	r1, [r7, #20]
 800798e:	69ba      	ldr	r2, [r7, #24]
 8007990:	e841 2300 	strex	r3, r2, [r1]
 8007994:	613b      	str	r3, [r7, #16]
   return(result);
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	2b00      	cmp	r3, #0
 800799a:	d1e6      	bne.n	800796a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2200      	movs	r2, #0
 80079a8:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	2200      	movs	r2, #0
 80079ae:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80079b0:	bf00      	nop
 80079b2:	3754      	adds	r7, #84	@ 0x54
 80079b4:	46bd      	mov	sp, r7
 80079b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ba:	4770      	bx	lr

080079bc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	2200      	movs	r2, #0
 80079ce:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	2200      	movs	r2, #0
 80079d6:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80079da:	68f8      	ldr	r0, [r7, #12]
 80079dc:	f7ff f99a 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80079e0:	bf00      	nop
 80079e2:	3710      	adds	r7, #16
 80079e4:	46bd      	mov	sp, r7
 80079e6:	bd80      	pop	{r7, pc}

080079e8 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80079e8:	b580      	push	{r7, lr}
 80079ea:	b088      	sub	sp, #32
 80079ec:	af00      	add	r7, sp, #0
 80079ee:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	e853 3f00 	ldrex	r3, [r3]
 80079fc:	60bb      	str	r3, [r7, #8]
   return(result);
 80079fe:	68bb      	ldr	r3, [r7, #8]
 8007a00:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a04:	61fb      	str	r3, [r7, #28]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	461a      	mov	r2, r3
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	61bb      	str	r3, [r7, #24]
 8007a10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a12:	6979      	ldr	r1, [r7, #20]
 8007a14:	69ba      	ldr	r2, [r7, #24]
 8007a16:	e841 2300 	strex	r3, r2, [r1]
 8007a1a:	613b      	str	r3, [r7, #16]
   return(result);
 8007a1c:	693b      	ldr	r3, [r7, #16]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d1e6      	bne.n	80079f0 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007a22:	687b      	ldr	r3, [r7, #4]
 8007a24:	2220      	movs	r2, #32
 8007a26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	2200      	movs	r2, #0
 8007a2e:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	f7ff f965 	bl	8006d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007a36:	bf00      	nop
 8007a38:	3720      	adds	r7, #32
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
	...

08007a40 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007a40:	b580      	push	{r7, lr}
 8007a42:	b09c      	sub	sp, #112	@ 0x70
 8007a44:	af00      	add	r7, sp, #0
 8007a46:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007a48:	687b      	ldr	r3, [r7, #4]
 8007a4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a4e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a52:	687b      	ldr	r3, [r7, #4]
 8007a54:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a58:	2b22      	cmp	r3, #34	@ 0x22
 8007a5a:	f040 80be 	bne.w	8007bda <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007a64:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007a68:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8007a6c:	b2d9      	uxtb	r1, r3
 8007a6e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007a72:	b2da      	uxtb	r2, r3
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a78:	400a      	ands	r2, r1
 8007a7a:	b2d2      	uxtb	r2, r2
 8007a7c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007a82:	1c5a      	adds	r2, r3, #1
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007a8e:	b29b      	uxth	r3, r3
 8007a90:	3b01      	subs	r3, #1
 8007a92:	b29a      	uxth	r2, r3
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007aa0:	b29b      	uxth	r3, r3
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	f040 80a3 	bne.w	8007bee <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aae:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007ab0:	e853 3f00 	ldrex	r3, [r3]
 8007ab4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007ab6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007ab8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007abc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	681b      	ldr	r3, [r3, #0]
 8007ac2:	461a      	mov	r2, r3
 8007ac4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007ac8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aca:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007acc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007ace:	e841 2300 	strex	r3, r2, [r1]
 8007ad2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007ad4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d1e6      	bne.n	8007aa8 <UART_RxISR_8BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	3308      	adds	r3, #8
 8007ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae4:	e853 3f00 	ldrex	r3, [r3]
 8007ae8:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aec:	f023 0301 	bic.w	r3, r3, #1
 8007af0:	667b      	str	r3, [r7, #100]	@ 0x64
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	681b      	ldr	r3, [r3, #0]
 8007af6:	3308      	adds	r3, #8
 8007af8:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007afa:	647a      	str	r2, [r7, #68]	@ 0x44
 8007afc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007afe:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b00:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b02:	e841 2300 	strex	r3, r2, [r1]
 8007b06:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b08:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d1e5      	bne.n	8007ada <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2220      	movs	r2, #32
 8007b12:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	2200      	movs	r2, #0
 8007b1a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2200      	movs	r2, #0
 8007b20:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	4a34      	ldr	r2, [pc, #208]	@ (8007bf8 <UART_RxISR_8BIT+0x1b8>)
 8007b28:	4293      	cmp	r3, r2
 8007b2a:	d01f      	beq.n	8007b6c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	685b      	ldr	r3, [r3, #4]
 8007b32:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d018      	beq.n	8007b6c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b42:	e853 3f00 	ldrex	r3, [r3]
 8007b46:	623b      	str	r3, [r7, #32]
   return(result);
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007b4e:	663b      	str	r3, [r7, #96]	@ 0x60
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	461a      	mov	r2, r3
 8007b56:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007b58:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b5a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b5c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b60:	e841 2300 	strex	r3, r2, [r1]
 8007b64:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d1e6      	bne.n	8007b3a <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007b70:	2b01      	cmp	r3, #1
 8007b72:	d12e      	bne.n	8007bd2 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2200      	movs	r2, #0
 8007b78:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b80:	693b      	ldr	r3, [r7, #16]
 8007b82:	e853 3f00 	ldrex	r3, [r3]
 8007b86:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	f023 0310 	bic.w	r3, r3, #16
 8007b8e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	461a      	mov	r2, r3
 8007b96:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007b98:	61fb      	str	r3, [r7, #28]
 8007b9a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b9c:	69b9      	ldr	r1, [r7, #24]
 8007b9e:	69fa      	ldr	r2, [r7, #28]
 8007ba0:	e841 2300 	strex	r3, r2, [r1]
 8007ba4:	617b      	str	r3, [r7, #20]
   return(result);
 8007ba6:	697b      	ldr	r3, [r7, #20]
 8007ba8:	2b00      	cmp	r3, #0
 8007baa:	d1e6      	bne.n	8007b7a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	69db      	ldr	r3, [r3, #28]
 8007bb2:	f003 0310 	and.w	r3, r3, #16
 8007bb6:	2b10      	cmp	r3, #16
 8007bb8:	d103      	bne.n	8007bc2 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	2210      	movs	r2, #16
 8007bc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007bc8:	4619      	mov	r1, r3
 8007bca:	6878      	ldr	r0, [r7, #4]
 8007bcc:	f7ff f8ac 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007bd0:	e00d      	b.n	8007bee <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f7f9 ffa2 	bl	8001b1c <HAL_UART_RxCpltCallback>
}
 8007bd8:	e009      	b.n	8007bee <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	681b      	ldr	r3, [r3, #0]
 8007bde:	8b1b      	ldrh	r3, [r3, #24]
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	f042 0208 	orr.w	r2, r2, #8
 8007bea:	b292      	uxth	r2, r2
 8007bec:	831a      	strh	r2, [r3, #24]
}
 8007bee:	bf00      	nop
 8007bf0:	3770      	adds	r7, #112	@ 0x70
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	bd80      	pop	{r7, pc}
 8007bf6:	bf00      	nop
 8007bf8:	40008000 	.word	0x40008000

08007bfc <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007bfc:	b580      	push	{r7, lr}
 8007bfe:	b09c      	sub	sp, #112	@ 0x70
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007c0a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007c14:	2b22      	cmp	r3, #34	@ 0x22
 8007c16:	f040 80be 	bne.w	8007d96 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007c20:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c28:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8007c2a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007c2e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007c32:	4013      	ands	r3, r2
 8007c34:	b29a      	uxth	r2, r3
 8007c36:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007c38:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007c3e:	1c9a      	adds	r2, r3, #2
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c4a:	b29b      	uxth	r3, r3
 8007c4c:	3b01      	subs	r3, #1
 8007c4e:	b29a      	uxth	r2, r3
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007c5c:	b29b      	uxth	r3, r3
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	f040 80a3 	bne.w	8007daa <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	681b      	ldr	r3, [r3, #0]
 8007c68:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c6a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c6c:	e853 3f00 	ldrex	r3, [r3]
 8007c70:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007c72:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007c74:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007c78:	667b      	str	r3, [r7, #100]	@ 0x64
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	681b      	ldr	r3, [r3, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c82:	657b      	str	r3, [r7, #84]	@ 0x54
 8007c84:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c86:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007c88:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007c8a:	e841 2300 	strex	r3, r2, [r1]
 8007c8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007c90:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1e6      	bne.n	8007c64 <UART_RxISR_16BIT+0x68>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	3308      	adds	r3, #8
 8007c9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca0:	e853 3f00 	ldrex	r3, [r3]
 8007ca4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ca6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ca8:	f023 0301 	bic.w	r3, r3, #1
 8007cac:	663b      	str	r3, [r7, #96]	@ 0x60
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	3308      	adds	r3, #8
 8007cb4:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8007cb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8007cb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007cbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007cbe:	e841 2300 	strex	r3, r2, [r1]
 8007cc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007cc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d1e5      	bne.n	8007c96 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2220      	movs	r2, #32
 8007cce:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	2200      	movs	r2, #0
 8007cdc:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	681b      	ldr	r3, [r3, #0]
 8007ce2:	4a34      	ldr	r2, [pc, #208]	@ (8007db4 <UART_RxISR_16BIT+0x1b8>)
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d01f      	beq.n	8007d28 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	685b      	ldr	r3, [r3, #4]
 8007cee:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	d018      	beq.n	8007d28 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cfc:	6a3b      	ldr	r3, [r7, #32]
 8007cfe:	e853 3f00 	ldrex	r3, [r3]
 8007d02:	61fb      	str	r3, [r7, #28]
   return(result);
 8007d04:	69fb      	ldr	r3, [r7, #28]
 8007d06:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007d0a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	461a      	mov	r2, r3
 8007d12:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007d14:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007d16:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d18:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007d1a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007d1c:	e841 2300 	strex	r3, r2, [r1]
 8007d20:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d24:	2b00      	cmp	r3, #0
 8007d26:	d1e6      	bne.n	8007cf6 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007d2c:	2b01      	cmp	r3, #1
 8007d2e:	d12e      	bne.n	8007d8e <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	2200      	movs	r2, #0
 8007d34:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d3c:	68fb      	ldr	r3, [r7, #12]
 8007d3e:	e853 3f00 	ldrex	r3, [r3]
 8007d42:	60bb      	str	r3, [r7, #8]
   return(result);
 8007d44:	68bb      	ldr	r3, [r7, #8]
 8007d46:	f023 0310 	bic.w	r3, r3, #16
 8007d4a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007d4c:	687b      	ldr	r3, [r7, #4]
 8007d4e:	681b      	ldr	r3, [r3, #0]
 8007d50:	461a      	mov	r2, r3
 8007d52:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007d54:	61bb      	str	r3, [r7, #24]
 8007d56:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d58:	6979      	ldr	r1, [r7, #20]
 8007d5a:	69ba      	ldr	r2, [r7, #24]
 8007d5c:	e841 2300 	strex	r3, r2, [r1]
 8007d60:	613b      	str	r3, [r7, #16]
   return(result);
 8007d62:	693b      	ldr	r3, [r7, #16]
 8007d64:	2b00      	cmp	r3, #0
 8007d66:	d1e6      	bne.n	8007d36 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	69db      	ldr	r3, [r3, #28]
 8007d6e:	f003 0310 	and.w	r3, r3, #16
 8007d72:	2b10      	cmp	r3, #16
 8007d74:	d103      	bne.n	8007d7e <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	2210      	movs	r2, #16
 8007d7c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007d84:	4619      	mov	r1, r3
 8007d86:	6878      	ldr	r0, [r7, #4]
 8007d88:	f7fe ffce 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d8c:	e00d      	b.n	8007daa <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8007d8e:	6878      	ldr	r0, [r7, #4]
 8007d90:	f7f9 fec4 	bl	8001b1c <HAL_UART_RxCpltCallback>
}
 8007d94:	e009      	b.n	8007daa <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007d96:	687b      	ldr	r3, [r7, #4]
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	8b1b      	ldrh	r3, [r3, #24]
 8007d9c:	b29a      	uxth	r2, r3
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f042 0208 	orr.w	r2, r2, #8
 8007da6:	b292      	uxth	r2, r2
 8007da8:	831a      	strh	r2, [r3, #24]
}
 8007daa:	bf00      	nop
 8007dac:	3770      	adds	r7, #112	@ 0x70
 8007dae:	46bd      	mov	sp, r7
 8007db0:	bd80      	pop	{r7, pc}
 8007db2:	bf00      	nop
 8007db4:	40008000 	.word	0x40008000

08007db8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007db8:	b580      	push	{r7, lr}
 8007dba:	b0ac      	sub	sp, #176	@ 0xb0
 8007dbc:	af00      	add	r7, sp, #0
 8007dbe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007dc6:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	69db      	ldr	r3, [r3, #28]
 8007dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	689b      	ldr	r3, [r3, #8]
 8007de4:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007de8:	687b      	ldr	r3, [r7, #4]
 8007dea:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007dee:	2b22      	cmp	r3, #34	@ 0x22
 8007df0:	f040 8183 	bne.w	80080fa <UART_RxISR_8BIT_FIFOEN+0x342>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007dfa:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007dfe:	e126      	b.n	800804e <UART_RxISR_8BIT_FIFOEN+0x296>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8007e06:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e0a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 8007e0e:	b2d9      	uxtb	r1, r3
 8007e10:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007e14:	b2da      	uxtb	r2, r3
 8007e16:	687b      	ldr	r3, [r7, #4]
 8007e18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e1a:	400a      	ands	r2, r1
 8007e1c:	b2d2      	uxtb	r2, r2
 8007e1e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007e24:	1c5a      	adds	r2, r3, #1
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	3b01      	subs	r3, #1
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	69db      	ldr	r3, [r3, #28]
 8007e42:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007e46:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e4a:	f003 0307 	and.w	r3, r3, #7
 8007e4e:	2b00      	cmp	r3, #0
 8007e50:	d053      	beq.n	8007efa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007e52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e56:	f003 0301 	and.w	r3, r3, #1
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d011      	beq.n	8007e82 <UART_RxISR_8BIT_FIFOEN+0xca>
 8007e5e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8007e62:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d00b      	beq.n	8007e82 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	2201      	movs	r2, #1
 8007e70:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007e78:	f043 0201 	orr.w	r2, r3, #1
 8007e7c:	687b      	ldr	r3, [r7, #4]
 8007e7e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007e82:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007e86:	f003 0302 	and.w	r3, r3, #2
 8007e8a:	2b00      	cmp	r3, #0
 8007e8c:	d011      	beq.n	8007eb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 8007e8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007e92:	f003 0301 	and.w	r3, r3, #1
 8007e96:	2b00      	cmp	r3, #0
 8007e98:	d00b      	beq.n	8007eb2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2202      	movs	r2, #2
 8007ea0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ea8:	f043 0204 	orr.w	r2, r3, #4
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007eb2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007eb6:	f003 0304 	and.w	r3, r3, #4
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d011      	beq.n	8007ee2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 8007ebe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ec2:	f003 0301 	and.w	r3, r3, #1
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d00b      	beq.n	8007ee2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	2204      	movs	r2, #4
 8007ed0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ed8:	f043 0202 	orr.w	r2, r3, #2
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007ee8:	2b00      	cmp	r3, #0
 8007eea:	d006      	beq.n	8007efa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007eec:	6878      	ldr	r0, [r7, #4]
 8007eee:	f7fe ff11 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	2200      	movs	r2, #0
 8007ef6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007f00:	b29b      	uxth	r3, r3
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	f040 80a3 	bne.w	800804e <UART_RxISR_8BIT_FIFOEN+0x296>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f0e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007f10:	e853 3f00 	ldrex	r3, [r3]
 8007f14:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007f16:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007f18:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007f1c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	461a      	mov	r2, r3
 8007f26:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007f2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8007f2c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f2e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007f30:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007f32:	e841 2300 	strex	r3, r2, [r1]
 8007f36:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007f38:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d1e4      	bne.n	8007f08 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3308      	adds	r3, #8
 8007f44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 8007f4e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007f50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007f54:	f023 0301 	bic.w	r3, r3, #1
 8007f58:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	3308      	adds	r3, #8
 8007f62:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8007f66:	66ba      	str	r2, [r7, #104]	@ 0x68
 8007f68:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f6a:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 8007f6c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8007f6e:	e841 2300 	strex	r3, r2, [r1]
 8007f72:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8007f74:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007f76:	2b00      	cmp	r3, #0
 8007f78:	d1e1      	bne.n	8007f3e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2220      	movs	r2, #32
 8007f7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2200      	movs	r2, #0
 8007f86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	2200      	movs	r2, #0
 8007f8c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	4a61      	ldr	r2, [pc, #388]	@ (8008118 <UART_RxISR_8BIT_FIFOEN+0x360>)
 8007f94:	4293      	cmp	r3, r2
 8007f96:	d021      	beq.n	8007fdc <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	685b      	ldr	r3, [r3, #4]
 8007f9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d01a      	beq.n	8007fdc <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007fae:	e853 3f00 	ldrex	r3, [r3]
 8007fb2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8007fb4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007fb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007fba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	461a      	mov	r2, r3
 8007fc4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007fc8:	657b      	str	r3, [r7, #84]	@ 0x54
 8007fca:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007fcc:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8007fce:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007fd0:	e841 2300 	strex	r3, r2, [r1]
 8007fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007fd6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d1e4      	bne.n	8007fa6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007fe0:	2b01      	cmp	r3, #1
 8007fe2:	d130      	bne.n	8008046 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ff2:	e853 3f00 	ldrex	r3, [r3]
 8007ff6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007ff8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007ffa:	f023 0310 	bic.w	r3, r3, #16
 8007ffe:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8008002:	687b      	ldr	r3, [r7, #4]
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	461a      	mov	r2, r3
 8008008:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800800c:	643b      	str	r3, [r7, #64]	@ 0x40
 800800e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008010:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008012:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008014:	e841 2300 	strex	r3, r2, [r1]
 8008018:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800801a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800801c:	2b00      	cmp	r3, #0
 800801e:	d1e4      	bne.n	8007fea <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008020:	687b      	ldr	r3, [r7, #4]
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	69db      	ldr	r3, [r3, #28]
 8008026:	f003 0310 	and.w	r3, r3, #16
 800802a:	2b10      	cmp	r3, #16
 800802c:	d103      	bne.n	8008036 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	2210      	movs	r2, #16
 8008034:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008036:	687b      	ldr	r3, [r7, #4]
 8008038:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800803c:	4619      	mov	r1, r3
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f7fe fe72 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 8008044:	e00e      	b.n	8008064 <UART_RxISR_8BIT_FIFOEN+0x2ac>
          HAL_UART_RxCpltCallback(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f7f9 fd68 	bl	8001b1c <HAL_UART_RxCpltCallback>
        break;
 800804c:	e00a      	b.n	8008064 <UART_RxISR_8BIT_FIFOEN+0x2ac>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800804e:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8008052:	2b00      	cmp	r3, #0
 8008054:	d006      	beq.n	8008064 <UART_RxISR_8BIT_FIFOEN+0x2ac>
 8008056:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800805a:	f003 0320 	and.w	r3, r3, #32
 800805e:	2b00      	cmp	r3, #0
 8008060:	f47f aece 	bne.w	8007e00 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800806a:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800806e:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8008072:	2b00      	cmp	r3, #0
 8008074:	d04b      	beq.n	800810e <UART_RxISR_8BIT_FIFOEN+0x356>
 8008076:	687b      	ldr	r3, [r7, #4]
 8008078:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800807c:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8008080:	429a      	cmp	r2, r3
 8008082:	d244      	bcs.n	800810e <UART_RxISR_8BIT_FIFOEN+0x356>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	3308      	adds	r3, #8
 800808a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	e853 3f00 	ldrex	r3, [r3]
 8008092:	61fb      	str	r3, [r7, #28]
   return(result);
 8008094:	69fb      	ldr	r3, [r7, #28]
 8008096:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800809a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	3308      	adds	r3, #8
 80080a4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80080a8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80080aa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80080ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80080b0:	e841 2300 	strex	r3, r2, [r1]
 80080b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80080b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080b8:	2b00      	cmp	r3, #0
 80080ba:	d1e3      	bne.n	8008084 <UART_RxISR_8BIT_FIFOEN+0x2cc>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	4a17      	ldr	r2, [pc, #92]	@ (800811c <UART_RxISR_8BIT_FIFOEN+0x364>)
 80080c0:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080c8:	68fb      	ldr	r3, [r7, #12]
 80080ca:	e853 3f00 	ldrex	r3, [r3]
 80080ce:	60bb      	str	r3, [r7, #8]
   return(result);
 80080d0:	68bb      	ldr	r3, [r7, #8]
 80080d2:	f043 0320 	orr.w	r3, r3, #32
 80080d6:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	461a      	mov	r2, r3
 80080e0:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80080e4:	61bb      	str	r3, [r7, #24]
 80080e6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080e8:	6979      	ldr	r1, [r7, #20]
 80080ea:	69ba      	ldr	r2, [r7, #24]
 80080ec:	e841 2300 	strex	r3, r2, [r1]
 80080f0:	613b      	str	r3, [r7, #16]
   return(result);
 80080f2:	693b      	ldr	r3, [r7, #16]
 80080f4:	2b00      	cmp	r3, #0
 80080f6:	d1e4      	bne.n	80080c2 <UART_RxISR_8BIT_FIFOEN+0x30a>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80080f8:	e009      	b.n	800810e <UART_RxISR_8BIT_FIFOEN+0x356>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	8b1b      	ldrh	r3, [r3, #24]
 8008100:	b29a      	uxth	r2, r3
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	f042 0208 	orr.w	r2, r2, #8
 800810a:	b292      	uxth	r2, r2
 800810c:	831a      	strh	r2, [r3, #24]
}
 800810e:	bf00      	nop
 8008110:	37b0      	adds	r7, #176	@ 0xb0
 8008112:	46bd      	mov	sp, r7
 8008114:	bd80      	pop	{r7, pc}
 8008116:	bf00      	nop
 8008118:	40008000 	.word	0x40008000
 800811c:	08007a41 	.word	0x08007a41

08008120 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008120:	b580      	push	{r7, lr}
 8008122:	b0ae      	sub	sp, #184	@ 0xb8
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800812e:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	69db      	ldr	r3, [r3, #28]
 8008138:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681b      	ldr	r3, [r3, #0]
 8008142:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	689b      	ldr	r3, [r3, #8]
 800814c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008156:	2b22      	cmp	r3, #34	@ 0x22
 8008158:	f040 8187 	bne.w	800846a <UART_RxISR_16BIT_FIFOEN+0x34a>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8008162:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008166:	e12a      	b.n	80083be <UART_RxISR_16BIT_FIFOEN+0x29e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 800816e:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008176:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 800817a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 800817e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8008182:	4013      	ands	r3, r2
 8008184:	b29a      	uxth	r2, r3
 8008186:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800818a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008190:	1c9a      	adds	r2, r3, #2
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800819c:	b29b      	uxth	r3, r3
 800819e:	3b01      	subs	r3, #1
 80081a0:	b29a      	uxth	r2, r3
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	681b      	ldr	r3, [r3, #0]
 80081ac:	69db      	ldr	r3, [r3, #28]
 80081ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80081b2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081b6:	f003 0307 	and.w	r3, r3, #7
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d053      	beq.n	8008266 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80081be:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081c2:	f003 0301 	and.w	r3, r3, #1
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	d011      	beq.n	80081ee <UART_RxISR_16BIT_FIFOEN+0xce>
 80081ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80081ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d00b      	beq.n	80081ee <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	2201      	movs	r2, #1
 80081dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80081e4:	f043 0201 	orr.w	r2, r3, #1
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80081ee:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80081f2:	f003 0302 	and.w	r3, r3, #2
 80081f6:	2b00      	cmp	r3, #0
 80081f8:	d011      	beq.n	800821e <UART_RxISR_16BIT_FIFOEN+0xfe>
 80081fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80081fe:	f003 0301 	and.w	r3, r3, #1
 8008202:	2b00      	cmp	r3, #0
 8008204:	d00b      	beq.n	800821e <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	2202      	movs	r2, #2
 800820c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008214:	f043 0204 	orr.w	r2, r3, #4
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800821e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8008222:	f003 0304 	and.w	r3, r3, #4
 8008226:	2b00      	cmp	r3, #0
 8008228:	d011      	beq.n	800824e <UART_RxISR_16BIT_FIFOEN+0x12e>
 800822a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800822e:	f003 0301 	and.w	r3, r3, #1
 8008232:	2b00      	cmp	r3, #0
 8008234:	d00b      	beq.n	800824e <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	2204      	movs	r2, #4
 800823c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008244:	f043 0202 	orr.w	r2, r3, #2
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8008254:	2b00      	cmp	r3, #0
 8008256:	d006      	beq.n	8008266 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f7fe fd5b 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800826c:	b29b      	uxth	r3, r3
 800826e:	2b00      	cmp	r3, #0
 8008270:	f040 80a5 	bne.w	80083be <UART_RxISR_16BIT_FIFOEN+0x29e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800827a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800827c:	e853 3f00 	ldrex	r3, [r3]
 8008280:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8008282:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8008284:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008288:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	461a      	mov	r2, r3
 8008292:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8008296:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800829a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800829c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800829e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80082a2:	e841 2300 	strex	r3, r2, [r1]
 80082a6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80082a8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80082aa:	2b00      	cmp	r3, #0
 80082ac:	d1e2      	bne.n	8008274 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3308      	adds	r3, #8
 80082b4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082b6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80082b8:	e853 3f00 	ldrex	r3, [r3]
 80082bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80082be:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80082c0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80082c4:	f023 0301 	bic.w	r3, r3, #1
 80082c8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	3308      	adds	r3, #8
 80082d2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 80082d6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80082d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082da:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80082dc:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80082de:	e841 2300 	strex	r3, r2, [r1]
 80082e2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80082e4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	d1e1      	bne.n	80082ae <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2220      	movs	r2, #32
 80082ee:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	2200      	movs	r2, #0
 80082f6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	4a61      	ldr	r2, [pc, #388]	@ (8008488 <UART_RxISR_16BIT_FIFOEN+0x368>)
 8008304:	4293      	cmp	r3, r2
 8008306:	d021      	beq.n	800834c <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	685b      	ldr	r3, [r3, #4]
 800830e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008312:	2b00      	cmp	r3, #0
 8008314:	d01a      	beq.n	800834c <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	681b      	ldr	r3, [r3, #0]
 800831a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800831e:	e853 3f00 	ldrex	r3, [r3]
 8008322:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008324:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008326:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800832a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8008338:	65bb      	str	r3, [r7, #88]	@ 0x58
 800833a:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800833e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008340:	e841 2300 	strex	r3, r2, [r1]
 8008344:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008346:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008348:	2b00      	cmp	r3, #0
 800834a:	d1e4      	bne.n	8008316 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008350:	2b01      	cmp	r3, #1
 8008352:	d130      	bne.n	80083b6 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2200      	movs	r2, #0
 8008358:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008362:	e853 3f00 	ldrex	r3, [r3]
 8008366:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008368:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800836a:	f023 0310 	bic.w	r3, r3, #16
 800836e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	461a      	mov	r2, r3
 8008378:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800837c:	647b      	str	r3, [r7, #68]	@ 0x44
 800837e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008380:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008382:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008384:	e841 2300 	strex	r3, r2, [r1]
 8008388:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800838a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800838c:	2b00      	cmp	r3, #0
 800838e:	d1e4      	bne.n	800835a <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	69db      	ldr	r3, [r3, #28]
 8008396:	f003 0310 	and.w	r3, r3, #16
 800839a:	2b10      	cmp	r3, #16
 800839c:	d103      	bne.n	80083a6 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	2210      	movs	r2, #16
 80083a4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80083a6:	687b      	ldr	r3, [r7, #4]
 80083a8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80083ac:	4619      	mov	r1, r3
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f7fe fcba 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        break;
 80083b4:	e00e      	b.n	80083d4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
          HAL_UART_RxCpltCallback(huart);
 80083b6:	6878      	ldr	r0, [r7, #4]
 80083b8:	f7f9 fbb0 	bl	8001b1c <HAL_UART_RxCpltCallback>
        break;
 80083bc:	e00a      	b.n	80083d4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80083be:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d006      	beq.n	80083d4 <UART_RxISR_16BIT_FIFOEN+0x2b4>
 80083c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80083ca:	f003 0320 	and.w	r3, r3, #32
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	f47f aeca 	bne.w	8008168 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80083da:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80083de:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	d04b      	beq.n	800847e <UART_RxISR_16BIT_FIFOEN+0x35e>
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80083ec:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 80083f0:	429a      	cmp	r2, r3
 80083f2:	d244      	bcs.n	800847e <UART_RxISR_16BIT_FIFOEN+0x35e>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3308      	adds	r3, #8
 80083fa:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083fe:	e853 3f00 	ldrex	r3, [r3]
 8008402:	623b      	str	r3, [r7, #32]
   return(result);
 8008404:	6a3b      	ldr	r3, [r7, #32]
 8008406:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800840a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	681b      	ldr	r3, [r3, #0]
 8008412:	3308      	adds	r3, #8
 8008414:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8008418:	633a      	str	r2, [r7, #48]	@ 0x30
 800841a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800841c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800841e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008420:	e841 2300 	strex	r3, r2, [r1]
 8008424:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008426:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008428:	2b00      	cmp	r3, #0
 800842a:	d1e3      	bne.n	80083f4 <UART_RxISR_16BIT_FIFOEN+0x2d4>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a17      	ldr	r2, [pc, #92]	@ (800848c <UART_RxISR_16BIT_FIFOEN+0x36c>)
 8008430:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	e853 3f00 	ldrex	r3, [r3]
 800843e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	f043 0320 	orr.w	r3, r3, #32
 8008446:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800844a:	687b      	ldr	r3, [r7, #4]
 800844c:	681b      	ldr	r3, [r3, #0]
 800844e:	461a      	mov	r2, r3
 8008450:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8008454:	61fb      	str	r3, [r7, #28]
 8008456:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008458:	69b9      	ldr	r1, [r7, #24]
 800845a:	69fa      	ldr	r2, [r7, #28]
 800845c:	e841 2300 	strex	r3, r2, [r1]
 8008460:	617b      	str	r3, [r7, #20]
   return(result);
 8008462:	697b      	ldr	r3, [r7, #20]
 8008464:	2b00      	cmp	r3, #0
 8008466:	d1e4      	bne.n	8008432 <UART_RxISR_16BIT_FIFOEN+0x312>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008468:	e009      	b.n	800847e <UART_RxISR_16BIT_FIFOEN+0x35e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	8b1b      	ldrh	r3, [r3, #24]
 8008470:	b29a      	uxth	r2, r3
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	f042 0208 	orr.w	r2, r2, #8
 800847a:	b292      	uxth	r2, r2
 800847c:	831a      	strh	r2, [r3, #24]
}
 800847e:	bf00      	nop
 8008480:	37b8      	adds	r7, #184	@ 0xb8
 8008482:	46bd      	mov	sp, r7
 8008484:	bd80      	pop	{r7, pc}
 8008486:	bf00      	nop
 8008488:	40008000 	.word	0x40008000
 800848c:	08007bfd 	.word	0x08007bfd

08008490 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008490:	b480      	push	{r7}
 8008492:	b083      	sub	sp, #12
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008498:	bf00      	nop
 800849a:	370c      	adds	r7, #12
 800849c:	46bd      	mov	sp, r7
 800849e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a2:	4770      	bx	lr

080084a4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80084a4:	b480      	push	{r7}
 80084a6:	b083      	sub	sp, #12
 80084a8:	af00      	add	r7, sp, #0
 80084aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80084ac:	bf00      	nop
 80084ae:	370c      	adds	r7, #12
 80084b0:	46bd      	mov	sp, r7
 80084b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b6:	4770      	bx	lr

080084b8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b083      	sub	sp, #12
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80084c0:	bf00      	nop
 80084c2:	370c      	adds	r7, #12
 80084c4:	46bd      	mov	sp, r7
 80084c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ca:	4770      	bx	lr

080084cc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80084cc:	b480      	push	{r7}
 80084ce:	b085      	sub	sp, #20
 80084d0:	af00      	add	r7, sp, #0
 80084d2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80084da:	2b01      	cmp	r3, #1
 80084dc:	d101      	bne.n	80084e2 <HAL_UARTEx_DisableFifoMode+0x16>
 80084de:	2302      	movs	r3, #2
 80084e0:	e027      	b.n	8008532 <HAL_UARTEx_DisableFifoMode+0x66>
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	2201      	movs	r2, #1
 80084e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	2224      	movs	r2, #36	@ 0x24
 80084ee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	681a      	ldr	r2, [r3, #0]
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	681b      	ldr	r3, [r3, #0]
 8008504:	f022 0201 	bic.w	r2, r2, #1
 8008508:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800850a:	68fb      	ldr	r3, [r7, #12]
 800850c:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8008510:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2200      	movs	r2, #0
 8008516:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68fa      	ldr	r2, [r7, #12]
 800851e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2220      	movs	r2, #32
 8008524:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	2200      	movs	r2, #0
 800852c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8008530:	2300      	movs	r3, #0
}
 8008532:	4618      	mov	r0, r3
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr

0800853e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800853e:	b580      	push	{r7, lr}
 8008540:	b084      	sub	sp, #16
 8008542:	af00      	add	r7, sp, #0
 8008544:	6078      	str	r0, [r7, #4]
 8008546:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800854e:	2b01      	cmp	r3, #1
 8008550:	d101      	bne.n	8008556 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008552:	2302      	movs	r3, #2
 8008554:	e02d      	b.n	80085b2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	2201      	movs	r2, #1
 800855a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2224      	movs	r2, #36	@ 0x24
 8008562:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	681b      	ldr	r3, [r3, #0]
 8008572:	681a      	ldr	r2, [r3, #0]
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f022 0201 	bic.w	r2, r2, #1
 800857c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	689b      	ldr	r3, [r3, #8]
 8008584:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	683a      	ldr	r2, [r7, #0]
 800858e:	430a      	orrs	r2, r1
 8008590:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008592:	6878      	ldr	r0, [r7, #4]
 8008594:	f000 f850 	bl	8008638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	68fa      	ldr	r2, [r7, #12]
 800859e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	2220      	movs	r2, #32
 80085a4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2200      	movs	r2, #0
 80085ac:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80085b0:	2300      	movs	r3, #0
}
 80085b2:	4618      	mov	r0, r3
 80085b4:	3710      	adds	r7, #16
 80085b6:	46bd      	mov	sp, r7
 80085b8:	bd80      	pop	{r7, pc}

080085ba <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80085ba:	b580      	push	{r7, lr}
 80085bc:	b084      	sub	sp, #16
 80085be:	af00      	add	r7, sp, #0
 80085c0:	6078      	str	r0, [r7, #4]
 80085c2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d101      	bne.n	80085d2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80085ce:	2302      	movs	r3, #2
 80085d0:	e02d      	b.n	800862e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	2201      	movs	r2, #1
 80085d6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2224      	movs	r2, #36	@ 0x24
 80085de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	f022 0201 	bic.w	r2, r2, #1
 80085f8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	689b      	ldr	r3, [r3, #8]
 8008600:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	683a      	ldr	r2, [r7, #0]
 800860a:	430a      	orrs	r2, r1
 800860c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800860e:	6878      	ldr	r0, [r7, #4]
 8008610:	f000 f812 	bl	8008638 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68fa      	ldr	r2, [r7, #12]
 800861a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	2220      	movs	r2, #32
 8008620:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	2200      	movs	r2, #0
 8008628:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800862c:	2300      	movs	r3, #0
}
 800862e:	4618      	mov	r0, r3
 8008630:	3710      	adds	r7, #16
 8008632:	46bd      	mov	sp, r7
 8008634:	bd80      	pop	{r7, pc}
	...

08008638 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008638:	b480      	push	{r7}
 800863a:	b085      	sub	sp, #20
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008644:	2b00      	cmp	r3, #0
 8008646:	d108      	bne.n	800865a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2201      	movs	r2, #1
 800864c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	2201      	movs	r2, #1
 8008654:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008658:	e031      	b.n	80086be <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800865a:	2308      	movs	r3, #8
 800865c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800865e:	2308      	movs	r3, #8
 8008660:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	681b      	ldr	r3, [r3, #0]
 8008666:	689b      	ldr	r3, [r3, #8]
 8008668:	0e5b      	lsrs	r3, r3, #25
 800866a:	b2db      	uxtb	r3, r3
 800866c:	f003 0307 	and.w	r3, r3, #7
 8008670:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	0f5b      	lsrs	r3, r3, #29
 800867a:	b2db      	uxtb	r3, r3
 800867c:	f003 0307 	and.w	r3, r3, #7
 8008680:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008682:	7bbb      	ldrb	r3, [r7, #14]
 8008684:	7b3a      	ldrb	r2, [r7, #12]
 8008686:	4911      	ldr	r1, [pc, #68]	@ (80086cc <UARTEx_SetNbDataToProcess+0x94>)
 8008688:	5c8a      	ldrb	r2, [r1, r2]
 800868a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800868e:	7b3a      	ldrb	r2, [r7, #12]
 8008690:	490f      	ldr	r1, [pc, #60]	@ (80086d0 <UARTEx_SetNbDataToProcess+0x98>)
 8008692:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008694:	fb93 f3f2 	sdiv	r3, r3, r2
 8008698:	b29a      	uxth	r2, r3
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086a0:	7bfb      	ldrb	r3, [r7, #15]
 80086a2:	7b7a      	ldrb	r2, [r7, #13]
 80086a4:	4909      	ldr	r1, [pc, #36]	@ (80086cc <UARTEx_SetNbDataToProcess+0x94>)
 80086a6:	5c8a      	ldrb	r2, [r1, r2]
 80086a8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 80086ac:	7b7a      	ldrb	r2, [r7, #13]
 80086ae:	4908      	ldr	r1, [pc, #32]	@ (80086d0 <UARTEx_SetNbDataToProcess+0x98>)
 80086b0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80086b2:	fb93 f3f2 	sdiv	r3, r3, r2
 80086b6:	b29a      	uxth	r2, r3
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80086be:	bf00      	nop
 80086c0:	3714      	adds	r7, #20
 80086c2:	46bd      	mov	sp, r7
 80086c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086c8:	4770      	bx	lr
 80086ca:	bf00      	nop
 80086cc:	0800b0a8 	.word	0x0800b0a8
 80086d0:	0800b0b0 	.word	0x0800b0b0

080086d4 <__cvt>:
 80086d4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80086d8:	ec57 6b10 	vmov	r6, r7, d0
 80086dc:	2f00      	cmp	r7, #0
 80086de:	460c      	mov	r4, r1
 80086e0:	4619      	mov	r1, r3
 80086e2:	463b      	mov	r3, r7
 80086e4:	bfbb      	ittet	lt
 80086e6:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 80086ea:	461f      	movlt	r7, r3
 80086ec:	2300      	movge	r3, #0
 80086ee:	232d      	movlt	r3, #45	@ 0x2d
 80086f0:	700b      	strb	r3, [r1, #0]
 80086f2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80086f4:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 80086f8:	4691      	mov	r9, r2
 80086fa:	f023 0820 	bic.w	r8, r3, #32
 80086fe:	bfbc      	itt	lt
 8008700:	4632      	movlt	r2, r6
 8008702:	4616      	movlt	r6, r2
 8008704:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008708:	d005      	beq.n	8008716 <__cvt+0x42>
 800870a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800870e:	d100      	bne.n	8008712 <__cvt+0x3e>
 8008710:	3401      	adds	r4, #1
 8008712:	2102      	movs	r1, #2
 8008714:	e000      	b.n	8008718 <__cvt+0x44>
 8008716:	2103      	movs	r1, #3
 8008718:	ab03      	add	r3, sp, #12
 800871a:	9301      	str	r3, [sp, #4]
 800871c:	ab02      	add	r3, sp, #8
 800871e:	9300      	str	r3, [sp, #0]
 8008720:	ec47 6b10 	vmov	d0, r6, r7
 8008724:	4653      	mov	r3, sl
 8008726:	4622      	mov	r2, r4
 8008728:	f000 fdc2 	bl	80092b0 <_dtoa_r>
 800872c:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008730:	4605      	mov	r5, r0
 8008732:	d119      	bne.n	8008768 <__cvt+0x94>
 8008734:	f019 0f01 	tst.w	r9, #1
 8008738:	d00e      	beq.n	8008758 <__cvt+0x84>
 800873a:	eb00 0904 	add.w	r9, r0, r4
 800873e:	2200      	movs	r2, #0
 8008740:	2300      	movs	r3, #0
 8008742:	4630      	mov	r0, r6
 8008744:	4639      	mov	r1, r7
 8008746:	f7f8 f9d7 	bl	8000af8 <__aeabi_dcmpeq>
 800874a:	b108      	cbz	r0, 8008750 <__cvt+0x7c>
 800874c:	f8cd 900c 	str.w	r9, [sp, #12]
 8008750:	2230      	movs	r2, #48	@ 0x30
 8008752:	9b03      	ldr	r3, [sp, #12]
 8008754:	454b      	cmp	r3, r9
 8008756:	d31e      	bcc.n	8008796 <__cvt+0xc2>
 8008758:	9b03      	ldr	r3, [sp, #12]
 800875a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800875c:	1b5b      	subs	r3, r3, r5
 800875e:	4628      	mov	r0, r5
 8008760:	6013      	str	r3, [r2, #0]
 8008762:	b004      	add	sp, #16
 8008764:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008768:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800876c:	eb00 0904 	add.w	r9, r0, r4
 8008770:	d1e5      	bne.n	800873e <__cvt+0x6a>
 8008772:	7803      	ldrb	r3, [r0, #0]
 8008774:	2b30      	cmp	r3, #48	@ 0x30
 8008776:	d10a      	bne.n	800878e <__cvt+0xba>
 8008778:	2200      	movs	r2, #0
 800877a:	2300      	movs	r3, #0
 800877c:	4630      	mov	r0, r6
 800877e:	4639      	mov	r1, r7
 8008780:	f7f8 f9ba 	bl	8000af8 <__aeabi_dcmpeq>
 8008784:	b918      	cbnz	r0, 800878e <__cvt+0xba>
 8008786:	f1c4 0401 	rsb	r4, r4, #1
 800878a:	f8ca 4000 	str.w	r4, [sl]
 800878e:	f8da 3000 	ldr.w	r3, [sl]
 8008792:	4499      	add	r9, r3
 8008794:	e7d3      	b.n	800873e <__cvt+0x6a>
 8008796:	1c59      	adds	r1, r3, #1
 8008798:	9103      	str	r1, [sp, #12]
 800879a:	701a      	strb	r2, [r3, #0]
 800879c:	e7d9      	b.n	8008752 <__cvt+0x7e>

0800879e <__exponent>:
 800879e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80087a0:	2900      	cmp	r1, #0
 80087a2:	bfba      	itte	lt
 80087a4:	4249      	neglt	r1, r1
 80087a6:	232d      	movlt	r3, #45	@ 0x2d
 80087a8:	232b      	movge	r3, #43	@ 0x2b
 80087aa:	2909      	cmp	r1, #9
 80087ac:	7002      	strb	r2, [r0, #0]
 80087ae:	7043      	strb	r3, [r0, #1]
 80087b0:	dd29      	ble.n	8008806 <__exponent+0x68>
 80087b2:	f10d 0307 	add.w	r3, sp, #7
 80087b6:	461d      	mov	r5, r3
 80087b8:	270a      	movs	r7, #10
 80087ba:	461a      	mov	r2, r3
 80087bc:	fbb1 f6f7 	udiv	r6, r1, r7
 80087c0:	fb07 1416 	mls	r4, r7, r6, r1
 80087c4:	3430      	adds	r4, #48	@ 0x30
 80087c6:	f802 4c01 	strb.w	r4, [r2, #-1]
 80087ca:	460c      	mov	r4, r1
 80087cc:	2c63      	cmp	r4, #99	@ 0x63
 80087ce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80087d2:	4631      	mov	r1, r6
 80087d4:	dcf1      	bgt.n	80087ba <__exponent+0x1c>
 80087d6:	3130      	adds	r1, #48	@ 0x30
 80087d8:	1e94      	subs	r4, r2, #2
 80087da:	f803 1c01 	strb.w	r1, [r3, #-1]
 80087de:	1c41      	adds	r1, r0, #1
 80087e0:	4623      	mov	r3, r4
 80087e2:	42ab      	cmp	r3, r5
 80087e4:	d30a      	bcc.n	80087fc <__exponent+0x5e>
 80087e6:	f10d 0309 	add.w	r3, sp, #9
 80087ea:	1a9b      	subs	r3, r3, r2
 80087ec:	42ac      	cmp	r4, r5
 80087ee:	bf88      	it	hi
 80087f0:	2300      	movhi	r3, #0
 80087f2:	3302      	adds	r3, #2
 80087f4:	4403      	add	r3, r0
 80087f6:	1a18      	subs	r0, r3, r0
 80087f8:	b003      	add	sp, #12
 80087fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80087fc:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008800:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008804:	e7ed      	b.n	80087e2 <__exponent+0x44>
 8008806:	2330      	movs	r3, #48	@ 0x30
 8008808:	3130      	adds	r1, #48	@ 0x30
 800880a:	7083      	strb	r3, [r0, #2]
 800880c:	70c1      	strb	r1, [r0, #3]
 800880e:	1d03      	adds	r3, r0, #4
 8008810:	e7f1      	b.n	80087f6 <__exponent+0x58>
	...

08008814 <_printf_float>:
 8008814:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008818:	b08d      	sub	sp, #52	@ 0x34
 800881a:	460c      	mov	r4, r1
 800881c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008820:	4616      	mov	r6, r2
 8008822:	461f      	mov	r7, r3
 8008824:	4605      	mov	r5, r0
 8008826:	f000 fcb5 	bl	8009194 <_localeconv_r>
 800882a:	6803      	ldr	r3, [r0, #0]
 800882c:	9304      	str	r3, [sp, #16]
 800882e:	4618      	mov	r0, r3
 8008830:	f7f7 fd36 	bl	80002a0 <strlen>
 8008834:	2300      	movs	r3, #0
 8008836:	930a      	str	r3, [sp, #40]	@ 0x28
 8008838:	f8d8 3000 	ldr.w	r3, [r8]
 800883c:	9005      	str	r0, [sp, #20]
 800883e:	3307      	adds	r3, #7
 8008840:	f023 0307 	bic.w	r3, r3, #7
 8008844:	f103 0208 	add.w	r2, r3, #8
 8008848:	f894 a018 	ldrb.w	sl, [r4, #24]
 800884c:	f8d4 b000 	ldr.w	fp, [r4]
 8008850:	f8c8 2000 	str.w	r2, [r8]
 8008854:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008858:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800885c:	9307      	str	r3, [sp, #28]
 800885e:	f8cd 8018 	str.w	r8, [sp, #24]
 8008862:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008866:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800886a:	4b9c      	ldr	r3, [pc, #624]	@ (8008adc <_printf_float+0x2c8>)
 800886c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008870:	f7f8 f974 	bl	8000b5c <__aeabi_dcmpun>
 8008874:	bb70      	cbnz	r0, 80088d4 <_printf_float+0xc0>
 8008876:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800887a:	4b98      	ldr	r3, [pc, #608]	@ (8008adc <_printf_float+0x2c8>)
 800887c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008880:	f7f8 f94e 	bl	8000b20 <__aeabi_dcmple>
 8008884:	bb30      	cbnz	r0, 80088d4 <_printf_float+0xc0>
 8008886:	2200      	movs	r2, #0
 8008888:	2300      	movs	r3, #0
 800888a:	4640      	mov	r0, r8
 800888c:	4649      	mov	r1, r9
 800888e:	f7f8 f93d 	bl	8000b0c <__aeabi_dcmplt>
 8008892:	b110      	cbz	r0, 800889a <_printf_float+0x86>
 8008894:	232d      	movs	r3, #45	@ 0x2d
 8008896:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800889a:	4a91      	ldr	r2, [pc, #580]	@ (8008ae0 <_printf_float+0x2cc>)
 800889c:	4b91      	ldr	r3, [pc, #580]	@ (8008ae4 <_printf_float+0x2d0>)
 800889e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80088a2:	bf8c      	ite	hi
 80088a4:	4690      	movhi	r8, r2
 80088a6:	4698      	movls	r8, r3
 80088a8:	2303      	movs	r3, #3
 80088aa:	6123      	str	r3, [r4, #16]
 80088ac:	f02b 0304 	bic.w	r3, fp, #4
 80088b0:	6023      	str	r3, [r4, #0]
 80088b2:	f04f 0900 	mov.w	r9, #0
 80088b6:	9700      	str	r7, [sp, #0]
 80088b8:	4633      	mov	r3, r6
 80088ba:	aa0b      	add	r2, sp, #44	@ 0x2c
 80088bc:	4621      	mov	r1, r4
 80088be:	4628      	mov	r0, r5
 80088c0:	f000 f9d2 	bl	8008c68 <_printf_common>
 80088c4:	3001      	adds	r0, #1
 80088c6:	f040 808d 	bne.w	80089e4 <_printf_float+0x1d0>
 80088ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088ce:	b00d      	add	sp, #52	@ 0x34
 80088d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088d4:	4642      	mov	r2, r8
 80088d6:	464b      	mov	r3, r9
 80088d8:	4640      	mov	r0, r8
 80088da:	4649      	mov	r1, r9
 80088dc:	f7f8 f93e 	bl	8000b5c <__aeabi_dcmpun>
 80088e0:	b140      	cbz	r0, 80088f4 <_printf_float+0xe0>
 80088e2:	464b      	mov	r3, r9
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	bfbc      	itt	lt
 80088e8:	232d      	movlt	r3, #45	@ 0x2d
 80088ea:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 80088ee:	4a7e      	ldr	r2, [pc, #504]	@ (8008ae8 <_printf_float+0x2d4>)
 80088f0:	4b7e      	ldr	r3, [pc, #504]	@ (8008aec <_printf_float+0x2d8>)
 80088f2:	e7d4      	b.n	800889e <_printf_float+0x8a>
 80088f4:	6863      	ldr	r3, [r4, #4]
 80088f6:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 80088fa:	9206      	str	r2, [sp, #24]
 80088fc:	1c5a      	adds	r2, r3, #1
 80088fe:	d13b      	bne.n	8008978 <_printf_float+0x164>
 8008900:	2306      	movs	r3, #6
 8008902:	6063      	str	r3, [r4, #4]
 8008904:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008908:	2300      	movs	r3, #0
 800890a:	6022      	str	r2, [r4, #0]
 800890c:	9303      	str	r3, [sp, #12]
 800890e:	ab0a      	add	r3, sp, #40	@ 0x28
 8008910:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008914:	ab09      	add	r3, sp, #36	@ 0x24
 8008916:	9300      	str	r3, [sp, #0]
 8008918:	6861      	ldr	r1, [r4, #4]
 800891a:	ec49 8b10 	vmov	d0, r8, r9
 800891e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008922:	4628      	mov	r0, r5
 8008924:	f7ff fed6 	bl	80086d4 <__cvt>
 8008928:	9b06      	ldr	r3, [sp, #24]
 800892a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800892c:	2b47      	cmp	r3, #71	@ 0x47
 800892e:	4680      	mov	r8, r0
 8008930:	d129      	bne.n	8008986 <_printf_float+0x172>
 8008932:	1cc8      	adds	r0, r1, #3
 8008934:	db02      	blt.n	800893c <_printf_float+0x128>
 8008936:	6863      	ldr	r3, [r4, #4]
 8008938:	4299      	cmp	r1, r3
 800893a:	dd41      	ble.n	80089c0 <_printf_float+0x1ac>
 800893c:	f1aa 0a02 	sub.w	sl, sl, #2
 8008940:	fa5f fa8a 	uxtb.w	sl, sl
 8008944:	3901      	subs	r1, #1
 8008946:	4652      	mov	r2, sl
 8008948:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800894c:	9109      	str	r1, [sp, #36]	@ 0x24
 800894e:	f7ff ff26 	bl	800879e <__exponent>
 8008952:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008954:	1813      	adds	r3, r2, r0
 8008956:	2a01      	cmp	r2, #1
 8008958:	4681      	mov	r9, r0
 800895a:	6123      	str	r3, [r4, #16]
 800895c:	dc02      	bgt.n	8008964 <_printf_float+0x150>
 800895e:	6822      	ldr	r2, [r4, #0]
 8008960:	07d2      	lsls	r2, r2, #31
 8008962:	d501      	bpl.n	8008968 <_printf_float+0x154>
 8008964:	3301      	adds	r3, #1
 8008966:	6123      	str	r3, [r4, #16]
 8008968:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800896c:	2b00      	cmp	r3, #0
 800896e:	d0a2      	beq.n	80088b6 <_printf_float+0xa2>
 8008970:	232d      	movs	r3, #45	@ 0x2d
 8008972:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008976:	e79e      	b.n	80088b6 <_printf_float+0xa2>
 8008978:	9a06      	ldr	r2, [sp, #24]
 800897a:	2a47      	cmp	r2, #71	@ 0x47
 800897c:	d1c2      	bne.n	8008904 <_printf_float+0xf0>
 800897e:	2b00      	cmp	r3, #0
 8008980:	d1c0      	bne.n	8008904 <_printf_float+0xf0>
 8008982:	2301      	movs	r3, #1
 8008984:	e7bd      	b.n	8008902 <_printf_float+0xee>
 8008986:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800898a:	d9db      	bls.n	8008944 <_printf_float+0x130>
 800898c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008990:	d118      	bne.n	80089c4 <_printf_float+0x1b0>
 8008992:	2900      	cmp	r1, #0
 8008994:	6863      	ldr	r3, [r4, #4]
 8008996:	dd0b      	ble.n	80089b0 <_printf_float+0x19c>
 8008998:	6121      	str	r1, [r4, #16]
 800899a:	b913      	cbnz	r3, 80089a2 <_printf_float+0x18e>
 800899c:	6822      	ldr	r2, [r4, #0]
 800899e:	07d0      	lsls	r0, r2, #31
 80089a0:	d502      	bpl.n	80089a8 <_printf_float+0x194>
 80089a2:	3301      	adds	r3, #1
 80089a4:	440b      	add	r3, r1
 80089a6:	6123      	str	r3, [r4, #16]
 80089a8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80089aa:	f04f 0900 	mov.w	r9, #0
 80089ae:	e7db      	b.n	8008968 <_printf_float+0x154>
 80089b0:	b913      	cbnz	r3, 80089b8 <_printf_float+0x1a4>
 80089b2:	6822      	ldr	r2, [r4, #0]
 80089b4:	07d2      	lsls	r2, r2, #31
 80089b6:	d501      	bpl.n	80089bc <_printf_float+0x1a8>
 80089b8:	3302      	adds	r3, #2
 80089ba:	e7f4      	b.n	80089a6 <_printf_float+0x192>
 80089bc:	2301      	movs	r3, #1
 80089be:	e7f2      	b.n	80089a6 <_printf_float+0x192>
 80089c0:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80089c4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80089c6:	4299      	cmp	r1, r3
 80089c8:	db05      	blt.n	80089d6 <_printf_float+0x1c2>
 80089ca:	6823      	ldr	r3, [r4, #0]
 80089cc:	6121      	str	r1, [r4, #16]
 80089ce:	07d8      	lsls	r0, r3, #31
 80089d0:	d5ea      	bpl.n	80089a8 <_printf_float+0x194>
 80089d2:	1c4b      	adds	r3, r1, #1
 80089d4:	e7e7      	b.n	80089a6 <_printf_float+0x192>
 80089d6:	2900      	cmp	r1, #0
 80089d8:	bfd4      	ite	le
 80089da:	f1c1 0202 	rsble	r2, r1, #2
 80089de:	2201      	movgt	r2, #1
 80089e0:	4413      	add	r3, r2
 80089e2:	e7e0      	b.n	80089a6 <_printf_float+0x192>
 80089e4:	6823      	ldr	r3, [r4, #0]
 80089e6:	055a      	lsls	r2, r3, #21
 80089e8:	d407      	bmi.n	80089fa <_printf_float+0x1e6>
 80089ea:	6923      	ldr	r3, [r4, #16]
 80089ec:	4642      	mov	r2, r8
 80089ee:	4631      	mov	r1, r6
 80089f0:	4628      	mov	r0, r5
 80089f2:	47b8      	blx	r7
 80089f4:	3001      	adds	r0, #1
 80089f6:	d12b      	bne.n	8008a50 <_printf_float+0x23c>
 80089f8:	e767      	b.n	80088ca <_printf_float+0xb6>
 80089fa:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80089fe:	f240 80dd 	bls.w	8008bbc <_printf_float+0x3a8>
 8008a02:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008a06:	2200      	movs	r2, #0
 8008a08:	2300      	movs	r3, #0
 8008a0a:	f7f8 f875 	bl	8000af8 <__aeabi_dcmpeq>
 8008a0e:	2800      	cmp	r0, #0
 8008a10:	d033      	beq.n	8008a7a <_printf_float+0x266>
 8008a12:	4a37      	ldr	r2, [pc, #220]	@ (8008af0 <_printf_float+0x2dc>)
 8008a14:	2301      	movs	r3, #1
 8008a16:	4631      	mov	r1, r6
 8008a18:	4628      	mov	r0, r5
 8008a1a:	47b8      	blx	r7
 8008a1c:	3001      	adds	r0, #1
 8008a1e:	f43f af54 	beq.w	80088ca <_printf_float+0xb6>
 8008a22:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008a26:	4543      	cmp	r3, r8
 8008a28:	db02      	blt.n	8008a30 <_printf_float+0x21c>
 8008a2a:	6823      	ldr	r3, [r4, #0]
 8008a2c:	07d8      	lsls	r0, r3, #31
 8008a2e:	d50f      	bpl.n	8008a50 <_printf_float+0x23c>
 8008a30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a34:	4631      	mov	r1, r6
 8008a36:	4628      	mov	r0, r5
 8008a38:	47b8      	blx	r7
 8008a3a:	3001      	adds	r0, #1
 8008a3c:	f43f af45 	beq.w	80088ca <_printf_float+0xb6>
 8008a40:	f04f 0900 	mov.w	r9, #0
 8008a44:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008a48:	f104 0a1a 	add.w	sl, r4, #26
 8008a4c:	45c8      	cmp	r8, r9
 8008a4e:	dc09      	bgt.n	8008a64 <_printf_float+0x250>
 8008a50:	6823      	ldr	r3, [r4, #0]
 8008a52:	079b      	lsls	r3, r3, #30
 8008a54:	f100 8103 	bmi.w	8008c5e <_printf_float+0x44a>
 8008a58:	68e0      	ldr	r0, [r4, #12]
 8008a5a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008a5c:	4298      	cmp	r0, r3
 8008a5e:	bfb8      	it	lt
 8008a60:	4618      	movlt	r0, r3
 8008a62:	e734      	b.n	80088ce <_printf_float+0xba>
 8008a64:	2301      	movs	r3, #1
 8008a66:	4652      	mov	r2, sl
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4628      	mov	r0, r5
 8008a6c:	47b8      	blx	r7
 8008a6e:	3001      	adds	r0, #1
 8008a70:	f43f af2b 	beq.w	80088ca <_printf_float+0xb6>
 8008a74:	f109 0901 	add.w	r9, r9, #1
 8008a78:	e7e8      	b.n	8008a4c <_printf_float+0x238>
 8008a7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a7c:	2b00      	cmp	r3, #0
 8008a7e:	dc39      	bgt.n	8008af4 <_printf_float+0x2e0>
 8008a80:	4a1b      	ldr	r2, [pc, #108]	@ (8008af0 <_printf_float+0x2dc>)
 8008a82:	2301      	movs	r3, #1
 8008a84:	4631      	mov	r1, r6
 8008a86:	4628      	mov	r0, r5
 8008a88:	47b8      	blx	r7
 8008a8a:	3001      	adds	r0, #1
 8008a8c:	f43f af1d 	beq.w	80088ca <_printf_float+0xb6>
 8008a90:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008a94:	ea59 0303 	orrs.w	r3, r9, r3
 8008a98:	d102      	bne.n	8008aa0 <_printf_float+0x28c>
 8008a9a:	6823      	ldr	r3, [r4, #0]
 8008a9c:	07d9      	lsls	r1, r3, #31
 8008a9e:	d5d7      	bpl.n	8008a50 <_printf_float+0x23c>
 8008aa0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4628      	mov	r0, r5
 8008aa8:	47b8      	blx	r7
 8008aaa:	3001      	adds	r0, #1
 8008aac:	f43f af0d 	beq.w	80088ca <_printf_float+0xb6>
 8008ab0:	f04f 0a00 	mov.w	sl, #0
 8008ab4:	f104 0b1a 	add.w	fp, r4, #26
 8008ab8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008aba:	425b      	negs	r3, r3
 8008abc:	4553      	cmp	r3, sl
 8008abe:	dc01      	bgt.n	8008ac4 <_printf_float+0x2b0>
 8008ac0:	464b      	mov	r3, r9
 8008ac2:	e793      	b.n	80089ec <_printf_float+0x1d8>
 8008ac4:	2301      	movs	r3, #1
 8008ac6:	465a      	mov	r2, fp
 8008ac8:	4631      	mov	r1, r6
 8008aca:	4628      	mov	r0, r5
 8008acc:	47b8      	blx	r7
 8008ace:	3001      	adds	r0, #1
 8008ad0:	f43f aefb 	beq.w	80088ca <_printf_float+0xb6>
 8008ad4:	f10a 0a01 	add.w	sl, sl, #1
 8008ad8:	e7ee      	b.n	8008ab8 <_printf_float+0x2a4>
 8008ada:	bf00      	nop
 8008adc:	7fefffff 	.word	0x7fefffff
 8008ae0:	0800b0bc 	.word	0x0800b0bc
 8008ae4:	0800b0b8 	.word	0x0800b0b8
 8008ae8:	0800b0c4 	.word	0x0800b0c4
 8008aec:	0800b0c0 	.word	0x0800b0c0
 8008af0:	0800b0c8 	.word	0x0800b0c8
 8008af4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008af6:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008afa:	4553      	cmp	r3, sl
 8008afc:	bfa8      	it	ge
 8008afe:	4653      	movge	r3, sl
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	4699      	mov	r9, r3
 8008b04:	dc36      	bgt.n	8008b74 <_printf_float+0x360>
 8008b06:	f04f 0b00 	mov.w	fp, #0
 8008b0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b0e:	f104 021a 	add.w	r2, r4, #26
 8008b12:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008b14:	9306      	str	r3, [sp, #24]
 8008b16:	eba3 0309 	sub.w	r3, r3, r9
 8008b1a:	455b      	cmp	r3, fp
 8008b1c:	dc31      	bgt.n	8008b82 <_printf_float+0x36e>
 8008b1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b20:	459a      	cmp	sl, r3
 8008b22:	dc3a      	bgt.n	8008b9a <_printf_float+0x386>
 8008b24:	6823      	ldr	r3, [r4, #0]
 8008b26:	07da      	lsls	r2, r3, #31
 8008b28:	d437      	bmi.n	8008b9a <_printf_float+0x386>
 8008b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b2c:	ebaa 0903 	sub.w	r9, sl, r3
 8008b30:	9b06      	ldr	r3, [sp, #24]
 8008b32:	ebaa 0303 	sub.w	r3, sl, r3
 8008b36:	4599      	cmp	r9, r3
 8008b38:	bfa8      	it	ge
 8008b3a:	4699      	movge	r9, r3
 8008b3c:	f1b9 0f00 	cmp.w	r9, #0
 8008b40:	dc33      	bgt.n	8008baa <_printf_float+0x396>
 8008b42:	f04f 0800 	mov.w	r8, #0
 8008b46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008b4a:	f104 0b1a 	add.w	fp, r4, #26
 8008b4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b50:	ebaa 0303 	sub.w	r3, sl, r3
 8008b54:	eba3 0309 	sub.w	r3, r3, r9
 8008b58:	4543      	cmp	r3, r8
 8008b5a:	f77f af79 	ble.w	8008a50 <_printf_float+0x23c>
 8008b5e:	2301      	movs	r3, #1
 8008b60:	465a      	mov	r2, fp
 8008b62:	4631      	mov	r1, r6
 8008b64:	4628      	mov	r0, r5
 8008b66:	47b8      	blx	r7
 8008b68:	3001      	adds	r0, #1
 8008b6a:	f43f aeae 	beq.w	80088ca <_printf_float+0xb6>
 8008b6e:	f108 0801 	add.w	r8, r8, #1
 8008b72:	e7ec      	b.n	8008b4e <_printf_float+0x33a>
 8008b74:	4642      	mov	r2, r8
 8008b76:	4631      	mov	r1, r6
 8008b78:	4628      	mov	r0, r5
 8008b7a:	47b8      	blx	r7
 8008b7c:	3001      	adds	r0, #1
 8008b7e:	d1c2      	bne.n	8008b06 <_printf_float+0x2f2>
 8008b80:	e6a3      	b.n	80088ca <_printf_float+0xb6>
 8008b82:	2301      	movs	r3, #1
 8008b84:	4631      	mov	r1, r6
 8008b86:	4628      	mov	r0, r5
 8008b88:	9206      	str	r2, [sp, #24]
 8008b8a:	47b8      	blx	r7
 8008b8c:	3001      	adds	r0, #1
 8008b8e:	f43f ae9c 	beq.w	80088ca <_printf_float+0xb6>
 8008b92:	9a06      	ldr	r2, [sp, #24]
 8008b94:	f10b 0b01 	add.w	fp, fp, #1
 8008b98:	e7bb      	b.n	8008b12 <_printf_float+0x2fe>
 8008b9a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b9e:	4631      	mov	r1, r6
 8008ba0:	4628      	mov	r0, r5
 8008ba2:	47b8      	blx	r7
 8008ba4:	3001      	adds	r0, #1
 8008ba6:	d1c0      	bne.n	8008b2a <_printf_float+0x316>
 8008ba8:	e68f      	b.n	80088ca <_printf_float+0xb6>
 8008baa:	9a06      	ldr	r2, [sp, #24]
 8008bac:	464b      	mov	r3, r9
 8008bae:	4442      	add	r2, r8
 8008bb0:	4631      	mov	r1, r6
 8008bb2:	4628      	mov	r0, r5
 8008bb4:	47b8      	blx	r7
 8008bb6:	3001      	adds	r0, #1
 8008bb8:	d1c3      	bne.n	8008b42 <_printf_float+0x32e>
 8008bba:	e686      	b.n	80088ca <_printf_float+0xb6>
 8008bbc:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008bc0:	f1ba 0f01 	cmp.w	sl, #1
 8008bc4:	dc01      	bgt.n	8008bca <_printf_float+0x3b6>
 8008bc6:	07db      	lsls	r3, r3, #31
 8008bc8:	d536      	bpl.n	8008c38 <_printf_float+0x424>
 8008bca:	2301      	movs	r3, #1
 8008bcc:	4642      	mov	r2, r8
 8008bce:	4631      	mov	r1, r6
 8008bd0:	4628      	mov	r0, r5
 8008bd2:	47b8      	blx	r7
 8008bd4:	3001      	adds	r0, #1
 8008bd6:	f43f ae78 	beq.w	80088ca <_printf_float+0xb6>
 8008bda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008bde:	4631      	mov	r1, r6
 8008be0:	4628      	mov	r0, r5
 8008be2:	47b8      	blx	r7
 8008be4:	3001      	adds	r0, #1
 8008be6:	f43f ae70 	beq.w	80088ca <_printf_float+0xb6>
 8008bea:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008bee:	2200      	movs	r2, #0
 8008bf0:	2300      	movs	r3, #0
 8008bf2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8008bf6:	f7f7 ff7f 	bl	8000af8 <__aeabi_dcmpeq>
 8008bfa:	b9c0      	cbnz	r0, 8008c2e <_printf_float+0x41a>
 8008bfc:	4653      	mov	r3, sl
 8008bfe:	f108 0201 	add.w	r2, r8, #1
 8008c02:	4631      	mov	r1, r6
 8008c04:	4628      	mov	r0, r5
 8008c06:	47b8      	blx	r7
 8008c08:	3001      	adds	r0, #1
 8008c0a:	d10c      	bne.n	8008c26 <_printf_float+0x412>
 8008c0c:	e65d      	b.n	80088ca <_printf_float+0xb6>
 8008c0e:	2301      	movs	r3, #1
 8008c10:	465a      	mov	r2, fp
 8008c12:	4631      	mov	r1, r6
 8008c14:	4628      	mov	r0, r5
 8008c16:	47b8      	blx	r7
 8008c18:	3001      	adds	r0, #1
 8008c1a:	f43f ae56 	beq.w	80088ca <_printf_float+0xb6>
 8008c1e:	f108 0801 	add.w	r8, r8, #1
 8008c22:	45d0      	cmp	r8, sl
 8008c24:	dbf3      	blt.n	8008c0e <_printf_float+0x3fa>
 8008c26:	464b      	mov	r3, r9
 8008c28:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008c2c:	e6df      	b.n	80089ee <_printf_float+0x1da>
 8008c2e:	f04f 0800 	mov.w	r8, #0
 8008c32:	f104 0b1a 	add.w	fp, r4, #26
 8008c36:	e7f4      	b.n	8008c22 <_printf_float+0x40e>
 8008c38:	2301      	movs	r3, #1
 8008c3a:	4642      	mov	r2, r8
 8008c3c:	e7e1      	b.n	8008c02 <_printf_float+0x3ee>
 8008c3e:	2301      	movs	r3, #1
 8008c40:	464a      	mov	r2, r9
 8008c42:	4631      	mov	r1, r6
 8008c44:	4628      	mov	r0, r5
 8008c46:	47b8      	blx	r7
 8008c48:	3001      	adds	r0, #1
 8008c4a:	f43f ae3e 	beq.w	80088ca <_printf_float+0xb6>
 8008c4e:	f108 0801 	add.w	r8, r8, #1
 8008c52:	68e3      	ldr	r3, [r4, #12]
 8008c54:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008c56:	1a5b      	subs	r3, r3, r1
 8008c58:	4543      	cmp	r3, r8
 8008c5a:	dcf0      	bgt.n	8008c3e <_printf_float+0x42a>
 8008c5c:	e6fc      	b.n	8008a58 <_printf_float+0x244>
 8008c5e:	f04f 0800 	mov.w	r8, #0
 8008c62:	f104 0919 	add.w	r9, r4, #25
 8008c66:	e7f4      	b.n	8008c52 <_printf_float+0x43e>

08008c68 <_printf_common>:
 8008c68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c6c:	4616      	mov	r6, r2
 8008c6e:	4698      	mov	r8, r3
 8008c70:	688a      	ldr	r2, [r1, #8]
 8008c72:	690b      	ldr	r3, [r1, #16]
 8008c74:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c78:	4293      	cmp	r3, r2
 8008c7a:	bfb8      	it	lt
 8008c7c:	4613      	movlt	r3, r2
 8008c7e:	6033      	str	r3, [r6, #0]
 8008c80:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c84:	4607      	mov	r7, r0
 8008c86:	460c      	mov	r4, r1
 8008c88:	b10a      	cbz	r2, 8008c8e <_printf_common+0x26>
 8008c8a:	3301      	adds	r3, #1
 8008c8c:	6033      	str	r3, [r6, #0]
 8008c8e:	6823      	ldr	r3, [r4, #0]
 8008c90:	0699      	lsls	r1, r3, #26
 8008c92:	bf42      	ittt	mi
 8008c94:	6833      	ldrmi	r3, [r6, #0]
 8008c96:	3302      	addmi	r3, #2
 8008c98:	6033      	strmi	r3, [r6, #0]
 8008c9a:	6825      	ldr	r5, [r4, #0]
 8008c9c:	f015 0506 	ands.w	r5, r5, #6
 8008ca0:	d106      	bne.n	8008cb0 <_printf_common+0x48>
 8008ca2:	f104 0a19 	add.w	sl, r4, #25
 8008ca6:	68e3      	ldr	r3, [r4, #12]
 8008ca8:	6832      	ldr	r2, [r6, #0]
 8008caa:	1a9b      	subs	r3, r3, r2
 8008cac:	42ab      	cmp	r3, r5
 8008cae:	dc26      	bgt.n	8008cfe <_printf_common+0x96>
 8008cb0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008cb4:	6822      	ldr	r2, [r4, #0]
 8008cb6:	3b00      	subs	r3, #0
 8008cb8:	bf18      	it	ne
 8008cba:	2301      	movne	r3, #1
 8008cbc:	0692      	lsls	r2, r2, #26
 8008cbe:	d42b      	bmi.n	8008d18 <_printf_common+0xb0>
 8008cc0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008cc4:	4641      	mov	r1, r8
 8008cc6:	4638      	mov	r0, r7
 8008cc8:	47c8      	blx	r9
 8008cca:	3001      	adds	r0, #1
 8008ccc:	d01e      	beq.n	8008d0c <_printf_common+0xa4>
 8008cce:	6823      	ldr	r3, [r4, #0]
 8008cd0:	6922      	ldr	r2, [r4, #16]
 8008cd2:	f003 0306 	and.w	r3, r3, #6
 8008cd6:	2b04      	cmp	r3, #4
 8008cd8:	bf02      	ittt	eq
 8008cda:	68e5      	ldreq	r5, [r4, #12]
 8008cdc:	6833      	ldreq	r3, [r6, #0]
 8008cde:	1aed      	subeq	r5, r5, r3
 8008ce0:	68a3      	ldr	r3, [r4, #8]
 8008ce2:	bf0c      	ite	eq
 8008ce4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008ce8:	2500      	movne	r5, #0
 8008cea:	4293      	cmp	r3, r2
 8008cec:	bfc4      	itt	gt
 8008cee:	1a9b      	subgt	r3, r3, r2
 8008cf0:	18ed      	addgt	r5, r5, r3
 8008cf2:	2600      	movs	r6, #0
 8008cf4:	341a      	adds	r4, #26
 8008cf6:	42b5      	cmp	r5, r6
 8008cf8:	d11a      	bne.n	8008d30 <_printf_common+0xc8>
 8008cfa:	2000      	movs	r0, #0
 8008cfc:	e008      	b.n	8008d10 <_printf_common+0xa8>
 8008cfe:	2301      	movs	r3, #1
 8008d00:	4652      	mov	r2, sl
 8008d02:	4641      	mov	r1, r8
 8008d04:	4638      	mov	r0, r7
 8008d06:	47c8      	blx	r9
 8008d08:	3001      	adds	r0, #1
 8008d0a:	d103      	bne.n	8008d14 <_printf_common+0xac>
 8008d0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008d14:	3501      	adds	r5, #1
 8008d16:	e7c6      	b.n	8008ca6 <_printf_common+0x3e>
 8008d18:	18e1      	adds	r1, r4, r3
 8008d1a:	1c5a      	adds	r2, r3, #1
 8008d1c:	2030      	movs	r0, #48	@ 0x30
 8008d1e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008d22:	4422      	add	r2, r4
 8008d24:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008d28:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008d2c:	3302      	adds	r3, #2
 8008d2e:	e7c7      	b.n	8008cc0 <_printf_common+0x58>
 8008d30:	2301      	movs	r3, #1
 8008d32:	4622      	mov	r2, r4
 8008d34:	4641      	mov	r1, r8
 8008d36:	4638      	mov	r0, r7
 8008d38:	47c8      	blx	r9
 8008d3a:	3001      	adds	r0, #1
 8008d3c:	d0e6      	beq.n	8008d0c <_printf_common+0xa4>
 8008d3e:	3601      	adds	r6, #1
 8008d40:	e7d9      	b.n	8008cf6 <_printf_common+0x8e>
	...

08008d44 <_printf_i>:
 8008d44:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d48:	7e0f      	ldrb	r7, [r1, #24]
 8008d4a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d4c:	2f78      	cmp	r7, #120	@ 0x78
 8008d4e:	4691      	mov	r9, r2
 8008d50:	4680      	mov	r8, r0
 8008d52:	460c      	mov	r4, r1
 8008d54:	469a      	mov	sl, r3
 8008d56:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d5a:	d807      	bhi.n	8008d6c <_printf_i+0x28>
 8008d5c:	2f62      	cmp	r7, #98	@ 0x62
 8008d5e:	d80a      	bhi.n	8008d76 <_printf_i+0x32>
 8008d60:	2f00      	cmp	r7, #0
 8008d62:	f000 80d1 	beq.w	8008f08 <_printf_i+0x1c4>
 8008d66:	2f58      	cmp	r7, #88	@ 0x58
 8008d68:	f000 80b8 	beq.w	8008edc <_printf_i+0x198>
 8008d6c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d70:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d74:	e03a      	b.n	8008dec <_printf_i+0xa8>
 8008d76:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d7a:	2b15      	cmp	r3, #21
 8008d7c:	d8f6      	bhi.n	8008d6c <_printf_i+0x28>
 8008d7e:	a101      	add	r1, pc, #4	@ (adr r1, 8008d84 <_printf_i+0x40>)
 8008d80:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d84:	08008ddd 	.word	0x08008ddd
 8008d88:	08008df1 	.word	0x08008df1
 8008d8c:	08008d6d 	.word	0x08008d6d
 8008d90:	08008d6d 	.word	0x08008d6d
 8008d94:	08008d6d 	.word	0x08008d6d
 8008d98:	08008d6d 	.word	0x08008d6d
 8008d9c:	08008df1 	.word	0x08008df1
 8008da0:	08008d6d 	.word	0x08008d6d
 8008da4:	08008d6d 	.word	0x08008d6d
 8008da8:	08008d6d 	.word	0x08008d6d
 8008dac:	08008d6d 	.word	0x08008d6d
 8008db0:	08008eef 	.word	0x08008eef
 8008db4:	08008e1b 	.word	0x08008e1b
 8008db8:	08008ea9 	.word	0x08008ea9
 8008dbc:	08008d6d 	.word	0x08008d6d
 8008dc0:	08008d6d 	.word	0x08008d6d
 8008dc4:	08008f11 	.word	0x08008f11
 8008dc8:	08008d6d 	.word	0x08008d6d
 8008dcc:	08008e1b 	.word	0x08008e1b
 8008dd0:	08008d6d 	.word	0x08008d6d
 8008dd4:	08008d6d 	.word	0x08008d6d
 8008dd8:	08008eb1 	.word	0x08008eb1
 8008ddc:	6833      	ldr	r3, [r6, #0]
 8008dde:	1d1a      	adds	r2, r3, #4
 8008de0:	681b      	ldr	r3, [r3, #0]
 8008de2:	6032      	str	r2, [r6, #0]
 8008de4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008de8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008dec:	2301      	movs	r3, #1
 8008dee:	e09c      	b.n	8008f2a <_printf_i+0x1e6>
 8008df0:	6833      	ldr	r3, [r6, #0]
 8008df2:	6820      	ldr	r0, [r4, #0]
 8008df4:	1d19      	adds	r1, r3, #4
 8008df6:	6031      	str	r1, [r6, #0]
 8008df8:	0606      	lsls	r6, r0, #24
 8008dfa:	d501      	bpl.n	8008e00 <_printf_i+0xbc>
 8008dfc:	681d      	ldr	r5, [r3, #0]
 8008dfe:	e003      	b.n	8008e08 <_printf_i+0xc4>
 8008e00:	0645      	lsls	r5, r0, #25
 8008e02:	d5fb      	bpl.n	8008dfc <_printf_i+0xb8>
 8008e04:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008e08:	2d00      	cmp	r5, #0
 8008e0a:	da03      	bge.n	8008e14 <_printf_i+0xd0>
 8008e0c:	232d      	movs	r3, #45	@ 0x2d
 8008e0e:	426d      	negs	r5, r5
 8008e10:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008e14:	4858      	ldr	r0, [pc, #352]	@ (8008f78 <_printf_i+0x234>)
 8008e16:	230a      	movs	r3, #10
 8008e18:	e011      	b.n	8008e3e <_printf_i+0xfa>
 8008e1a:	6821      	ldr	r1, [r4, #0]
 8008e1c:	6833      	ldr	r3, [r6, #0]
 8008e1e:	0608      	lsls	r0, r1, #24
 8008e20:	f853 5b04 	ldr.w	r5, [r3], #4
 8008e24:	d402      	bmi.n	8008e2c <_printf_i+0xe8>
 8008e26:	0649      	lsls	r1, r1, #25
 8008e28:	bf48      	it	mi
 8008e2a:	b2ad      	uxthmi	r5, r5
 8008e2c:	2f6f      	cmp	r7, #111	@ 0x6f
 8008e2e:	4852      	ldr	r0, [pc, #328]	@ (8008f78 <_printf_i+0x234>)
 8008e30:	6033      	str	r3, [r6, #0]
 8008e32:	bf14      	ite	ne
 8008e34:	230a      	movne	r3, #10
 8008e36:	2308      	moveq	r3, #8
 8008e38:	2100      	movs	r1, #0
 8008e3a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e3e:	6866      	ldr	r6, [r4, #4]
 8008e40:	60a6      	str	r6, [r4, #8]
 8008e42:	2e00      	cmp	r6, #0
 8008e44:	db05      	blt.n	8008e52 <_printf_i+0x10e>
 8008e46:	6821      	ldr	r1, [r4, #0]
 8008e48:	432e      	orrs	r6, r5
 8008e4a:	f021 0104 	bic.w	r1, r1, #4
 8008e4e:	6021      	str	r1, [r4, #0]
 8008e50:	d04b      	beq.n	8008eea <_printf_i+0x1a6>
 8008e52:	4616      	mov	r6, r2
 8008e54:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e58:	fb03 5711 	mls	r7, r3, r1, r5
 8008e5c:	5dc7      	ldrb	r7, [r0, r7]
 8008e5e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e62:	462f      	mov	r7, r5
 8008e64:	42bb      	cmp	r3, r7
 8008e66:	460d      	mov	r5, r1
 8008e68:	d9f4      	bls.n	8008e54 <_printf_i+0x110>
 8008e6a:	2b08      	cmp	r3, #8
 8008e6c:	d10b      	bne.n	8008e86 <_printf_i+0x142>
 8008e6e:	6823      	ldr	r3, [r4, #0]
 8008e70:	07df      	lsls	r7, r3, #31
 8008e72:	d508      	bpl.n	8008e86 <_printf_i+0x142>
 8008e74:	6923      	ldr	r3, [r4, #16]
 8008e76:	6861      	ldr	r1, [r4, #4]
 8008e78:	4299      	cmp	r1, r3
 8008e7a:	bfde      	ittt	le
 8008e7c:	2330      	movle	r3, #48	@ 0x30
 8008e7e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e82:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8008e86:	1b92      	subs	r2, r2, r6
 8008e88:	6122      	str	r2, [r4, #16]
 8008e8a:	f8cd a000 	str.w	sl, [sp]
 8008e8e:	464b      	mov	r3, r9
 8008e90:	aa03      	add	r2, sp, #12
 8008e92:	4621      	mov	r1, r4
 8008e94:	4640      	mov	r0, r8
 8008e96:	f7ff fee7 	bl	8008c68 <_printf_common>
 8008e9a:	3001      	adds	r0, #1
 8008e9c:	d14a      	bne.n	8008f34 <_printf_i+0x1f0>
 8008e9e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008ea2:	b004      	add	sp, #16
 8008ea4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	f043 0320 	orr.w	r3, r3, #32
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	4832      	ldr	r0, [pc, #200]	@ (8008f7c <_printf_i+0x238>)
 8008eb2:	2778      	movs	r7, #120	@ 0x78
 8008eb4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008eb8:	6823      	ldr	r3, [r4, #0]
 8008eba:	6831      	ldr	r1, [r6, #0]
 8008ebc:	061f      	lsls	r7, r3, #24
 8008ebe:	f851 5b04 	ldr.w	r5, [r1], #4
 8008ec2:	d402      	bmi.n	8008eca <_printf_i+0x186>
 8008ec4:	065f      	lsls	r7, r3, #25
 8008ec6:	bf48      	it	mi
 8008ec8:	b2ad      	uxthmi	r5, r5
 8008eca:	6031      	str	r1, [r6, #0]
 8008ecc:	07d9      	lsls	r1, r3, #31
 8008ece:	bf44      	itt	mi
 8008ed0:	f043 0320 	orrmi.w	r3, r3, #32
 8008ed4:	6023      	strmi	r3, [r4, #0]
 8008ed6:	b11d      	cbz	r5, 8008ee0 <_printf_i+0x19c>
 8008ed8:	2310      	movs	r3, #16
 8008eda:	e7ad      	b.n	8008e38 <_printf_i+0xf4>
 8008edc:	4826      	ldr	r0, [pc, #152]	@ (8008f78 <_printf_i+0x234>)
 8008ede:	e7e9      	b.n	8008eb4 <_printf_i+0x170>
 8008ee0:	6823      	ldr	r3, [r4, #0]
 8008ee2:	f023 0320 	bic.w	r3, r3, #32
 8008ee6:	6023      	str	r3, [r4, #0]
 8008ee8:	e7f6      	b.n	8008ed8 <_printf_i+0x194>
 8008eea:	4616      	mov	r6, r2
 8008eec:	e7bd      	b.n	8008e6a <_printf_i+0x126>
 8008eee:	6833      	ldr	r3, [r6, #0]
 8008ef0:	6825      	ldr	r5, [r4, #0]
 8008ef2:	6961      	ldr	r1, [r4, #20]
 8008ef4:	1d18      	adds	r0, r3, #4
 8008ef6:	6030      	str	r0, [r6, #0]
 8008ef8:	062e      	lsls	r6, r5, #24
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	d501      	bpl.n	8008f02 <_printf_i+0x1be>
 8008efe:	6019      	str	r1, [r3, #0]
 8008f00:	e002      	b.n	8008f08 <_printf_i+0x1c4>
 8008f02:	0668      	lsls	r0, r5, #25
 8008f04:	d5fb      	bpl.n	8008efe <_printf_i+0x1ba>
 8008f06:	8019      	strh	r1, [r3, #0]
 8008f08:	2300      	movs	r3, #0
 8008f0a:	6123      	str	r3, [r4, #16]
 8008f0c:	4616      	mov	r6, r2
 8008f0e:	e7bc      	b.n	8008e8a <_printf_i+0x146>
 8008f10:	6833      	ldr	r3, [r6, #0]
 8008f12:	1d1a      	adds	r2, r3, #4
 8008f14:	6032      	str	r2, [r6, #0]
 8008f16:	681e      	ldr	r6, [r3, #0]
 8008f18:	6862      	ldr	r2, [r4, #4]
 8008f1a:	2100      	movs	r1, #0
 8008f1c:	4630      	mov	r0, r6
 8008f1e:	f7f7 f96f 	bl	8000200 <memchr>
 8008f22:	b108      	cbz	r0, 8008f28 <_printf_i+0x1e4>
 8008f24:	1b80      	subs	r0, r0, r6
 8008f26:	6060      	str	r0, [r4, #4]
 8008f28:	6863      	ldr	r3, [r4, #4]
 8008f2a:	6123      	str	r3, [r4, #16]
 8008f2c:	2300      	movs	r3, #0
 8008f2e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008f32:	e7aa      	b.n	8008e8a <_printf_i+0x146>
 8008f34:	6923      	ldr	r3, [r4, #16]
 8008f36:	4632      	mov	r2, r6
 8008f38:	4649      	mov	r1, r9
 8008f3a:	4640      	mov	r0, r8
 8008f3c:	47d0      	blx	sl
 8008f3e:	3001      	adds	r0, #1
 8008f40:	d0ad      	beq.n	8008e9e <_printf_i+0x15a>
 8008f42:	6823      	ldr	r3, [r4, #0]
 8008f44:	079b      	lsls	r3, r3, #30
 8008f46:	d413      	bmi.n	8008f70 <_printf_i+0x22c>
 8008f48:	68e0      	ldr	r0, [r4, #12]
 8008f4a:	9b03      	ldr	r3, [sp, #12]
 8008f4c:	4298      	cmp	r0, r3
 8008f4e:	bfb8      	it	lt
 8008f50:	4618      	movlt	r0, r3
 8008f52:	e7a6      	b.n	8008ea2 <_printf_i+0x15e>
 8008f54:	2301      	movs	r3, #1
 8008f56:	4632      	mov	r2, r6
 8008f58:	4649      	mov	r1, r9
 8008f5a:	4640      	mov	r0, r8
 8008f5c:	47d0      	blx	sl
 8008f5e:	3001      	adds	r0, #1
 8008f60:	d09d      	beq.n	8008e9e <_printf_i+0x15a>
 8008f62:	3501      	adds	r5, #1
 8008f64:	68e3      	ldr	r3, [r4, #12]
 8008f66:	9903      	ldr	r1, [sp, #12]
 8008f68:	1a5b      	subs	r3, r3, r1
 8008f6a:	42ab      	cmp	r3, r5
 8008f6c:	dcf2      	bgt.n	8008f54 <_printf_i+0x210>
 8008f6e:	e7eb      	b.n	8008f48 <_printf_i+0x204>
 8008f70:	2500      	movs	r5, #0
 8008f72:	f104 0619 	add.w	r6, r4, #25
 8008f76:	e7f5      	b.n	8008f64 <_printf_i+0x220>
 8008f78:	0800b0ca 	.word	0x0800b0ca
 8008f7c:	0800b0db 	.word	0x0800b0db

08008f80 <std>:
 8008f80:	2300      	movs	r3, #0
 8008f82:	b510      	push	{r4, lr}
 8008f84:	4604      	mov	r4, r0
 8008f86:	e9c0 3300 	strd	r3, r3, [r0]
 8008f8a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008f8e:	6083      	str	r3, [r0, #8]
 8008f90:	8181      	strh	r1, [r0, #12]
 8008f92:	6643      	str	r3, [r0, #100]	@ 0x64
 8008f94:	81c2      	strh	r2, [r0, #14]
 8008f96:	6183      	str	r3, [r0, #24]
 8008f98:	4619      	mov	r1, r3
 8008f9a:	2208      	movs	r2, #8
 8008f9c:	305c      	adds	r0, #92	@ 0x5c
 8008f9e:	f000 f8c3 	bl	8009128 <memset>
 8008fa2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fd8 <std+0x58>)
 8008fa4:	6263      	str	r3, [r4, #36]	@ 0x24
 8008fa6:	4b0d      	ldr	r3, [pc, #52]	@ (8008fdc <std+0x5c>)
 8008fa8:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008faa:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe0 <std+0x60>)
 8008fac:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008fae:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe4 <std+0x64>)
 8008fb0:	6323      	str	r3, [r4, #48]	@ 0x30
 8008fb2:	4b0d      	ldr	r3, [pc, #52]	@ (8008fe8 <std+0x68>)
 8008fb4:	6224      	str	r4, [r4, #32]
 8008fb6:	429c      	cmp	r4, r3
 8008fb8:	d006      	beq.n	8008fc8 <std+0x48>
 8008fba:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008fbe:	4294      	cmp	r4, r2
 8008fc0:	d002      	beq.n	8008fc8 <std+0x48>
 8008fc2:	33d0      	adds	r3, #208	@ 0xd0
 8008fc4:	429c      	cmp	r4, r3
 8008fc6:	d105      	bne.n	8008fd4 <std+0x54>
 8008fc8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008fcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008fd0:	f000 b8dc 	b.w	800918c <__retarget_lock_init_recursive>
 8008fd4:	bd10      	pop	{r4, pc}
 8008fd6:	bf00      	nop
 8008fd8:	0800aa8d 	.word	0x0800aa8d
 8008fdc:	0800aaaf 	.word	0x0800aaaf
 8008fe0:	0800aae7 	.word	0x0800aae7
 8008fe4:	0800ab0b 	.word	0x0800ab0b
 8008fe8:	20000488 	.word	0x20000488

08008fec <stdio_exit_handler>:
 8008fec:	4a02      	ldr	r2, [pc, #8]	@ (8008ff8 <stdio_exit_handler+0xc>)
 8008fee:	4903      	ldr	r1, [pc, #12]	@ (8008ffc <stdio_exit_handler+0x10>)
 8008ff0:	4803      	ldr	r0, [pc, #12]	@ (8009000 <stdio_exit_handler+0x14>)
 8008ff2:	f000 b869 	b.w	80090c8 <_fwalk_sglue>
 8008ff6:	bf00      	nop
 8008ff8:	20000010 	.word	0x20000010
 8008ffc:	0800a331 	.word	0x0800a331
 8009000:	20000020 	.word	0x20000020

08009004 <cleanup_stdio>:
 8009004:	6841      	ldr	r1, [r0, #4]
 8009006:	4b0c      	ldr	r3, [pc, #48]	@ (8009038 <cleanup_stdio+0x34>)
 8009008:	4299      	cmp	r1, r3
 800900a:	b510      	push	{r4, lr}
 800900c:	4604      	mov	r4, r0
 800900e:	d001      	beq.n	8009014 <cleanup_stdio+0x10>
 8009010:	f001 f98e 	bl	800a330 <_fflush_r>
 8009014:	68a1      	ldr	r1, [r4, #8]
 8009016:	4b09      	ldr	r3, [pc, #36]	@ (800903c <cleanup_stdio+0x38>)
 8009018:	4299      	cmp	r1, r3
 800901a:	d002      	beq.n	8009022 <cleanup_stdio+0x1e>
 800901c:	4620      	mov	r0, r4
 800901e:	f001 f987 	bl	800a330 <_fflush_r>
 8009022:	68e1      	ldr	r1, [r4, #12]
 8009024:	4b06      	ldr	r3, [pc, #24]	@ (8009040 <cleanup_stdio+0x3c>)
 8009026:	4299      	cmp	r1, r3
 8009028:	d004      	beq.n	8009034 <cleanup_stdio+0x30>
 800902a:	4620      	mov	r0, r4
 800902c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009030:	f001 b97e 	b.w	800a330 <_fflush_r>
 8009034:	bd10      	pop	{r4, pc}
 8009036:	bf00      	nop
 8009038:	20000488 	.word	0x20000488
 800903c:	200004f0 	.word	0x200004f0
 8009040:	20000558 	.word	0x20000558

08009044 <global_stdio_init.part.0>:
 8009044:	b510      	push	{r4, lr}
 8009046:	4b0b      	ldr	r3, [pc, #44]	@ (8009074 <global_stdio_init.part.0+0x30>)
 8009048:	4c0b      	ldr	r4, [pc, #44]	@ (8009078 <global_stdio_init.part.0+0x34>)
 800904a:	4a0c      	ldr	r2, [pc, #48]	@ (800907c <global_stdio_init.part.0+0x38>)
 800904c:	601a      	str	r2, [r3, #0]
 800904e:	4620      	mov	r0, r4
 8009050:	2200      	movs	r2, #0
 8009052:	2104      	movs	r1, #4
 8009054:	f7ff ff94 	bl	8008f80 <std>
 8009058:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800905c:	2201      	movs	r2, #1
 800905e:	2109      	movs	r1, #9
 8009060:	f7ff ff8e 	bl	8008f80 <std>
 8009064:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009068:	2202      	movs	r2, #2
 800906a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800906e:	2112      	movs	r1, #18
 8009070:	f7ff bf86 	b.w	8008f80 <std>
 8009074:	200005c0 	.word	0x200005c0
 8009078:	20000488 	.word	0x20000488
 800907c:	08008fed 	.word	0x08008fed

08009080 <__sfp_lock_acquire>:
 8009080:	4801      	ldr	r0, [pc, #4]	@ (8009088 <__sfp_lock_acquire+0x8>)
 8009082:	f000 b884 	b.w	800918e <__retarget_lock_acquire_recursive>
 8009086:	bf00      	nop
 8009088:	200005c5 	.word	0x200005c5

0800908c <__sfp_lock_release>:
 800908c:	4801      	ldr	r0, [pc, #4]	@ (8009094 <__sfp_lock_release+0x8>)
 800908e:	f000 b87f 	b.w	8009190 <__retarget_lock_release_recursive>
 8009092:	bf00      	nop
 8009094:	200005c5 	.word	0x200005c5

08009098 <__sinit>:
 8009098:	b510      	push	{r4, lr}
 800909a:	4604      	mov	r4, r0
 800909c:	f7ff fff0 	bl	8009080 <__sfp_lock_acquire>
 80090a0:	6a23      	ldr	r3, [r4, #32]
 80090a2:	b11b      	cbz	r3, 80090ac <__sinit+0x14>
 80090a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090a8:	f7ff bff0 	b.w	800908c <__sfp_lock_release>
 80090ac:	4b04      	ldr	r3, [pc, #16]	@ (80090c0 <__sinit+0x28>)
 80090ae:	6223      	str	r3, [r4, #32]
 80090b0:	4b04      	ldr	r3, [pc, #16]	@ (80090c4 <__sinit+0x2c>)
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d1f5      	bne.n	80090a4 <__sinit+0xc>
 80090b8:	f7ff ffc4 	bl	8009044 <global_stdio_init.part.0>
 80090bc:	e7f2      	b.n	80090a4 <__sinit+0xc>
 80090be:	bf00      	nop
 80090c0:	08009005 	.word	0x08009005
 80090c4:	200005c0 	.word	0x200005c0

080090c8 <_fwalk_sglue>:
 80090c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80090cc:	4607      	mov	r7, r0
 80090ce:	4688      	mov	r8, r1
 80090d0:	4614      	mov	r4, r2
 80090d2:	2600      	movs	r6, #0
 80090d4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80090d8:	f1b9 0901 	subs.w	r9, r9, #1
 80090dc:	d505      	bpl.n	80090ea <_fwalk_sglue+0x22>
 80090de:	6824      	ldr	r4, [r4, #0]
 80090e0:	2c00      	cmp	r4, #0
 80090e2:	d1f7      	bne.n	80090d4 <_fwalk_sglue+0xc>
 80090e4:	4630      	mov	r0, r6
 80090e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80090ea:	89ab      	ldrh	r3, [r5, #12]
 80090ec:	2b01      	cmp	r3, #1
 80090ee:	d907      	bls.n	8009100 <_fwalk_sglue+0x38>
 80090f0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80090f4:	3301      	adds	r3, #1
 80090f6:	d003      	beq.n	8009100 <_fwalk_sglue+0x38>
 80090f8:	4629      	mov	r1, r5
 80090fa:	4638      	mov	r0, r7
 80090fc:	47c0      	blx	r8
 80090fe:	4306      	orrs	r6, r0
 8009100:	3568      	adds	r5, #104	@ 0x68
 8009102:	e7e9      	b.n	80090d8 <_fwalk_sglue+0x10>

08009104 <iprintf>:
 8009104:	b40f      	push	{r0, r1, r2, r3}
 8009106:	b507      	push	{r0, r1, r2, lr}
 8009108:	4906      	ldr	r1, [pc, #24]	@ (8009124 <iprintf+0x20>)
 800910a:	ab04      	add	r3, sp, #16
 800910c:	6808      	ldr	r0, [r1, #0]
 800910e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009112:	6881      	ldr	r1, [r0, #8]
 8009114:	9301      	str	r3, [sp, #4]
 8009116:	f000 fec5 	bl	8009ea4 <_vfiprintf_r>
 800911a:	b003      	add	sp, #12
 800911c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009120:	b004      	add	sp, #16
 8009122:	4770      	bx	lr
 8009124:	2000001c 	.word	0x2000001c

08009128 <memset>:
 8009128:	4402      	add	r2, r0
 800912a:	4603      	mov	r3, r0
 800912c:	4293      	cmp	r3, r2
 800912e:	d100      	bne.n	8009132 <memset+0xa>
 8009130:	4770      	bx	lr
 8009132:	f803 1b01 	strb.w	r1, [r3], #1
 8009136:	e7f9      	b.n	800912c <memset+0x4>

08009138 <__errno>:
 8009138:	4b01      	ldr	r3, [pc, #4]	@ (8009140 <__errno+0x8>)
 800913a:	6818      	ldr	r0, [r3, #0]
 800913c:	4770      	bx	lr
 800913e:	bf00      	nop
 8009140:	2000001c 	.word	0x2000001c

08009144 <__libc_init_array>:
 8009144:	b570      	push	{r4, r5, r6, lr}
 8009146:	4d0d      	ldr	r5, [pc, #52]	@ (800917c <__libc_init_array+0x38>)
 8009148:	4c0d      	ldr	r4, [pc, #52]	@ (8009180 <__libc_init_array+0x3c>)
 800914a:	1b64      	subs	r4, r4, r5
 800914c:	10a4      	asrs	r4, r4, #2
 800914e:	2600      	movs	r6, #0
 8009150:	42a6      	cmp	r6, r4
 8009152:	d109      	bne.n	8009168 <__libc_init_array+0x24>
 8009154:	4d0b      	ldr	r5, [pc, #44]	@ (8009184 <__libc_init_array+0x40>)
 8009156:	4c0c      	ldr	r4, [pc, #48]	@ (8009188 <__libc_init_array+0x44>)
 8009158:	f001 ff50 	bl	800affc <_init>
 800915c:	1b64      	subs	r4, r4, r5
 800915e:	10a4      	asrs	r4, r4, #2
 8009160:	2600      	movs	r6, #0
 8009162:	42a6      	cmp	r6, r4
 8009164:	d105      	bne.n	8009172 <__libc_init_array+0x2e>
 8009166:	bd70      	pop	{r4, r5, r6, pc}
 8009168:	f855 3b04 	ldr.w	r3, [r5], #4
 800916c:	4798      	blx	r3
 800916e:	3601      	adds	r6, #1
 8009170:	e7ee      	b.n	8009150 <__libc_init_array+0xc>
 8009172:	f855 3b04 	ldr.w	r3, [r5], #4
 8009176:	4798      	blx	r3
 8009178:	3601      	adds	r6, #1
 800917a:	e7f2      	b.n	8009162 <__libc_init_array+0x1e>
 800917c:	0800b434 	.word	0x0800b434
 8009180:	0800b434 	.word	0x0800b434
 8009184:	0800b434 	.word	0x0800b434
 8009188:	0800b438 	.word	0x0800b438

0800918c <__retarget_lock_init_recursive>:
 800918c:	4770      	bx	lr

0800918e <__retarget_lock_acquire_recursive>:
 800918e:	4770      	bx	lr

08009190 <__retarget_lock_release_recursive>:
 8009190:	4770      	bx	lr
	...

08009194 <_localeconv_r>:
 8009194:	4800      	ldr	r0, [pc, #0]	@ (8009198 <_localeconv_r+0x4>)
 8009196:	4770      	bx	lr
 8009198:	2000015c 	.word	0x2000015c

0800919c <quorem>:
 800919c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091a0:	6903      	ldr	r3, [r0, #16]
 80091a2:	690c      	ldr	r4, [r1, #16]
 80091a4:	42a3      	cmp	r3, r4
 80091a6:	4607      	mov	r7, r0
 80091a8:	db7e      	blt.n	80092a8 <quorem+0x10c>
 80091aa:	3c01      	subs	r4, #1
 80091ac:	f101 0814 	add.w	r8, r1, #20
 80091b0:	00a3      	lsls	r3, r4, #2
 80091b2:	f100 0514 	add.w	r5, r0, #20
 80091b6:	9300      	str	r3, [sp, #0]
 80091b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80091bc:	9301      	str	r3, [sp, #4]
 80091be:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80091c2:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80091c6:	3301      	adds	r3, #1
 80091c8:	429a      	cmp	r2, r3
 80091ca:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80091ce:	fbb2 f6f3 	udiv	r6, r2, r3
 80091d2:	d32e      	bcc.n	8009232 <quorem+0x96>
 80091d4:	f04f 0a00 	mov.w	sl, #0
 80091d8:	46c4      	mov	ip, r8
 80091da:	46ae      	mov	lr, r5
 80091dc:	46d3      	mov	fp, sl
 80091de:	f85c 3b04 	ldr.w	r3, [ip], #4
 80091e2:	b298      	uxth	r0, r3
 80091e4:	fb06 a000 	mla	r0, r6, r0, sl
 80091e8:	0c02      	lsrs	r2, r0, #16
 80091ea:	0c1b      	lsrs	r3, r3, #16
 80091ec:	fb06 2303 	mla	r3, r6, r3, r2
 80091f0:	f8de 2000 	ldr.w	r2, [lr]
 80091f4:	b280      	uxth	r0, r0
 80091f6:	b292      	uxth	r2, r2
 80091f8:	1a12      	subs	r2, r2, r0
 80091fa:	445a      	add	r2, fp
 80091fc:	f8de 0000 	ldr.w	r0, [lr]
 8009200:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009204:	b29b      	uxth	r3, r3
 8009206:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800920a:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800920e:	b292      	uxth	r2, r2
 8009210:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8009214:	45e1      	cmp	r9, ip
 8009216:	f84e 2b04 	str.w	r2, [lr], #4
 800921a:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800921e:	d2de      	bcs.n	80091de <quorem+0x42>
 8009220:	9b00      	ldr	r3, [sp, #0]
 8009222:	58eb      	ldr	r3, [r5, r3]
 8009224:	b92b      	cbnz	r3, 8009232 <quorem+0x96>
 8009226:	9b01      	ldr	r3, [sp, #4]
 8009228:	3b04      	subs	r3, #4
 800922a:	429d      	cmp	r5, r3
 800922c:	461a      	mov	r2, r3
 800922e:	d32f      	bcc.n	8009290 <quorem+0xf4>
 8009230:	613c      	str	r4, [r7, #16]
 8009232:	4638      	mov	r0, r7
 8009234:	f001 fb22 	bl	800a87c <__mcmp>
 8009238:	2800      	cmp	r0, #0
 800923a:	db25      	blt.n	8009288 <quorem+0xec>
 800923c:	4629      	mov	r1, r5
 800923e:	2000      	movs	r0, #0
 8009240:	f858 2b04 	ldr.w	r2, [r8], #4
 8009244:	f8d1 c000 	ldr.w	ip, [r1]
 8009248:	fa1f fe82 	uxth.w	lr, r2
 800924c:	fa1f f38c 	uxth.w	r3, ip
 8009250:	eba3 030e 	sub.w	r3, r3, lr
 8009254:	4403      	add	r3, r0
 8009256:	0c12      	lsrs	r2, r2, #16
 8009258:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800925c:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8009260:	b29b      	uxth	r3, r3
 8009262:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009266:	45c1      	cmp	r9, r8
 8009268:	f841 3b04 	str.w	r3, [r1], #4
 800926c:	ea4f 4022 	mov.w	r0, r2, asr #16
 8009270:	d2e6      	bcs.n	8009240 <quorem+0xa4>
 8009272:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009276:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800927a:	b922      	cbnz	r2, 8009286 <quorem+0xea>
 800927c:	3b04      	subs	r3, #4
 800927e:	429d      	cmp	r5, r3
 8009280:	461a      	mov	r2, r3
 8009282:	d30b      	bcc.n	800929c <quorem+0x100>
 8009284:	613c      	str	r4, [r7, #16]
 8009286:	3601      	adds	r6, #1
 8009288:	4630      	mov	r0, r6
 800928a:	b003      	add	sp, #12
 800928c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009290:	6812      	ldr	r2, [r2, #0]
 8009292:	3b04      	subs	r3, #4
 8009294:	2a00      	cmp	r2, #0
 8009296:	d1cb      	bne.n	8009230 <quorem+0x94>
 8009298:	3c01      	subs	r4, #1
 800929a:	e7c6      	b.n	800922a <quorem+0x8e>
 800929c:	6812      	ldr	r2, [r2, #0]
 800929e:	3b04      	subs	r3, #4
 80092a0:	2a00      	cmp	r2, #0
 80092a2:	d1ef      	bne.n	8009284 <quorem+0xe8>
 80092a4:	3c01      	subs	r4, #1
 80092a6:	e7ea      	b.n	800927e <quorem+0xe2>
 80092a8:	2000      	movs	r0, #0
 80092aa:	e7ee      	b.n	800928a <quorem+0xee>
 80092ac:	0000      	movs	r0, r0
	...

080092b0 <_dtoa_r>:
 80092b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092b4:	69c7      	ldr	r7, [r0, #28]
 80092b6:	b097      	sub	sp, #92	@ 0x5c
 80092b8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80092bc:	ec55 4b10 	vmov	r4, r5, d0
 80092c0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80092c2:	9107      	str	r1, [sp, #28]
 80092c4:	4681      	mov	r9, r0
 80092c6:	920c      	str	r2, [sp, #48]	@ 0x30
 80092c8:	9311      	str	r3, [sp, #68]	@ 0x44
 80092ca:	b97f      	cbnz	r7, 80092ec <_dtoa_r+0x3c>
 80092cc:	2010      	movs	r0, #16
 80092ce:	f000 ff01 	bl	800a0d4 <malloc>
 80092d2:	4602      	mov	r2, r0
 80092d4:	f8c9 001c 	str.w	r0, [r9, #28]
 80092d8:	b920      	cbnz	r0, 80092e4 <_dtoa_r+0x34>
 80092da:	4ba9      	ldr	r3, [pc, #676]	@ (8009580 <_dtoa_r+0x2d0>)
 80092dc:	21ef      	movs	r1, #239	@ 0xef
 80092de:	48a9      	ldr	r0, [pc, #676]	@ (8009584 <_dtoa_r+0x2d4>)
 80092e0:	f001 fd94 	bl	800ae0c <__assert_func>
 80092e4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80092e8:	6007      	str	r7, [r0, #0]
 80092ea:	60c7      	str	r7, [r0, #12]
 80092ec:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80092f0:	6819      	ldr	r1, [r3, #0]
 80092f2:	b159      	cbz	r1, 800930c <_dtoa_r+0x5c>
 80092f4:	685a      	ldr	r2, [r3, #4]
 80092f6:	604a      	str	r2, [r1, #4]
 80092f8:	2301      	movs	r3, #1
 80092fa:	4093      	lsls	r3, r2
 80092fc:	608b      	str	r3, [r1, #8]
 80092fe:	4648      	mov	r0, r9
 8009300:	f001 f88a 	bl	800a418 <_Bfree>
 8009304:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009308:	2200      	movs	r2, #0
 800930a:	601a      	str	r2, [r3, #0]
 800930c:	1e2b      	subs	r3, r5, #0
 800930e:	bfb9      	ittee	lt
 8009310:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8009314:	9305      	strlt	r3, [sp, #20]
 8009316:	2300      	movge	r3, #0
 8009318:	6033      	strge	r3, [r6, #0]
 800931a:	9f05      	ldr	r7, [sp, #20]
 800931c:	4b9a      	ldr	r3, [pc, #616]	@ (8009588 <_dtoa_r+0x2d8>)
 800931e:	bfbc      	itt	lt
 8009320:	2201      	movlt	r2, #1
 8009322:	6032      	strlt	r2, [r6, #0]
 8009324:	43bb      	bics	r3, r7
 8009326:	d112      	bne.n	800934e <_dtoa_r+0x9e>
 8009328:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800932a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800932e:	6013      	str	r3, [r2, #0]
 8009330:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8009334:	4323      	orrs	r3, r4
 8009336:	f000 855a 	beq.w	8009dee <_dtoa_r+0xb3e>
 800933a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800933c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800959c <_dtoa_r+0x2ec>
 8009340:	2b00      	cmp	r3, #0
 8009342:	f000 855c 	beq.w	8009dfe <_dtoa_r+0xb4e>
 8009346:	f10a 0303 	add.w	r3, sl, #3
 800934a:	f000 bd56 	b.w	8009dfa <_dtoa_r+0xb4a>
 800934e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8009352:	2200      	movs	r2, #0
 8009354:	ec51 0b17 	vmov	r0, r1, d7
 8009358:	2300      	movs	r3, #0
 800935a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800935e:	f7f7 fbcb 	bl	8000af8 <__aeabi_dcmpeq>
 8009362:	4680      	mov	r8, r0
 8009364:	b158      	cbz	r0, 800937e <_dtoa_r+0xce>
 8009366:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8009368:	2301      	movs	r3, #1
 800936a:	6013      	str	r3, [r2, #0]
 800936c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800936e:	b113      	cbz	r3, 8009376 <_dtoa_r+0xc6>
 8009370:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009372:	4b86      	ldr	r3, [pc, #536]	@ (800958c <_dtoa_r+0x2dc>)
 8009374:	6013      	str	r3, [r2, #0]
 8009376:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80095a0 <_dtoa_r+0x2f0>
 800937a:	f000 bd40 	b.w	8009dfe <_dtoa_r+0xb4e>
 800937e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8009382:	aa14      	add	r2, sp, #80	@ 0x50
 8009384:	a915      	add	r1, sp, #84	@ 0x54
 8009386:	4648      	mov	r0, r9
 8009388:	f001 fb28 	bl	800a9dc <__d2b>
 800938c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009390:	9002      	str	r0, [sp, #8]
 8009392:	2e00      	cmp	r6, #0
 8009394:	d078      	beq.n	8009488 <_dtoa_r+0x1d8>
 8009396:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009398:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800939c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80093a0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80093a4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80093a8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80093ac:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80093b0:	4619      	mov	r1, r3
 80093b2:	2200      	movs	r2, #0
 80093b4:	4b76      	ldr	r3, [pc, #472]	@ (8009590 <_dtoa_r+0x2e0>)
 80093b6:	f7f6 ff7f 	bl	80002b8 <__aeabi_dsub>
 80093ba:	a36b      	add	r3, pc, #428	@ (adr r3, 8009568 <_dtoa_r+0x2b8>)
 80093bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093c0:	f7f7 f932 	bl	8000628 <__aeabi_dmul>
 80093c4:	a36a      	add	r3, pc, #424	@ (adr r3, 8009570 <_dtoa_r+0x2c0>)
 80093c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ca:	f7f6 ff77 	bl	80002bc <__adddf3>
 80093ce:	4604      	mov	r4, r0
 80093d0:	4630      	mov	r0, r6
 80093d2:	460d      	mov	r5, r1
 80093d4:	f7f7 f8be 	bl	8000554 <__aeabi_i2d>
 80093d8:	a367      	add	r3, pc, #412	@ (adr r3, 8009578 <_dtoa_r+0x2c8>)
 80093da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093de:	f7f7 f923 	bl	8000628 <__aeabi_dmul>
 80093e2:	4602      	mov	r2, r0
 80093e4:	460b      	mov	r3, r1
 80093e6:	4620      	mov	r0, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f6 ff67 	bl	80002bc <__adddf3>
 80093ee:	4604      	mov	r4, r0
 80093f0:	460d      	mov	r5, r1
 80093f2:	f7f7 fbc9 	bl	8000b88 <__aeabi_d2iz>
 80093f6:	2200      	movs	r2, #0
 80093f8:	4607      	mov	r7, r0
 80093fa:	2300      	movs	r3, #0
 80093fc:	4620      	mov	r0, r4
 80093fe:	4629      	mov	r1, r5
 8009400:	f7f7 fb84 	bl	8000b0c <__aeabi_dcmplt>
 8009404:	b140      	cbz	r0, 8009418 <_dtoa_r+0x168>
 8009406:	4638      	mov	r0, r7
 8009408:	f7f7 f8a4 	bl	8000554 <__aeabi_i2d>
 800940c:	4622      	mov	r2, r4
 800940e:	462b      	mov	r3, r5
 8009410:	f7f7 fb72 	bl	8000af8 <__aeabi_dcmpeq>
 8009414:	b900      	cbnz	r0, 8009418 <_dtoa_r+0x168>
 8009416:	3f01      	subs	r7, #1
 8009418:	2f16      	cmp	r7, #22
 800941a:	d852      	bhi.n	80094c2 <_dtoa_r+0x212>
 800941c:	4b5d      	ldr	r3, [pc, #372]	@ (8009594 <_dtoa_r+0x2e4>)
 800941e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009426:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800942a:	f7f7 fb6f 	bl	8000b0c <__aeabi_dcmplt>
 800942e:	2800      	cmp	r0, #0
 8009430:	d049      	beq.n	80094c6 <_dtoa_r+0x216>
 8009432:	3f01      	subs	r7, #1
 8009434:	2300      	movs	r3, #0
 8009436:	9310      	str	r3, [sp, #64]	@ 0x40
 8009438:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800943a:	1b9b      	subs	r3, r3, r6
 800943c:	1e5a      	subs	r2, r3, #1
 800943e:	bf45      	ittet	mi
 8009440:	f1c3 0301 	rsbmi	r3, r3, #1
 8009444:	9300      	strmi	r3, [sp, #0]
 8009446:	2300      	movpl	r3, #0
 8009448:	2300      	movmi	r3, #0
 800944a:	9206      	str	r2, [sp, #24]
 800944c:	bf54      	ite	pl
 800944e:	9300      	strpl	r3, [sp, #0]
 8009450:	9306      	strmi	r3, [sp, #24]
 8009452:	2f00      	cmp	r7, #0
 8009454:	db39      	blt.n	80094ca <_dtoa_r+0x21a>
 8009456:	9b06      	ldr	r3, [sp, #24]
 8009458:	970d      	str	r7, [sp, #52]	@ 0x34
 800945a:	443b      	add	r3, r7
 800945c:	9306      	str	r3, [sp, #24]
 800945e:	2300      	movs	r3, #0
 8009460:	9308      	str	r3, [sp, #32]
 8009462:	9b07      	ldr	r3, [sp, #28]
 8009464:	2b09      	cmp	r3, #9
 8009466:	d863      	bhi.n	8009530 <_dtoa_r+0x280>
 8009468:	2b05      	cmp	r3, #5
 800946a:	bfc4      	itt	gt
 800946c:	3b04      	subgt	r3, #4
 800946e:	9307      	strgt	r3, [sp, #28]
 8009470:	9b07      	ldr	r3, [sp, #28]
 8009472:	f1a3 0302 	sub.w	r3, r3, #2
 8009476:	bfcc      	ite	gt
 8009478:	2400      	movgt	r4, #0
 800947a:	2401      	movle	r4, #1
 800947c:	2b03      	cmp	r3, #3
 800947e:	d863      	bhi.n	8009548 <_dtoa_r+0x298>
 8009480:	e8df f003 	tbb	[pc, r3]
 8009484:	2b375452 	.word	0x2b375452
 8009488:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800948c:	441e      	add	r6, r3
 800948e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009492:	2b20      	cmp	r3, #32
 8009494:	bfc1      	itttt	gt
 8009496:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800949a:	409f      	lslgt	r7, r3
 800949c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80094a0:	fa24 f303 	lsrgt.w	r3, r4, r3
 80094a4:	bfd6      	itet	le
 80094a6:	f1c3 0320 	rsble	r3, r3, #32
 80094aa:	ea47 0003 	orrgt.w	r0, r7, r3
 80094ae:	fa04 f003 	lslle.w	r0, r4, r3
 80094b2:	f7f7 f83f 	bl	8000534 <__aeabi_ui2d>
 80094b6:	2201      	movs	r2, #1
 80094b8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80094bc:	3e01      	subs	r6, #1
 80094be:	9212      	str	r2, [sp, #72]	@ 0x48
 80094c0:	e776      	b.n	80093b0 <_dtoa_r+0x100>
 80094c2:	2301      	movs	r3, #1
 80094c4:	e7b7      	b.n	8009436 <_dtoa_r+0x186>
 80094c6:	9010      	str	r0, [sp, #64]	@ 0x40
 80094c8:	e7b6      	b.n	8009438 <_dtoa_r+0x188>
 80094ca:	9b00      	ldr	r3, [sp, #0]
 80094cc:	1bdb      	subs	r3, r3, r7
 80094ce:	9300      	str	r3, [sp, #0]
 80094d0:	427b      	negs	r3, r7
 80094d2:	9308      	str	r3, [sp, #32]
 80094d4:	2300      	movs	r3, #0
 80094d6:	930d      	str	r3, [sp, #52]	@ 0x34
 80094d8:	e7c3      	b.n	8009462 <_dtoa_r+0x1b2>
 80094da:	2301      	movs	r3, #1
 80094dc:	9309      	str	r3, [sp, #36]	@ 0x24
 80094de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094e0:	eb07 0b03 	add.w	fp, r7, r3
 80094e4:	f10b 0301 	add.w	r3, fp, #1
 80094e8:	2b01      	cmp	r3, #1
 80094ea:	9303      	str	r3, [sp, #12]
 80094ec:	bfb8      	it	lt
 80094ee:	2301      	movlt	r3, #1
 80094f0:	e006      	b.n	8009500 <_dtoa_r+0x250>
 80094f2:	2301      	movs	r3, #1
 80094f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80094f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	dd28      	ble.n	800954e <_dtoa_r+0x29e>
 80094fc:	469b      	mov	fp, r3
 80094fe:	9303      	str	r3, [sp, #12]
 8009500:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009504:	2100      	movs	r1, #0
 8009506:	2204      	movs	r2, #4
 8009508:	f102 0514 	add.w	r5, r2, #20
 800950c:	429d      	cmp	r5, r3
 800950e:	d926      	bls.n	800955e <_dtoa_r+0x2ae>
 8009510:	6041      	str	r1, [r0, #4]
 8009512:	4648      	mov	r0, r9
 8009514:	f000 ff40 	bl	800a398 <_Balloc>
 8009518:	4682      	mov	sl, r0
 800951a:	2800      	cmp	r0, #0
 800951c:	d142      	bne.n	80095a4 <_dtoa_r+0x2f4>
 800951e:	4b1e      	ldr	r3, [pc, #120]	@ (8009598 <_dtoa_r+0x2e8>)
 8009520:	4602      	mov	r2, r0
 8009522:	f240 11af 	movw	r1, #431	@ 0x1af
 8009526:	e6da      	b.n	80092de <_dtoa_r+0x2e>
 8009528:	2300      	movs	r3, #0
 800952a:	e7e3      	b.n	80094f4 <_dtoa_r+0x244>
 800952c:	2300      	movs	r3, #0
 800952e:	e7d5      	b.n	80094dc <_dtoa_r+0x22c>
 8009530:	2401      	movs	r4, #1
 8009532:	2300      	movs	r3, #0
 8009534:	9307      	str	r3, [sp, #28]
 8009536:	9409      	str	r4, [sp, #36]	@ 0x24
 8009538:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 800953c:	2200      	movs	r2, #0
 800953e:	f8cd b00c 	str.w	fp, [sp, #12]
 8009542:	2312      	movs	r3, #18
 8009544:	920c      	str	r2, [sp, #48]	@ 0x30
 8009546:	e7db      	b.n	8009500 <_dtoa_r+0x250>
 8009548:	2301      	movs	r3, #1
 800954a:	9309      	str	r3, [sp, #36]	@ 0x24
 800954c:	e7f4      	b.n	8009538 <_dtoa_r+0x288>
 800954e:	f04f 0b01 	mov.w	fp, #1
 8009552:	f8cd b00c 	str.w	fp, [sp, #12]
 8009556:	465b      	mov	r3, fp
 8009558:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800955c:	e7d0      	b.n	8009500 <_dtoa_r+0x250>
 800955e:	3101      	adds	r1, #1
 8009560:	0052      	lsls	r2, r2, #1
 8009562:	e7d1      	b.n	8009508 <_dtoa_r+0x258>
 8009564:	f3af 8000 	nop.w
 8009568:	636f4361 	.word	0x636f4361
 800956c:	3fd287a7 	.word	0x3fd287a7
 8009570:	8b60c8b3 	.word	0x8b60c8b3
 8009574:	3fc68a28 	.word	0x3fc68a28
 8009578:	509f79fb 	.word	0x509f79fb
 800957c:	3fd34413 	.word	0x3fd34413
 8009580:	0800b0f9 	.word	0x0800b0f9
 8009584:	0800b110 	.word	0x0800b110
 8009588:	7ff00000 	.word	0x7ff00000
 800958c:	0800b0c9 	.word	0x0800b0c9
 8009590:	3ff80000 	.word	0x3ff80000
 8009594:	0800b260 	.word	0x0800b260
 8009598:	0800b168 	.word	0x0800b168
 800959c:	0800b0f5 	.word	0x0800b0f5
 80095a0:	0800b0c8 	.word	0x0800b0c8
 80095a4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80095a8:	6018      	str	r0, [r3, #0]
 80095aa:	9b03      	ldr	r3, [sp, #12]
 80095ac:	2b0e      	cmp	r3, #14
 80095ae:	f200 80a1 	bhi.w	80096f4 <_dtoa_r+0x444>
 80095b2:	2c00      	cmp	r4, #0
 80095b4:	f000 809e 	beq.w	80096f4 <_dtoa_r+0x444>
 80095b8:	2f00      	cmp	r7, #0
 80095ba:	dd33      	ble.n	8009624 <_dtoa_r+0x374>
 80095bc:	4b9c      	ldr	r3, [pc, #624]	@ (8009830 <_dtoa_r+0x580>)
 80095be:	f007 020f 	and.w	r2, r7, #15
 80095c2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80095c6:	ed93 7b00 	vldr	d7, [r3]
 80095ca:	05f8      	lsls	r0, r7, #23
 80095cc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80095d0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80095d4:	d516      	bpl.n	8009604 <_dtoa_r+0x354>
 80095d6:	4b97      	ldr	r3, [pc, #604]	@ (8009834 <_dtoa_r+0x584>)
 80095d8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80095dc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80095e0:	f7f7 f94c 	bl	800087c <__aeabi_ddiv>
 80095e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80095e8:	f004 040f 	and.w	r4, r4, #15
 80095ec:	2603      	movs	r6, #3
 80095ee:	4d91      	ldr	r5, [pc, #580]	@ (8009834 <_dtoa_r+0x584>)
 80095f0:	b954      	cbnz	r4, 8009608 <_dtoa_r+0x358>
 80095f2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80095f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80095fa:	f7f7 f93f 	bl	800087c <__aeabi_ddiv>
 80095fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009602:	e028      	b.n	8009656 <_dtoa_r+0x3a6>
 8009604:	2602      	movs	r6, #2
 8009606:	e7f2      	b.n	80095ee <_dtoa_r+0x33e>
 8009608:	07e1      	lsls	r1, r4, #31
 800960a:	d508      	bpl.n	800961e <_dtoa_r+0x36e>
 800960c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009610:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009614:	f7f7 f808 	bl	8000628 <__aeabi_dmul>
 8009618:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800961c:	3601      	adds	r6, #1
 800961e:	1064      	asrs	r4, r4, #1
 8009620:	3508      	adds	r5, #8
 8009622:	e7e5      	b.n	80095f0 <_dtoa_r+0x340>
 8009624:	f000 80af 	beq.w	8009786 <_dtoa_r+0x4d6>
 8009628:	427c      	negs	r4, r7
 800962a:	4b81      	ldr	r3, [pc, #516]	@ (8009830 <_dtoa_r+0x580>)
 800962c:	4d81      	ldr	r5, [pc, #516]	@ (8009834 <_dtoa_r+0x584>)
 800962e:	f004 020f 	and.w	r2, r4, #15
 8009632:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800963a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800963e:	f7f6 fff3 	bl	8000628 <__aeabi_dmul>
 8009642:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009646:	1124      	asrs	r4, r4, #4
 8009648:	2300      	movs	r3, #0
 800964a:	2602      	movs	r6, #2
 800964c:	2c00      	cmp	r4, #0
 800964e:	f040 808f 	bne.w	8009770 <_dtoa_r+0x4c0>
 8009652:	2b00      	cmp	r3, #0
 8009654:	d1d3      	bne.n	80095fe <_dtoa_r+0x34e>
 8009656:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009658:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800965c:	2b00      	cmp	r3, #0
 800965e:	f000 8094 	beq.w	800978a <_dtoa_r+0x4da>
 8009662:	4b75      	ldr	r3, [pc, #468]	@ (8009838 <_dtoa_r+0x588>)
 8009664:	2200      	movs	r2, #0
 8009666:	4620      	mov	r0, r4
 8009668:	4629      	mov	r1, r5
 800966a:	f7f7 fa4f 	bl	8000b0c <__aeabi_dcmplt>
 800966e:	2800      	cmp	r0, #0
 8009670:	f000 808b 	beq.w	800978a <_dtoa_r+0x4da>
 8009674:	9b03      	ldr	r3, [sp, #12]
 8009676:	2b00      	cmp	r3, #0
 8009678:	f000 8087 	beq.w	800978a <_dtoa_r+0x4da>
 800967c:	f1bb 0f00 	cmp.w	fp, #0
 8009680:	dd34      	ble.n	80096ec <_dtoa_r+0x43c>
 8009682:	4620      	mov	r0, r4
 8009684:	4b6d      	ldr	r3, [pc, #436]	@ (800983c <_dtoa_r+0x58c>)
 8009686:	2200      	movs	r2, #0
 8009688:	4629      	mov	r1, r5
 800968a:	f7f6 ffcd 	bl	8000628 <__aeabi_dmul>
 800968e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009692:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009696:	3601      	adds	r6, #1
 8009698:	465c      	mov	r4, fp
 800969a:	4630      	mov	r0, r6
 800969c:	f7f6 ff5a 	bl	8000554 <__aeabi_i2d>
 80096a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80096a4:	f7f6 ffc0 	bl	8000628 <__aeabi_dmul>
 80096a8:	4b65      	ldr	r3, [pc, #404]	@ (8009840 <_dtoa_r+0x590>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	f7f6 fe06 	bl	80002bc <__adddf3>
 80096b0:	4605      	mov	r5, r0
 80096b2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80096b6:	2c00      	cmp	r4, #0
 80096b8:	d16a      	bne.n	8009790 <_dtoa_r+0x4e0>
 80096ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096be:	4b61      	ldr	r3, [pc, #388]	@ (8009844 <_dtoa_r+0x594>)
 80096c0:	2200      	movs	r2, #0
 80096c2:	f7f6 fdf9 	bl	80002b8 <__aeabi_dsub>
 80096c6:	4602      	mov	r2, r0
 80096c8:	460b      	mov	r3, r1
 80096ca:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80096ce:	462a      	mov	r2, r5
 80096d0:	4633      	mov	r3, r6
 80096d2:	f7f7 fa39 	bl	8000b48 <__aeabi_dcmpgt>
 80096d6:	2800      	cmp	r0, #0
 80096d8:	f040 8298 	bne.w	8009c0c <_dtoa_r+0x95c>
 80096dc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80096e0:	462a      	mov	r2, r5
 80096e2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80096e6:	f7f7 fa11 	bl	8000b0c <__aeabi_dcmplt>
 80096ea:	bb38      	cbnz	r0, 800973c <_dtoa_r+0x48c>
 80096ec:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80096f0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80096f4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	f2c0 8157 	blt.w	80099aa <_dtoa_r+0x6fa>
 80096fc:	2f0e      	cmp	r7, #14
 80096fe:	f300 8154 	bgt.w	80099aa <_dtoa_r+0x6fa>
 8009702:	4b4b      	ldr	r3, [pc, #300]	@ (8009830 <_dtoa_r+0x580>)
 8009704:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009708:	ed93 7b00 	vldr	d7, [r3]
 800970c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800970e:	2b00      	cmp	r3, #0
 8009710:	ed8d 7b00 	vstr	d7, [sp]
 8009714:	f280 80e5 	bge.w	80098e2 <_dtoa_r+0x632>
 8009718:	9b03      	ldr	r3, [sp, #12]
 800971a:	2b00      	cmp	r3, #0
 800971c:	f300 80e1 	bgt.w	80098e2 <_dtoa_r+0x632>
 8009720:	d10c      	bne.n	800973c <_dtoa_r+0x48c>
 8009722:	4b48      	ldr	r3, [pc, #288]	@ (8009844 <_dtoa_r+0x594>)
 8009724:	2200      	movs	r2, #0
 8009726:	ec51 0b17 	vmov	r0, r1, d7
 800972a:	f7f6 ff7d 	bl	8000628 <__aeabi_dmul>
 800972e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009732:	f7f7 f9ff 	bl	8000b34 <__aeabi_dcmpge>
 8009736:	2800      	cmp	r0, #0
 8009738:	f000 8266 	beq.w	8009c08 <_dtoa_r+0x958>
 800973c:	2400      	movs	r4, #0
 800973e:	4625      	mov	r5, r4
 8009740:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009742:	4656      	mov	r6, sl
 8009744:	ea6f 0803 	mvn.w	r8, r3
 8009748:	2700      	movs	r7, #0
 800974a:	4621      	mov	r1, r4
 800974c:	4648      	mov	r0, r9
 800974e:	f000 fe63 	bl	800a418 <_Bfree>
 8009752:	2d00      	cmp	r5, #0
 8009754:	f000 80bd 	beq.w	80098d2 <_dtoa_r+0x622>
 8009758:	b12f      	cbz	r7, 8009766 <_dtoa_r+0x4b6>
 800975a:	42af      	cmp	r7, r5
 800975c:	d003      	beq.n	8009766 <_dtoa_r+0x4b6>
 800975e:	4639      	mov	r1, r7
 8009760:	4648      	mov	r0, r9
 8009762:	f000 fe59 	bl	800a418 <_Bfree>
 8009766:	4629      	mov	r1, r5
 8009768:	4648      	mov	r0, r9
 800976a:	f000 fe55 	bl	800a418 <_Bfree>
 800976e:	e0b0      	b.n	80098d2 <_dtoa_r+0x622>
 8009770:	07e2      	lsls	r2, r4, #31
 8009772:	d505      	bpl.n	8009780 <_dtoa_r+0x4d0>
 8009774:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009778:	f7f6 ff56 	bl	8000628 <__aeabi_dmul>
 800977c:	3601      	adds	r6, #1
 800977e:	2301      	movs	r3, #1
 8009780:	1064      	asrs	r4, r4, #1
 8009782:	3508      	adds	r5, #8
 8009784:	e762      	b.n	800964c <_dtoa_r+0x39c>
 8009786:	2602      	movs	r6, #2
 8009788:	e765      	b.n	8009656 <_dtoa_r+0x3a6>
 800978a:	9c03      	ldr	r4, [sp, #12]
 800978c:	46b8      	mov	r8, r7
 800978e:	e784      	b.n	800969a <_dtoa_r+0x3ea>
 8009790:	4b27      	ldr	r3, [pc, #156]	@ (8009830 <_dtoa_r+0x580>)
 8009792:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009794:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009798:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800979c:	4454      	add	r4, sl
 800979e:	2900      	cmp	r1, #0
 80097a0:	d054      	beq.n	800984c <_dtoa_r+0x59c>
 80097a2:	4929      	ldr	r1, [pc, #164]	@ (8009848 <_dtoa_r+0x598>)
 80097a4:	2000      	movs	r0, #0
 80097a6:	f7f7 f869 	bl	800087c <__aeabi_ddiv>
 80097aa:	4633      	mov	r3, r6
 80097ac:	462a      	mov	r2, r5
 80097ae:	f7f6 fd83 	bl	80002b8 <__aeabi_dsub>
 80097b2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80097b6:	4656      	mov	r6, sl
 80097b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097bc:	f7f7 f9e4 	bl	8000b88 <__aeabi_d2iz>
 80097c0:	4605      	mov	r5, r0
 80097c2:	f7f6 fec7 	bl	8000554 <__aeabi_i2d>
 80097c6:	4602      	mov	r2, r0
 80097c8:	460b      	mov	r3, r1
 80097ca:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80097ce:	f7f6 fd73 	bl	80002b8 <__aeabi_dsub>
 80097d2:	3530      	adds	r5, #48	@ 0x30
 80097d4:	4602      	mov	r2, r0
 80097d6:	460b      	mov	r3, r1
 80097d8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80097dc:	f806 5b01 	strb.w	r5, [r6], #1
 80097e0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097e4:	f7f7 f992 	bl	8000b0c <__aeabi_dcmplt>
 80097e8:	2800      	cmp	r0, #0
 80097ea:	d172      	bne.n	80098d2 <_dtoa_r+0x622>
 80097ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80097f0:	4911      	ldr	r1, [pc, #68]	@ (8009838 <_dtoa_r+0x588>)
 80097f2:	2000      	movs	r0, #0
 80097f4:	f7f6 fd60 	bl	80002b8 <__aeabi_dsub>
 80097f8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80097fc:	f7f7 f986 	bl	8000b0c <__aeabi_dcmplt>
 8009800:	2800      	cmp	r0, #0
 8009802:	f040 80b4 	bne.w	800996e <_dtoa_r+0x6be>
 8009806:	42a6      	cmp	r6, r4
 8009808:	f43f af70 	beq.w	80096ec <_dtoa_r+0x43c>
 800980c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009810:	4b0a      	ldr	r3, [pc, #40]	@ (800983c <_dtoa_r+0x58c>)
 8009812:	2200      	movs	r2, #0
 8009814:	f7f6 ff08 	bl	8000628 <__aeabi_dmul>
 8009818:	4b08      	ldr	r3, [pc, #32]	@ (800983c <_dtoa_r+0x58c>)
 800981a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800981e:	2200      	movs	r2, #0
 8009820:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009824:	f7f6 ff00 	bl	8000628 <__aeabi_dmul>
 8009828:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800982c:	e7c4      	b.n	80097b8 <_dtoa_r+0x508>
 800982e:	bf00      	nop
 8009830:	0800b260 	.word	0x0800b260
 8009834:	0800b238 	.word	0x0800b238
 8009838:	3ff00000 	.word	0x3ff00000
 800983c:	40240000 	.word	0x40240000
 8009840:	401c0000 	.word	0x401c0000
 8009844:	40140000 	.word	0x40140000
 8009848:	3fe00000 	.word	0x3fe00000
 800984c:	4631      	mov	r1, r6
 800984e:	4628      	mov	r0, r5
 8009850:	f7f6 feea 	bl	8000628 <__aeabi_dmul>
 8009854:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009858:	9413      	str	r4, [sp, #76]	@ 0x4c
 800985a:	4656      	mov	r6, sl
 800985c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009860:	f7f7 f992 	bl	8000b88 <__aeabi_d2iz>
 8009864:	4605      	mov	r5, r0
 8009866:	f7f6 fe75 	bl	8000554 <__aeabi_i2d>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009872:	f7f6 fd21 	bl	80002b8 <__aeabi_dsub>
 8009876:	3530      	adds	r5, #48	@ 0x30
 8009878:	f806 5b01 	strb.w	r5, [r6], #1
 800987c:	4602      	mov	r2, r0
 800987e:	460b      	mov	r3, r1
 8009880:	42a6      	cmp	r6, r4
 8009882:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009886:	f04f 0200 	mov.w	r2, #0
 800988a:	d124      	bne.n	80098d6 <_dtoa_r+0x626>
 800988c:	4baf      	ldr	r3, [pc, #700]	@ (8009b4c <_dtoa_r+0x89c>)
 800988e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009892:	f7f6 fd13 	bl	80002bc <__adddf3>
 8009896:	4602      	mov	r2, r0
 8009898:	460b      	mov	r3, r1
 800989a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800989e:	f7f7 f953 	bl	8000b48 <__aeabi_dcmpgt>
 80098a2:	2800      	cmp	r0, #0
 80098a4:	d163      	bne.n	800996e <_dtoa_r+0x6be>
 80098a6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80098aa:	49a8      	ldr	r1, [pc, #672]	@ (8009b4c <_dtoa_r+0x89c>)
 80098ac:	2000      	movs	r0, #0
 80098ae:	f7f6 fd03 	bl	80002b8 <__aeabi_dsub>
 80098b2:	4602      	mov	r2, r0
 80098b4:	460b      	mov	r3, r1
 80098b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80098ba:	f7f7 f927 	bl	8000b0c <__aeabi_dcmplt>
 80098be:	2800      	cmp	r0, #0
 80098c0:	f43f af14 	beq.w	80096ec <_dtoa_r+0x43c>
 80098c4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80098c6:	1e73      	subs	r3, r6, #1
 80098c8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80098ca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80098ce:	2b30      	cmp	r3, #48	@ 0x30
 80098d0:	d0f8      	beq.n	80098c4 <_dtoa_r+0x614>
 80098d2:	4647      	mov	r7, r8
 80098d4:	e03b      	b.n	800994e <_dtoa_r+0x69e>
 80098d6:	4b9e      	ldr	r3, [pc, #632]	@ (8009b50 <_dtoa_r+0x8a0>)
 80098d8:	f7f6 fea6 	bl	8000628 <__aeabi_dmul>
 80098dc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80098e0:	e7bc      	b.n	800985c <_dtoa_r+0x5ac>
 80098e2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80098e6:	4656      	mov	r6, sl
 80098e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80098ec:	4620      	mov	r0, r4
 80098ee:	4629      	mov	r1, r5
 80098f0:	f7f6 ffc4 	bl	800087c <__aeabi_ddiv>
 80098f4:	f7f7 f948 	bl	8000b88 <__aeabi_d2iz>
 80098f8:	4680      	mov	r8, r0
 80098fa:	f7f6 fe2b 	bl	8000554 <__aeabi_i2d>
 80098fe:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009902:	f7f6 fe91 	bl	8000628 <__aeabi_dmul>
 8009906:	4602      	mov	r2, r0
 8009908:	460b      	mov	r3, r1
 800990a:	4620      	mov	r0, r4
 800990c:	4629      	mov	r1, r5
 800990e:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009912:	f7f6 fcd1 	bl	80002b8 <__aeabi_dsub>
 8009916:	f806 4b01 	strb.w	r4, [r6], #1
 800991a:	9d03      	ldr	r5, [sp, #12]
 800991c:	eba6 040a 	sub.w	r4, r6, sl
 8009920:	42a5      	cmp	r5, r4
 8009922:	4602      	mov	r2, r0
 8009924:	460b      	mov	r3, r1
 8009926:	d133      	bne.n	8009990 <_dtoa_r+0x6e0>
 8009928:	f7f6 fcc8 	bl	80002bc <__adddf3>
 800992c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009930:	4604      	mov	r4, r0
 8009932:	460d      	mov	r5, r1
 8009934:	f7f7 f908 	bl	8000b48 <__aeabi_dcmpgt>
 8009938:	b9c0      	cbnz	r0, 800996c <_dtoa_r+0x6bc>
 800993a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800993e:	4620      	mov	r0, r4
 8009940:	4629      	mov	r1, r5
 8009942:	f7f7 f8d9 	bl	8000af8 <__aeabi_dcmpeq>
 8009946:	b110      	cbz	r0, 800994e <_dtoa_r+0x69e>
 8009948:	f018 0f01 	tst.w	r8, #1
 800994c:	d10e      	bne.n	800996c <_dtoa_r+0x6bc>
 800994e:	9902      	ldr	r1, [sp, #8]
 8009950:	4648      	mov	r0, r9
 8009952:	f000 fd61 	bl	800a418 <_Bfree>
 8009956:	2300      	movs	r3, #0
 8009958:	7033      	strb	r3, [r6, #0]
 800995a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800995c:	3701      	adds	r7, #1
 800995e:	601f      	str	r7, [r3, #0]
 8009960:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009962:	2b00      	cmp	r3, #0
 8009964:	f000 824b 	beq.w	8009dfe <_dtoa_r+0xb4e>
 8009968:	601e      	str	r6, [r3, #0]
 800996a:	e248      	b.n	8009dfe <_dtoa_r+0xb4e>
 800996c:	46b8      	mov	r8, r7
 800996e:	4633      	mov	r3, r6
 8009970:	461e      	mov	r6, r3
 8009972:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009976:	2a39      	cmp	r2, #57	@ 0x39
 8009978:	d106      	bne.n	8009988 <_dtoa_r+0x6d8>
 800997a:	459a      	cmp	sl, r3
 800997c:	d1f8      	bne.n	8009970 <_dtoa_r+0x6c0>
 800997e:	2230      	movs	r2, #48	@ 0x30
 8009980:	f108 0801 	add.w	r8, r8, #1
 8009984:	f88a 2000 	strb.w	r2, [sl]
 8009988:	781a      	ldrb	r2, [r3, #0]
 800998a:	3201      	adds	r2, #1
 800998c:	701a      	strb	r2, [r3, #0]
 800998e:	e7a0      	b.n	80098d2 <_dtoa_r+0x622>
 8009990:	4b6f      	ldr	r3, [pc, #444]	@ (8009b50 <_dtoa_r+0x8a0>)
 8009992:	2200      	movs	r2, #0
 8009994:	f7f6 fe48 	bl	8000628 <__aeabi_dmul>
 8009998:	2200      	movs	r2, #0
 800999a:	2300      	movs	r3, #0
 800999c:	4604      	mov	r4, r0
 800999e:	460d      	mov	r5, r1
 80099a0:	f7f7 f8aa 	bl	8000af8 <__aeabi_dcmpeq>
 80099a4:	2800      	cmp	r0, #0
 80099a6:	d09f      	beq.n	80098e8 <_dtoa_r+0x638>
 80099a8:	e7d1      	b.n	800994e <_dtoa_r+0x69e>
 80099aa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80099ac:	2a00      	cmp	r2, #0
 80099ae:	f000 80ea 	beq.w	8009b86 <_dtoa_r+0x8d6>
 80099b2:	9a07      	ldr	r2, [sp, #28]
 80099b4:	2a01      	cmp	r2, #1
 80099b6:	f300 80cd 	bgt.w	8009b54 <_dtoa_r+0x8a4>
 80099ba:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099bc:	2a00      	cmp	r2, #0
 80099be:	f000 80c1 	beq.w	8009b44 <_dtoa_r+0x894>
 80099c2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80099c6:	9c08      	ldr	r4, [sp, #32]
 80099c8:	9e00      	ldr	r6, [sp, #0]
 80099ca:	9a00      	ldr	r2, [sp, #0]
 80099cc:	441a      	add	r2, r3
 80099ce:	9200      	str	r2, [sp, #0]
 80099d0:	9a06      	ldr	r2, [sp, #24]
 80099d2:	2101      	movs	r1, #1
 80099d4:	441a      	add	r2, r3
 80099d6:	4648      	mov	r0, r9
 80099d8:	9206      	str	r2, [sp, #24]
 80099da:	f000 fdd1 	bl	800a580 <__i2b>
 80099de:	4605      	mov	r5, r0
 80099e0:	b166      	cbz	r6, 80099fc <_dtoa_r+0x74c>
 80099e2:	9b06      	ldr	r3, [sp, #24]
 80099e4:	2b00      	cmp	r3, #0
 80099e6:	dd09      	ble.n	80099fc <_dtoa_r+0x74c>
 80099e8:	42b3      	cmp	r3, r6
 80099ea:	9a00      	ldr	r2, [sp, #0]
 80099ec:	bfa8      	it	ge
 80099ee:	4633      	movge	r3, r6
 80099f0:	1ad2      	subs	r2, r2, r3
 80099f2:	9200      	str	r2, [sp, #0]
 80099f4:	9a06      	ldr	r2, [sp, #24]
 80099f6:	1af6      	subs	r6, r6, r3
 80099f8:	1ad3      	subs	r3, r2, r3
 80099fa:	9306      	str	r3, [sp, #24]
 80099fc:	9b08      	ldr	r3, [sp, #32]
 80099fe:	b30b      	cbz	r3, 8009a44 <_dtoa_r+0x794>
 8009a00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	f000 80c6 	beq.w	8009b94 <_dtoa_r+0x8e4>
 8009a08:	2c00      	cmp	r4, #0
 8009a0a:	f000 80c0 	beq.w	8009b8e <_dtoa_r+0x8de>
 8009a0e:	4629      	mov	r1, r5
 8009a10:	4622      	mov	r2, r4
 8009a12:	4648      	mov	r0, r9
 8009a14:	f000 fe6c 	bl	800a6f0 <__pow5mult>
 8009a18:	9a02      	ldr	r2, [sp, #8]
 8009a1a:	4601      	mov	r1, r0
 8009a1c:	4605      	mov	r5, r0
 8009a1e:	4648      	mov	r0, r9
 8009a20:	f000 fdc4 	bl	800a5ac <__multiply>
 8009a24:	9902      	ldr	r1, [sp, #8]
 8009a26:	4680      	mov	r8, r0
 8009a28:	4648      	mov	r0, r9
 8009a2a:	f000 fcf5 	bl	800a418 <_Bfree>
 8009a2e:	9b08      	ldr	r3, [sp, #32]
 8009a30:	1b1b      	subs	r3, r3, r4
 8009a32:	9308      	str	r3, [sp, #32]
 8009a34:	f000 80b1 	beq.w	8009b9a <_dtoa_r+0x8ea>
 8009a38:	9a08      	ldr	r2, [sp, #32]
 8009a3a:	4641      	mov	r1, r8
 8009a3c:	4648      	mov	r0, r9
 8009a3e:	f000 fe57 	bl	800a6f0 <__pow5mult>
 8009a42:	9002      	str	r0, [sp, #8]
 8009a44:	2101      	movs	r1, #1
 8009a46:	4648      	mov	r0, r9
 8009a48:	f000 fd9a 	bl	800a580 <__i2b>
 8009a4c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a4e:	4604      	mov	r4, r0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 81d8 	beq.w	8009e06 <_dtoa_r+0xb56>
 8009a56:	461a      	mov	r2, r3
 8009a58:	4601      	mov	r1, r0
 8009a5a:	4648      	mov	r0, r9
 8009a5c:	f000 fe48 	bl	800a6f0 <__pow5mult>
 8009a60:	9b07      	ldr	r3, [sp, #28]
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	4604      	mov	r4, r0
 8009a66:	f300 809f 	bgt.w	8009ba8 <_dtoa_r+0x8f8>
 8009a6a:	9b04      	ldr	r3, [sp, #16]
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	f040 8097 	bne.w	8009ba0 <_dtoa_r+0x8f0>
 8009a72:	9b05      	ldr	r3, [sp, #20]
 8009a74:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	f040 8093 	bne.w	8009ba4 <_dtoa_r+0x8f4>
 8009a7e:	9b05      	ldr	r3, [sp, #20]
 8009a80:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009a84:	0d1b      	lsrs	r3, r3, #20
 8009a86:	051b      	lsls	r3, r3, #20
 8009a88:	b133      	cbz	r3, 8009a98 <_dtoa_r+0x7e8>
 8009a8a:	9b00      	ldr	r3, [sp, #0]
 8009a8c:	3301      	adds	r3, #1
 8009a8e:	9300      	str	r3, [sp, #0]
 8009a90:	9b06      	ldr	r3, [sp, #24]
 8009a92:	3301      	adds	r3, #1
 8009a94:	9306      	str	r3, [sp, #24]
 8009a96:	2301      	movs	r3, #1
 8009a98:	9308      	str	r3, [sp, #32]
 8009a9a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009a9c:	2b00      	cmp	r3, #0
 8009a9e:	f000 81b8 	beq.w	8009e12 <_dtoa_r+0xb62>
 8009aa2:	6923      	ldr	r3, [r4, #16]
 8009aa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009aa8:	6918      	ldr	r0, [r3, #16]
 8009aaa:	f000 fd1d 	bl	800a4e8 <__hi0bits>
 8009aae:	f1c0 0020 	rsb	r0, r0, #32
 8009ab2:	9b06      	ldr	r3, [sp, #24]
 8009ab4:	4418      	add	r0, r3
 8009ab6:	f010 001f 	ands.w	r0, r0, #31
 8009aba:	f000 8082 	beq.w	8009bc2 <_dtoa_r+0x912>
 8009abe:	f1c0 0320 	rsb	r3, r0, #32
 8009ac2:	2b04      	cmp	r3, #4
 8009ac4:	dd73      	ble.n	8009bae <_dtoa_r+0x8fe>
 8009ac6:	9b00      	ldr	r3, [sp, #0]
 8009ac8:	f1c0 001c 	rsb	r0, r0, #28
 8009acc:	4403      	add	r3, r0
 8009ace:	9300      	str	r3, [sp, #0]
 8009ad0:	9b06      	ldr	r3, [sp, #24]
 8009ad2:	4403      	add	r3, r0
 8009ad4:	4406      	add	r6, r0
 8009ad6:	9306      	str	r3, [sp, #24]
 8009ad8:	9b00      	ldr	r3, [sp, #0]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	dd05      	ble.n	8009aea <_dtoa_r+0x83a>
 8009ade:	9902      	ldr	r1, [sp, #8]
 8009ae0:	461a      	mov	r2, r3
 8009ae2:	4648      	mov	r0, r9
 8009ae4:	f000 fe5e 	bl	800a7a4 <__lshift>
 8009ae8:	9002      	str	r0, [sp, #8]
 8009aea:	9b06      	ldr	r3, [sp, #24]
 8009aec:	2b00      	cmp	r3, #0
 8009aee:	dd05      	ble.n	8009afc <_dtoa_r+0x84c>
 8009af0:	4621      	mov	r1, r4
 8009af2:	461a      	mov	r2, r3
 8009af4:	4648      	mov	r0, r9
 8009af6:	f000 fe55 	bl	800a7a4 <__lshift>
 8009afa:	4604      	mov	r4, r0
 8009afc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009afe:	2b00      	cmp	r3, #0
 8009b00:	d061      	beq.n	8009bc6 <_dtoa_r+0x916>
 8009b02:	9802      	ldr	r0, [sp, #8]
 8009b04:	4621      	mov	r1, r4
 8009b06:	f000 feb9 	bl	800a87c <__mcmp>
 8009b0a:	2800      	cmp	r0, #0
 8009b0c:	da5b      	bge.n	8009bc6 <_dtoa_r+0x916>
 8009b0e:	2300      	movs	r3, #0
 8009b10:	9902      	ldr	r1, [sp, #8]
 8009b12:	220a      	movs	r2, #10
 8009b14:	4648      	mov	r0, r9
 8009b16:	f000 fca1 	bl	800a45c <__multadd>
 8009b1a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b1c:	9002      	str	r0, [sp, #8]
 8009b1e:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8009b22:	2b00      	cmp	r3, #0
 8009b24:	f000 8177 	beq.w	8009e16 <_dtoa_r+0xb66>
 8009b28:	4629      	mov	r1, r5
 8009b2a:	2300      	movs	r3, #0
 8009b2c:	220a      	movs	r2, #10
 8009b2e:	4648      	mov	r0, r9
 8009b30:	f000 fc94 	bl	800a45c <__multadd>
 8009b34:	f1bb 0f00 	cmp.w	fp, #0
 8009b38:	4605      	mov	r5, r0
 8009b3a:	dc6f      	bgt.n	8009c1c <_dtoa_r+0x96c>
 8009b3c:	9b07      	ldr	r3, [sp, #28]
 8009b3e:	2b02      	cmp	r3, #2
 8009b40:	dc49      	bgt.n	8009bd6 <_dtoa_r+0x926>
 8009b42:	e06b      	b.n	8009c1c <_dtoa_r+0x96c>
 8009b44:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8009b46:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8009b4a:	e73c      	b.n	80099c6 <_dtoa_r+0x716>
 8009b4c:	3fe00000 	.word	0x3fe00000
 8009b50:	40240000 	.word	0x40240000
 8009b54:	9b03      	ldr	r3, [sp, #12]
 8009b56:	1e5c      	subs	r4, r3, #1
 8009b58:	9b08      	ldr	r3, [sp, #32]
 8009b5a:	42a3      	cmp	r3, r4
 8009b5c:	db09      	blt.n	8009b72 <_dtoa_r+0x8c2>
 8009b5e:	1b1c      	subs	r4, r3, r4
 8009b60:	9b03      	ldr	r3, [sp, #12]
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	f6bf af30 	bge.w	80099c8 <_dtoa_r+0x718>
 8009b68:	9b00      	ldr	r3, [sp, #0]
 8009b6a:	9a03      	ldr	r2, [sp, #12]
 8009b6c:	1a9e      	subs	r6, r3, r2
 8009b6e:	2300      	movs	r3, #0
 8009b70:	e72b      	b.n	80099ca <_dtoa_r+0x71a>
 8009b72:	9b08      	ldr	r3, [sp, #32]
 8009b74:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8009b76:	9408      	str	r4, [sp, #32]
 8009b78:	1ae3      	subs	r3, r4, r3
 8009b7a:	441a      	add	r2, r3
 8009b7c:	9e00      	ldr	r6, [sp, #0]
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	920d      	str	r2, [sp, #52]	@ 0x34
 8009b82:	2400      	movs	r4, #0
 8009b84:	e721      	b.n	80099ca <_dtoa_r+0x71a>
 8009b86:	9c08      	ldr	r4, [sp, #32]
 8009b88:	9e00      	ldr	r6, [sp, #0]
 8009b8a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8009b8c:	e728      	b.n	80099e0 <_dtoa_r+0x730>
 8009b8e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8009b92:	e751      	b.n	8009a38 <_dtoa_r+0x788>
 8009b94:	9a08      	ldr	r2, [sp, #32]
 8009b96:	9902      	ldr	r1, [sp, #8]
 8009b98:	e750      	b.n	8009a3c <_dtoa_r+0x78c>
 8009b9a:	f8cd 8008 	str.w	r8, [sp, #8]
 8009b9e:	e751      	b.n	8009a44 <_dtoa_r+0x794>
 8009ba0:	2300      	movs	r3, #0
 8009ba2:	e779      	b.n	8009a98 <_dtoa_r+0x7e8>
 8009ba4:	9b04      	ldr	r3, [sp, #16]
 8009ba6:	e777      	b.n	8009a98 <_dtoa_r+0x7e8>
 8009ba8:	2300      	movs	r3, #0
 8009baa:	9308      	str	r3, [sp, #32]
 8009bac:	e779      	b.n	8009aa2 <_dtoa_r+0x7f2>
 8009bae:	d093      	beq.n	8009ad8 <_dtoa_r+0x828>
 8009bb0:	9a00      	ldr	r2, [sp, #0]
 8009bb2:	331c      	adds	r3, #28
 8009bb4:	441a      	add	r2, r3
 8009bb6:	9200      	str	r2, [sp, #0]
 8009bb8:	9a06      	ldr	r2, [sp, #24]
 8009bba:	441a      	add	r2, r3
 8009bbc:	441e      	add	r6, r3
 8009bbe:	9206      	str	r2, [sp, #24]
 8009bc0:	e78a      	b.n	8009ad8 <_dtoa_r+0x828>
 8009bc2:	4603      	mov	r3, r0
 8009bc4:	e7f4      	b.n	8009bb0 <_dtoa_r+0x900>
 8009bc6:	9b03      	ldr	r3, [sp, #12]
 8009bc8:	2b00      	cmp	r3, #0
 8009bca:	46b8      	mov	r8, r7
 8009bcc:	dc20      	bgt.n	8009c10 <_dtoa_r+0x960>
 8009bce:	469b      	mov	fp, r3
 8009bd0:	9b07      	ldr	r3, [sp, #28]
 8009bd2:	2b02      	cmp	r3, #2
 8009bd4:	dd1e      	ble.n	8009c14 <_dtoa_r+0x964>
 8009bd6:	f1bb 0f00 	cmp.w	fp, #0
 8009bda:	f47f adb1 	bne.w	8009740 <_dtoa_r+0x490>
 8009bde:	4621      	mov	r1, r4
 8009be0:	465b      	mov	r3, fp
 8009be2:	2205      	movs	r2, #5
 8009be4:	4648      	mov	r0, r9
 8009be6:	f000 fc39 	bl	800a45c <__multadd>
 8009bea:	4601      	mov	r1, r0
 8009bec:	4604      	mov	r4, r0
 8009bee:	9802      	ldr	r0, [sp, #8]
 8009bf0:	f000 fe44 	bl	800a87c <__mcmp>
 8009bf4:	2800      	cmp	r0, #0
 8009bf6:	f77f ada3 	ble.w	8009740 <_dtoa_r+0x490>
 8009bfa:	4656      	mov	r6, sl
 8009bfc:	2331      	movs	r3, #49	@ 0x31
 8009bfe:	f806 3b01 	strb.w	r3, [r6], #1
 8009c02:	f108 0801 	add.w	r8, r8, #1
 8009c06:	e59f      	b.n	8009748 <_dtoa_r+0x498>
 8009c08:	9c03      	ldr	r4, [sp, #12]
 8009c0a:	46b8      	mov	r8, r7
 8009c0c:	4625      	mov	r5, r4
 8009c0e:	e7f4      	b.n	8009bfa <_dtoa_r+0x94a>
 8009c10:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8009c14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	f000 8101 	beq.w	8009e1e <_dtoa_r+0xb6e>
 8009c1c:	2e00      	cmp	r6, #0
 8009c1e:	dd05      	ble.n	8009c2c <_dtoa_r+0x97c>
 8009c20:	4629      	mov	r1, r5
 8009c22:	4632      	mov	r2, r6
 8009c24:	4648      	mov	r0, r9
 8009c26:	f000 fdbd 	bl	800a7a4 <__lshift>
 8009c2a:	4605      	mov	r5, r0
 8009c2c:	9b08      	ldr	r3, [sp, #32]
 8009c2e:	2b00      	cmp	r3, #0
 8009c30:	d05c      	beq.n	8009cec <_dtoa_r+0xa3c>
 8009c32:	6869      	ldr	r1, [r5, #4]
 8009c34:	4648      	mov	r0, r9
 8009c36:	f000 fbaf 	bl	800a398 <_Balloc>
 8009c3a:	4606      	mov	r6, r0
 8009c3c:	b928      	cbnz	r0, 8009c4a <_dtoa_r+0x99a>
 8009c3e:	4b82      	ldr	r3, [pc, #520]	@ (8009e48 <_dtoa_r+0xb98>)
 8009c40:	4602      	mov	r2, r0
 8009c42:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8009c46:	f7ff bb4a 	b.w	80092de <_dtoa_r+0x2e>
 8009c4a:	692a      	ldr	r2, [r5, #16]
 8009c4c:	3202      	adds	r2, #2
 8009c4e:	0092      	lsls	r2, r2, #2
 8009c50:	f105 010c 	add.w	r1, r5, #12
 8009c54:	300c      	adds	r0, #12
 8009c56:	f001 f8cb 	bl	800adf0 <memcpy>
 8009c5a:	2201      	movs	r2, #1
 8009c5c:	4631      	mov	r1, r6
 8009c5e:	4648      	mov	r0, r9
 8009c60:	f000 fda0 	bl	800a7a4 <__lshift>
 8009c64:	f10a 0301 	add.w	r3, sl, #1
 8009c68:	9300      	str	r3, [sp, #0]
 8009c6a:	eb0a 030b 	add.w	r3, sl, fp
 8009c6e:	9308      	str	r3, [sp, #32]
 8009c70:	9b04      	ldr	r3, [sp, #16]
 8009c72:	f003 0301 	and.w	r3, r3, #1
 8009c76:	462f      	mov	r7, r5
 8009c78:	9306      	str	r3, [sp, #24]
 8009c7a:	4605      	mov	r5, r0
 8009c7c:	9b00      	ldr	r3, [sp, #0]
 8009c7e:	9802      	ldr	r0, [sp, #8]
 8009c80:	4621      	mov	r1, r4
 8009c82:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8009c86:	f7ff fa89 	bl	800919c <quorem>
 8009c8a:	4603      	mov	r3, r0
 8009c8c:	3330      	adds	r3, #48	@ 0x30
 8009c8e:	9003      	str	r0, [sp, #12]
 8009c90:	4639      	mov	r1, r7
 8009c92:	9802      	ldr	r0, [sp, #8]
 8009c94:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c96:	f000 fdf1 	bl	800a87c <__mcmp>
 8009c9a:	462a      	mov	r2, r5
 8009c9c:	9004      	str	r0, [sp, #16]
 8009c9e:	4621      	mov	r1, r4
 8009ca0:	4648      	mov	r0, r9
 8009ca2:	f000 fe07 	bl	800a8b4 <__mdiff>
 8009ca6:	68c2      	ldr	r2, [r0, #12]
 8009ca8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009caa:	4606      	mov	r6, r0
 8009cac:	bb02      	cbnz	r2, 8009cf0 <_dtoa_r+0xa40>
 8009cae:	4601      	mov	r1, r0
 8009cb0:	9802      	ldr	r0, [sp, #8]
 8009cb2:	f000 fde3 	bl	800a87c <__mcmp>
 8009cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cb8:	4602      	mov	r2, r0
 8009cba:	4631      	mov	r1, r6
 8009cbc:	4648      	mov	r0, r9
 8009cbe:	920c      	str	r2, [sp, #48]	@ 0x30
 8009cc0:	9309      	str	r3, [sp, #36]	@ 0x24
 8009cc2:	f000 fba9 	bl	800a418 <_Bfree>
 8009cc6:	9b07      	ldr	r3, [sp, #28]
 8009cc8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009cca:	9e00      	ldr	r6, [sp, #0]
 8009ccc:	ea42 0103 	orr.w	r1, r2, r3
 8009cd0:	9b06      	ldr	r3, [sp, #24]
 8009cd2:	4319      	orrs	r1, r3
 8009cd4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009cd6:	d10d      	bne.n	8009cf4 <_dtoa_r+0xa44>
 8009cd8:	2b39      	cmp	r3, #57	@ 0x39
 8009cda:	d027      	beq.n	8009d2c <_dtoa_r+0xa7c>
 8009cdc:	9a04      	ldr	r2, [sp, #16]
 8009cde:	2a00      	cmp	r2, #0
 8009ce0:	dd01      	ble.n	8009ce6 <_dtoa_r+0xa36>
 8009ce2:	9b03      	ldr	r3, [sp, #12]
 8009ce4:	3331      	adds	r3, #49	@ 0x31
 8009ce6:	f88b 3000 	strb.w	r3, [fp]
 8009cea:	e52e      	b.n	800974a <_dtoa_r+0x49a>
 8009cec:	4628      	mov	r0, r5
 8009cee:	e7b9      	b.n	8009c64 <_dtoa_r+0x9b4>
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	e7e2      	b.n	8009cba <_dtoa_r+0xa0a>
 8009cf4:	9904      	ldr	r1, [sp, #16]
 8009cf6:	2900      	cmp	r1, #0
 8009cf8:	db04      	blt.n	8009d04 <_dtoa_r+0xa54>
 8009cfa:	9807      	ldr	r0, [sp, #28]
 8009cfc:	4301      	orrs	r1, r0
 8009cfe:	9806      	ldr	r0, [sp, #24]
 8009d00:	4301      	orrs	r1, r0
 8009d02:	d120      	bne.n	8009d46 <_dtoa_r+0xa96>
 8009d04:	2a00      	cmp	r2, #0
 8009d06:	ddee      	ble.n	8009ce6 <_dtoa_r+0xa36>
 8009d08:	9902      	ldr	r1, [sp, #8]
 8009d0a:	9300      	str	r3, [sp, #0]
 8009d0c:	2201      	movs	r2, #1
 8009d0e:	4648      	mov	r0, r9
 8009d10:	f000 fd48 	bl	800a7a4 <__lshift>
 8009d14:	4621      	mov	r1, r4
 8009d16:	9002      	str	r0, [sp, #8]
 8009d18:	f000 fdb0 	bl	800a87c <__mcmp>
 8009d1c:	2800      	cmp	r0, #0
 8009d1e:	9b00      	ldr	r3, [sp, #0]
 8009d20:	dc02      	bgt.n	8009d28 <_dtoa_r+0xa78>
 8009d22:	d1e0      	bne.n	8009ce6 <_dtoa_r+0xa36>
 8009d24:	07da      	lsls	r2, r3, #31
 8009d26:	d5de      	bpl.n	8009ce6 <_dtoa_r+0xa36>
 8009d28:	2b39      	cmp	r3, #57	@ 0x39
 8009d2a:	d1da      	bne.n	8009ce2 <_dtoa_r+0xa32>
 8009d2c:	2339      	movs	r3, #57	@ 0x39
 8009d2e:	f88b 3000 	strb.w	r3, [fp]
 8009d32:	4633      	mov	r3, r6
 8009d34:	461e      	mov	r6, r3
 8009d36:	3b01      	subs	r3, #1
 8009d38:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009d3c:	2a39      	cmp	r2, #57	@ 0x39
 8009d3e:	d04e      	beq.n	8009dde <_dtoa_r+0xb2e>
 8009d40:	3201      	adds	r2, #1
 8009d42:	701a      	strb	r2, [r3, #0]
 8009d44:	e501      	b.n	800974a <_dtoa_r+0x49a>
 8009d46:	2a00      	cmp	r2, #0
 8009d48:	dd03      	ble.n	8009d52 <_dtoa_r+0xaa2>
 8009d4a:	2b39      	cmp	r3, #57	@ 0x39
 8009d4c:	d0ee      	beq.n	8009d2c <_dtoa_r+0xa7c>
 8009d4e:	3301      	adds	r3, #1
 8009d50:	e7c9      	b.n	8009ce6 <_dtoa_r+0xa36>
 8009d52:	9a00      	ldr	r2, [sp, #0]
 8009d54:	9908      	ldr	r1, [sp, #32]
 8009d56:	f802 3c01 	strb.w	r3, [r2, #-1]
 8009d5a:	428a      	cmp	r2, r1
 8009d5c:	d028      	beq.n	8009db0 <_dtoa_r+0xb00>
 8009d5e:	9902      	ldr	r1, [sp, #8]
 8009d60:	2300      	movs	r3, #0
 8009d62:	220a      	movs	r2, #10
 8009d64:	4648      	mov	r0, r9
 8009d66:	f000 fb79 	bl	800a45c <__multadd>
 8009d6a:	42af      	cmp	r7, r5
 8009d6c:	9002      	str	r0, [sp, #8]
 8009d6e:	f04f 0300 	mov.w	r3, #0
 8009d72:	f04f 020a 	mov.w	r2, #10
 8009d76:	4639      	mov	r1, r7
 8009d78:	4648      	mov	r0, r9
 8009d7a:	d107      	bne.n	8009d8c <_dtoa_r+0xadc>
 8009d7c:	f000 fb6e 	bl	800a45c <__multadd>
 8009d80:	4607      	mov	r7, r0
 8009d82:	4605      	mov	r5, r0
 8009d84:	9b00      	ldr	r3, [sp, #0]
 8009d86:	3301      	adds	r3, #1
 8009d88:	9300      	str	r3, [sp, #0]
 8009d8a:	e777      	b.n	8009c7c <_dtoa_r+0x9cc>
 8009d8c:	f000 fb66 	bl	800a45c <__multadd>
 8009d90:	4629      	mov	r1, r5
 8009d92:	4607      	mov	r7, r0
 8009d94:	2300      	movs	r3, #0
 8009d96:	220a      	movs	r2, #10
 8009d98:	4648      	mov	r0, r9
 8009d9a:	f000 fb5f 	bl	800a45c <__multadd>
 8009d9e:	4605      	mov	r5, r0
 8009da0:	e7f0      	b.n	8009d84 <_dtoa_r+0xad4>
 8009da2:	f1bb 0f00 	cmp.w	fp, #0
 8009da6:	bfcc      	ite	gt
 8009da8:	465e      	movgt	r6, fp
 8009daa:	2601      	movle	r6, #1
 8009dac:	4456      	add	r6, sl
 8009dae:	2700      	movs	r7, #0
 8009db0:	9902      	ldr	r1, [sp, #8]
 8009db2:	9300      	str	r3, [sp, #0]
 8009db4:	2201      	movs	r2, #1
 8009db6:	4648      	mov	r0, r9
 8009db8:	f000 fcf4 	bl	800a7a4 <__lshift>
 8009dbc:	4621      	mov	r1, r4
 8009dbe:	9002      	str	r0, [sp, #8]
 8009dc0:	f000 fd5c 	bl	800a87c <__mcmp>
 8009dc4:	2800      	cmp	r0, #0
 8009dc6:	dcb4      	bgt.n	8009d32 <_dtoa_r+0xa82>
 8009dc8:	d102      	bne.n	8009dd0 <_dtoa_r+0xb20>
 8009dca:	9b00      	ldr	r3, [sp, #0]
 8009dcc:	07db      	lsls	r3, r3, #31
 8009dce:	d4b0      	bmi.n	8009d32 <_dtoa_r+0xa82>
 8009dd0:	4633      	mov	r3, r6
 8009dd2:	461e      	mov	r6, r3
 8009dd4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009dd8:	2a30      	cmp	r2, #48	@ 0x30
 8009dda:	d0fa      	beq.n	8009dd2 <_dtoa_r+0xb22>
 8009ddc:	e4b5      	b.n	800974a <_dtoa_r+0x49a>
 8009dde:	459a      	cmp	sl, r3
 8009de0:	d1a8      	bne.n	8009d34 <_dtoa_r+0xa84>
 8009de2:	2331      	movs	r3, #49	@ 0x31
 8009de4:	f108 0801 	add.w	r8, r8, #1
 8009de8:	f88a 3000 	strb.w	r3, [sl]
 8009dec:	e4ad      	b.n	800974a <_dtoa_r+0x49a>
 8009dee:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009df0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8009e4c <_dtoa_r+0xb9c>
 8009df4:	b11b      	cbz	r3, 8009dfe <_dtoa_r+0xb4e>
 8009df6:	f10a 0308 	add.w	r3, sl, #8
 8009dfa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8009dfc:	6013      	str	r3, [r2, #0]
 8009dfe:	4650      	mov	r0, sl
 8009e00:	b017      	add	sp, #92	@ 0x5c
 8009e02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009e06:	9b07      	ldr	r3, [sp, #28]
 8009e08:	2b01      	cmp	r3, #1
 8009e0a:	f77f ae2e 	ble.w	8009a6a <_dtoa_r+0x7ba>
 8009e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e10:	9308      	str	r3, [sp, #32]
 8009e12:	2001      	movs	r0, #1
 8009e14:	e64d      	b.n	8009ab2 <_dtoa_r+0x802>
 8009e16:	f1bb 0f00 	cmp.w	fp, #0
 8009e1a:	f77f aed9 	ble.w	8009bd0 <_dtoa_r+0x920>
 8009e1e:	4656      	mov	r6, sl
 8009e20:	9802      	ldr	r0, [sp, #8]
 8009e22:	4621      	mov	r1, r4
 8009e24:	f7ff f9ba 	bl	800919c <quorem>
 8009e28:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8009e2c:	f806 3b01 	strb.w	r3, [r6], #1
 8009e30:	eba6 020a 	sub.w	r2, r6, sl
 8009e34:	4593      	cmp	fp, r2
 8009e36:	ddb4      	ble.n	8009da2 <_dtoa_r+0xaf2>
 8009e38:	9902      	ldr	r1, [sp, #8]
 8009e3a:	2300      	movs	r3, #0
 8009e3c:	220a      	movs	r2, #10
 8009e3e:	4648      	mov	r0, r9
 8009e40:	f000 fb0c 	bl	800a45c <__multadd>
 8009e44:	9002      	str	r0, [sp, #8]
 8009e46:	e7eb      	b.n	8009e20 <_dtoa_r+0xb70>
 8009e48:	0800b168 	.word	0x0800b168
 8009e4c:	0800b0ec 	.word	0x0800b0ec

08009e50 <__sfputc_r>:
 8009e50:	6893      	ldr	r3, [r2, #8]
 8009e52:	3b01      	subs	r3, #1
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	b410      	push	{r4}
 8009e58:	6093      	str	r3, [r2, #8]
 8009e5a:	da08      	bge.n	8009e6e <__sfputc_r+0x1e>
 8009e5c:	6994      	ldr	r4, [r2, #24]
 8009e5e:	42a3      	cmp	r3, r4
 8009e60:	db01      	blt.n	8009e66 <__sfputc_r+0x16>
 8009e62:	290a      	cmp	r1, #10
 8009e64:	d103      	bne.n	8009e6e <__sfputc_r+0x1e>
 8009e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e6a:	f000 be52 	b.w	800ab12 <__swbuf_r>
 8009e6e:	6813      	ldr	r3, [r2, #0]
 8009e70:	1c58      	adds	r0, r3, #1
 8009e72:	6010      	str	r0, [r2, #0]
 8009e74:	7019      	strb	r1, [r3, #0]
 8009e76:	4608      	mov	r0, r1
 8009e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009e7c:	4770      	bx	lr

08009e7e <__sfputs_r>:
 8009e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e80:	4606      	mov	r6, r0
 8009e82:	460f      	mov	r7, r1
 8009e84:	4614      	mov	r4, r2
 8009e86:	18d5      	adds	r5, r2, r3
 8009e88:	42ac      	cmp	r4, r5
 8009e8a:	d101      	bne.n	8009e90 <__sfputs_r+0x12>
 8009e8c:	2000      	movs	r0, #0
 8009e8e:	e007      	b.n	8009ea0 <__sfputs_r+0x22>
 8009e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e94:	463a      	mov	r2, r7
 8009e96:	4630      	mov	r0, r6
 8009e98:	f7ff ffda 	bl	8009e50 <__sfputc_r>
 8009e9c:	1c43      	adds	r3, r0, #1
 8009e9e:	d1f3      	bne.n	8009e88 <__sfputs_r+0xa>
 8009ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009ea4 <_vfiprintf_r>:
 8009ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ea8:	460d      	mov	r5, r1
 8009eaa:	b09d      	sub	sp, #116	@ 0x74
 8009eac:	4614      	mov	r4, r2
 8009eae:	4698      	mov	r8, r3
 8009eb0:	4606      	mov	r6, r0
 8009eb2:	b118      	cbz	r0, 8009ebc <_vfiprintf_r+0x18>
 8009eb4:	6a03      	ldr	r3, [r0, #32]
 8009eb6:	b90b      	cbnz	r3, 8009ebc <_vfiprintf_r+0x18>
 8009eb8:	f7ff f8ee 	bl	8009098 <__sinit>
 8009ebc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ebe:	07d9      	lsls	r1, r3, #31
 8009ec0:	d405      	bmi.n	8009ece <_vfiprintf_r+0x2a>
 8009ec2:	89ab      	ldrh	r3, [r5, #12]
 8009ec4:	059a      	lsls	r2, r3, #22
 8009ec6:	d402      	bmi.n	8009ece <_vfiprintf_r+0x2a>
 8009ec8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009eca:	f7ff f960 	bl	800918e <__retarget_lock_acquire_recursive>
 8009ece:	89ab      	ldrh	r3, [r5, #12]
 8009ed0:	071b      	lsls	r3, r3, #28
 8009ed2:	d501      	bpl.n	8009ed8 <_vfiprintf_r+0x34>
 8009ed4:	692b      	ldr	r3, [r5, #16]
 8009ed6:	b99b      	cbnz	r3, 8009f00 <_vfiprintf_r+0x5c>
 8009ed8:	4629      	mov	r1, r5
 8009eda:	4630      	mov	r0, r6
 8009edc:	f000 fe58 	bl	800ab90 <__swsetup_r>
 8009ee0:	b170      	cbz	r0, 8009f00 <_vfiprintf_r+0x5c>
 8009ee2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009ee4:	07dc      	lsls	r4, r3, #31
 8009ee6:	d504      	bpl.n	8009ef2 <_vfiprintf_r+0x4e>
 8009ee8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eec:	b01d      	add	sp, #116	@ 0x74
 8009eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ef2:	89ab      	ldrh	r3, [r5, #12]
 8009ef4:	0598      	lsls	r0, r3, #22
 8009ef6:	d4f7      	bmi.n	8009ee8 <_vfiprintf_r+0x44>
 8009ef8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009efa:	f7ff f949 	bl	8009190 <__retarget_lock_release_recursive>
 8009efe:	e7f3      	b.n	8009ee8 <_vfiprintf_r+0x44>
 8009f00:	2300      	movs	r3, #0
 8009f02:	9309      	str	r3, [sp, #36]	@ 0x24
 8009f04:	2320      	movs	r3, #32
 8009f06:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009f0a:	f8cd 800c 	str.w	r8, [sp, #12]
 8009f0e:	2330      	movs	r3, #48	@ 0x30
 8009f10:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a0c0 <_vfiprintf_r+0x21c>
 8009f14:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009f18:	f04f 0901 	mov.w	r9, #1
 8009f1c:	4623      	mov	r3, r4
 8009f1e:	469a      	mov	sl, r3
 8009f20:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009f24:	b10a      	cbz	r2, 8009f2a <_vfiprintf_r+0x86>
 8009f26:	2a25      	cmp	r2, #37	@ 0x25
 8009f28:	d1f9      	bne.n	8009f1e <_vfiprintf_r+0x7a>
 8009f2a:	ebba 0b04 	subs.w	fp, sl, r4
 8009f2e:	d00b      	beq.n	8009f48 <_vfiprintf_r+0xa4>
 8009f30:	465b      	mov	r3, fp
 8009f32:	4622      	mov	r2, r4
 8009f34:	4629      	mov	r1, r5
 8009f36:	4630      	mov	r0, r6
 8009f38:	f7ff ffa1 	bl	8009e7e <__sfputs_r>
 8009f3c:	3001      	adds	r0, #1
 8009f3e:	f000 80a7 	beq.w	800a090 <_vfiprintf_r+0x1ec>
 8009f42:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f44:	445a      	add	r2, fp
 8009f46:	9209      	str	r2, [sp, #36]	@ 0x24
 8009f48:	f89a 3000 	ldrb.w	r3, [sl]
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	f000 809f 	beq.w	800a090 <_vfiprintf_r+0x1ec>
 8009f52:	2300      	movs	r3, #0
 8009f54:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009f58:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009f5c:	f10a 0a01 	add.w	sl, sl, #1
 8009f60:	9304      	str	r3, [sp, #16]
 8009f62:	9307      	str	r3, [sp, #28]
 8009f64:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009f68:	931a      	str	r3, [sp, #104]	@ 0x68
 8009f6a:	4654      	mov	r4, sl
 8009f6c:	2205      	movs	r2, #5
 8009f6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f72:	4853      	ldr	r0, [pc, #332]	@ (800a0c0 <_vfiprintf_r+0x21c>)
 8009f74:	f7f6 f944 	bl	8000200 <memchr>
 8009f78:	9a04      	ldr	r2, [sp, #16]
 8009f7a:	b9d8      	cbnz	r0, 8009fb4 <_vfiprintf_r+0x110>
 8009f7c:	06d1      	lsls	r1, r2, #27
 8009f7e:	bf44      	itt	mi
 8009f80:	2320      	movmi	r3, #32
 8009f82:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f86:	0713      	lsls	r3, r2, #28
 8009f88:	bf44      	itt	mi
 8009f8a:	232b      	movmi	r3, #43	@ 0x2b
 8009f8c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009f90:	f89a 3000 	ldrb.w	r3, [sl]
 8009f94:	2b2a      	cmp	r3, #42	@ 0x2a
 8009f96:	d015      	beq.n	8009fc4 <_vfiprintf_r+0x120>
 8009f98:	9a07      	ldr	r2, [sp, #28]
 8009f9a:	4654      	mov	r4, sl
 8009f9c:	2000      	movs	r0, #0
 8009f9e:	f04f 0c0a 	mov.w	ip, #10
 8009fa2:	4621      	mov	r1, r4
 8009fa4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009fa8:	3b30      	subs	r3, #48	@ 0x30
 8009faa:	2b09      	cmp	r3, #9
 8009fac:	d94b      	bls.n	800a046 <_vfiprintf_r+0x1a2>
 8009fae:	b1b0      	cbz	r0, 8009fde <_vfiprintf_r+0x13a>
 8009fb0:	9207      	str	r2, [sp, #28]
 8009fb2:	e014      	b.n	8009fde <_vfiprintf_r+0x13a>
 8009fb4:	eba0 0308 	sub.w	r3, r0, r8
 8009fb8:	fa09 f303 	lsl.w	r3, r9, r3
 8009fbc:	4313      	orrs	r3, r2
 8009fbe:	9304      	str	r3, [sp, #16]
 8009fc0:	46a2      	mov	sl, r4
 8009fc2:	e7d2      	b.n	8009f6a <_vfiprintf_r+0xc6>
 8009fc4:	9b03      	ldr	r3, [sp, #12]
 8009fc6:	1d19      	adds	r1, r3, #4
 8009fc8:	681b      	ldr	r3, [r3, #0]
 8009fca:	9103      	str	r1, [sp, #12]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	bfbb      	ittet	lt
 8009fd0:	425b      	neglt	r3, r3
 8009fd2:	f042 0202 	orrlt.w	r2, r2, #2
 8009fd6:	9307      	strge	r3, [sp, #28]
 8009fd8:	9307      	strlt	r3, [sp, #28]
 8009fda:	bfb8      	it	lt
 8009fdc:	9204      	strlt	r2, [sp, #16]
 8009fde:	7823      	ldrb	r3, [r4, #0]
 8009fe0:	2b2e      	cmp	r3, #46	@ 0x2e
 8009fe2:	d10a      	bne.n	8009ffa <_vfiprintf_r+0x156>
 8009fe4:	7863      	ldrb	r3, [r4, #1]
 8009fe6:	2b2a      	cmp	r3, #42	@ 0x2a
 8009fe8:	d132      	bne.n	800a050 <_vfiprintf_r+0x1ac>
 8009fea:	9b03      	ldr	r3, [sp, #12]
 8009fec:	1d1a      	adds	r2, r3, #4
 8009fee:	681b      	ldr	r3, [r3, #0]
 8009ff0:	9203      	str	r2, [sp, #12]
 8009ff2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009ff6:	3402      	adds	r4, #2
 8009ff8:	9305      	str	r3, [sp, #20]
 8009ffa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a0d0 <_vfiprintf_r+0x22c>
 8009ffe:	7821      	ldrb	r1, [r4, #0]
 800a000:	2203      	movs	r2, #3
 800a002:	4650      	mov	r0, sl
 800a004:	f7f6 f8fc 	bl	8000200 <memchr>
 800a008:	b138      	cbz	r0, 800a01a <_vfiprintf_r+0x176>
 800a00a:	9b04      	ldr	r3, [sp, #16]
 800a00c:	eba0 000a 	sub.w	r0, r0, sl
 800a010:	2240      	movs	r2, #64	@ 0x40
 800a012:	4082      	lsls	r2, r0
 800a014:	4313      	orrs	r3, r2
 800a016:	3401      	adds	r4, #1
 800a018:	9304      	str	r3, [sp, #16]
 800a01a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a01e:	4829      	ldr	r0, [pc, #164]	@ (800a0c4 <_vfiprintf_r+0x220>)
 800a020:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a024:	2206      	movs	r2, #6
 800a026:	f7f6 f8eb 	bl	8000200 <memchr>
 800a02a:	2800      	cmp	r0, #0
 800a02c:	d03f      	beq.n	800a0ae <_vfiprintf_r+0x20a>
 800a02e:	4b26      	ldr	r3, [pc, #152]	@ (800a0c8 <_vfiprintf_r+0x224>)
 800a030:	bb1b      	cbnz	r3, 800a07a <_vfiprintf_r+0x1d6>
 800a032:	9b03      	ldr	r3, [sp, #12]
 800a034:	3307      	adds	r3, #7
 800a036:	f023 0307 	bic.w	r3, r3, #7
 800a03a:	3308      	adds	r3, #8
 800a03c:	9303      	str	r3, [sp, #12]
 800a03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a040:	443b      	add	r3, r7
 800a042:	9309      	str	r3, [sp, #36]	@ 0x24
 800a044:	e76a      	b.n	8009f1c <_vfiprintf_r+0x78>
 800a046:	fb0c 3202 	mla	r2, ip, r2, r3
 800a04a:	460c      	mov	r4, r1
 800a04c:	2001      	movs	r0, #1
 800a04e:	e7a8      	b.n	8009fa2 <_vfiprintf_r+0xfe>
 800a050:	2300      	movs	r3, #0
 800a052:	3401      	adds	r4, #1
 800a054:	9305      	str	r3, [sp, #20]
 800a056:	4619      	mov	r1, r3
 800a058:	f04f 0c0a 	mov.w	ip, #10
 800a05c:	4620      	mov	r0, r4
 800a05e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a062:	3a30      	subs	r2, #48	@ 0x30
 800a064:	2a09      	cmp	r2, #9
 800a066:	d903      	bls.n	800a070 <_vfiprintf_r+0x1cc>
 800a068:	2b00      	cmp	r3, #0
 800a06a:	d0c6      	beq.n	8009ffa <_vfiprintf_r+0x156>
 800a06c:	9105      	str	r1, [sp, #20]
 800a06e:	e7c4      	b.n	8009ffa <_vfiprintf_r+0x156>
 800a070:	fb0c 2101 	mla	r1, ip, r1, r2
 800a074:	4604      	mov	r4, r0
 800a076:	2301      	movs	r3, #1
 800a078:	e7f0      	b.n	800a05c <_vfiprintf_r+0x1b8>
 800a07a:	ab03      	add	r3, sp, #12
 800a07c:	9300      	str	r3, [sp, #0]
 800a07e:	462a      	mov	r2, r5
 800a080:	4b12      	ldr	r3, [pc, #72]	@ (800a0cc <_vfiprintf_r+0x228>)
 800a082:	a904      	add	r1, sp, #16
 800a084:	4630      	mov	r0, r6
 800a086:	f7fe fbc5 	bl	8008814 <_printf_float>
 800a08a:	4607      	mov	r7, r0
 800a08c:	1c78      	adds	r0, r7, #1
 800a08e:	d1d6      	bne.n	800a03e <_vfiprintf_r+0x19a>
 800a090:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a092:	07d9      	lsls	r1, r3, #31
 800a094:	d405      	bmi.n	800a0a2 <_vfiprintf_r+0x1fe>
 800a096:	89ab      	ldrh	r3, [r5, #12]
 800a098:	059a      	lsls	r2, r3, #22
 800a09a:	d402      	bmi.n	800a0a2 <_vfiprintf_r+0x1fe>
 800a09c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a09e:	f7ff f877 	bl	8009190 <__retarget_lock_release_recursive>
 800a0a2:	89ab      	ldrh	r3, [r5, #12]
 800a0a4:	065b      	lsls	r3, r3, #25
 800a0a6:	f53f af1f 	bmi.w	8009ee8 <_vfiprintf_r+0x44>
 800a0aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a0ac:	e71e      	b.n	8009eec <_vfiprintf_r+0x48>
 800a0ae:	ab03      	add	r3, sp, #12
 800a0b0:	9300      	str	r3, [sp, #0]
 800a0b2:	462a      	mov	r2, r5
 800a0b4:	4b05      	ldr	r3, [pc, #20]	@ (800a0cc <_vfiprintf_r+0x228>)
 800a0b6:	a904      	add	r1, sp, #16
 800a0b8:	4630      	mov	r0, r6
 800a0ba:	f7fe fe43 	bl	8008d44 <_printf_i>
 800a0be:	e7e4      	b.n	800a08a <_vfiprintf_r+0x1e6>
 800a0c0:	0800b179 	.word	0x0800b179
 800a0c4:	0800b183 	.word	0x0800b183
 800a0c8:	08008815 	.word	0x08008815
 800a0cc:	08009e7f 	.word	0x08009e7f
 800a0d0:	0800b17f 	.word	0x0800b17f

0800a0d4 <malloc>:
 800a0d4:	4b02      	ldr	r3, [pc, #8]	@ (800a0e0 <malloc+0xc>)
 800a0d6:	4601      	mov	r1, r0
 800a0d8:	6818      	ldr	r0, [r3, #0]
 800a0da:	f000 b825 	b.w	800a128 <_malloc_r>
 800a0de:	bf00      	nop
 800a0e0:	2000001c 	.word	0x2000001c

0800a0e4 <sbrk_aligned>:
 800a0e4:	b570      	push	{r4, r5, r6, lr}
 800a0e6:	4e0f      	ldr	r6, [pc, #60]	@ (800a124 <sbrk_aligned+0x40>)
 800a0e8:	460c      	mov	r4, r1
 800a0ea:	6831      	ldr	r1, [r6, #0]
 800a0ec:	4605      	mov	r5, r0
 800a0ee:	b911      	cbnz	r1, 800a0f6 <sbrk_aligned+0x12>
 800a0f0:	f000 fe3a 	bl	800ad68 <_sbrk_r>
 800a0f4:	6030      	str	r0, [r6, #0]
 800a0f6:	4621      	mov	r1, r4
 800a0f8:	4628      	mov	r0, r5
 800a0fa:	f000 fe35 	bl	800ad68 <_sbrk_r>
 800a0fe:	1c43      	adds	r3, r0, #1
 800a100:	d103      	bne.n	800a10a <sbrk_aligned+0x26>
 800a102:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800a106:	4620      	mov	r0, r4
 800a108:	bd70      	pop	{r4, r5, r6, pc}
 800a10a:	1cc4      	adds	r4, r0, #3
 800a10c:	f024 0403 	bic.w	r4, r4, #3
 800a110:	42a0      	cmp	r0, r4
 800a112:	d0f8      	beq.n	800a106 <sbrk_aligned+0x22>
 800a114:	1a21      	subs	r1, r4, r0
 800a116:	4628      	mov	r0, r5
 800a118:	f000 fe26 	bl	800ad68 <_sbrk_r>
 800a11c:	3001      	adds	r0, #1
 800a11e:	d1f2      	bne.n	800a106 <sbrk_aligned+0x22>
 800a120:	e7ef      	b.n	800a102 <sbrk_aligned+0x1e>
 800a122:	bf00      	nop
 800a124:	200005c8 	.word	0x200005c8

0800a128 <_malloc_r>:
 800a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	1ccd      	adds	r5, r1, #3
 800a12e:	f025 0503 	bic.w	r5, r5, #3
 800a132:	3508      	adds	r5, #8
 800a134:	2d0c      	cmp	r5, #12
 800a136:	bf38      	it	cc
 800a138:	250c      	movcc	r5, #12
 800a13a:	2d00      	cmp	r5, #0
 800a13c:	4606      	mov	r6, r0
 800a13e:	db01      	blt.n	800a144 <_malloc_r+0x1c>
 800a140:	42a9      	cmp	r1, r5
 800a142:	d904      	bls.n	800a14e <_malloc_r+0x26>
 800a144:	230c      	movs	r3, #12
 800a146:	6033      	str	r3, [r6, #0]
 800a148:	2000      	movs	r0, #0
 800a14a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a14e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800a224 <_malloc_r+0xfc>
 800a152:	f000 f915 	bl	800a380 <__malloc_lock>
 800a156:	f8d8 3000 	ldr.w	r3, [r8]
 800a15a:	461c      	mov	r4, r3
 800a15c:	bb44      	cbnz	r4, 800a1b0 <_malloc_r+0x88>
 800a15e:	4629      	mov	r1, r5
 800a160:	4630      	mov	r0, r6
 800a162:	f7ff ffbf 	bl	800a0e4 <sbrk_aligned>
 800a166:	1c43      	adds	r3, r0, #1
 800a168:	4604      	mov	r4, r0
 800a16a:	d158      	bne.n	800a21e <_malloc_r+0xf6>
 800a16c:	f8d8 4000 	ldr.w	r4, [r8]
 800a170:	4627      	mov	r7, r4
 800a172:	2f00      	cmp	r7, #0
 800a174:	d143      	bne.n	800a1fe <_malloc_r+0xd6>
 800a176:	2c00      	cmp	r4, #0
 800a178:	d04b      	beq.n	800a212 <_malloc_r+0xea>
 800a17a:	6823      	ldr	r3, [r4, #0]
 800a17c:	4639      	mov	r1, r7
 800a17e:	4630      	mov	r0, r6
 800a180:	eb04 0903 	add.w	r9, r4, r3
 800a184:	f000 fdf0 	bl	800ad68 <_sbrk_r>
 800a188:	4581      	cmp	r9, r0
 800a18a:	d142      	bne.n	800a212 <_malloc_r+0xea>
 800a18c:	6821      	ldr	r1, [r4, #0]
 800a18e:	1a6d      	subs	r5, r5, r1
 800a190:	4629      	mov	r1, r5
 800a192:	4630      	mov	r0, r6
 800a194:	f7ff ffa6 	bl	800a0e4 <sbrk_aligned>
 800a198:	3001      	adds	r0, #1
 800a19a:	d03a      	beq.n	800a212 <_malloc_r+0xea>
 800a19c:	6823      	ldr	r3, [r4, #0]
 800a19e:	442b      	add	r3, r5
 800a1a0:	6023      	str	r3, [r4, #0]
 800a1a2:	f8d8 3000 	ldr.w	r3, [r8]
 800a1a6:	685a      	ldr	r2, [r3, #4]
 800a1a8:	bb62      	cbnz	r2, 800a204 <_malloc_r+0xdc>
 800a1aa:	f8c8 7000 	str.w	r7, [r8]
 800a1ae:	e00f      	b.n	800a1d0 <_malloc_r+0xa8>
 800a1b0:	6822      	ldr	r2, [r4, #0]
 800a1b2:	1b52      	subs	r2, r2, r5
 800a1b4:	d420      	bmi.n	800a1f8 <_malloc_r+0xd0>
 800a1b6:	2a0b      	cmp	r2, #11
 800a1b8:	d917      	bls.n	800a1ea <_malloc_r+0xc2>
 800a1ba:	1961      	adds	r1, r4, r5
 800a1bc:	42a3      	cmp	r3, r4
 800a1be:	6025      	str	r5, [r4, #0]
 800a1c0:	bf18      	it	ne
 800a1c2:	6059      	strne	r1, [r3, #4]
 800a1c4:	6863      	ldr	r3, [r4, #4]
 800a1c6:	bf08      	it	eq
 800a1c8:	f8c8 1000 	streq.w	r1, [r8]
 800a1cc:	5162      	str	r2, [r4, r5]
 800a1ce:	604b      	str	r3, [r1, #4]
 800a1d0:	4630      	mov	r0, r6
 800a1d2:	f000 f8db 	bl	800a38c <__malloc_unlock>
 800a1d6:	f104 000b 	add.w	r0, r4, #11
 800a1da:	1d23      	adds	r3, r4, #4
 800a1dc:	f020 0007 	bic.w	r0, r0, #7
 800a1e0:	1ac2      	subs	r2, r0, r3
 800a1e2:	bf1c      	itt	ne
 800a1e4:	1a1b      	subne	r3, r3, r0
 800a1e6:	50a3      	strne	r3, [r4, r2]
 800a1e8:	e7af      	b.n	800a14a <_malloc_r+0x22>
 800a1ea:	6862      	ldr	r2, [r4, #4]
 800a1ec:	42a3      	cmp	r3, r4
 800a1ee:	bf0c      	ite	eq
 800a1f0:	f8c8 2000 	streq.w	r2, [r8]
 800a1f4:	605a      	strne	r2, [r3, #4]
 800a1f6:	e7eb      	b.n	800a1d0 <_malloc_r+0xa8>
 800a1f8:	4623      	mov	r3, r4
 800a1fa:	6864      	ldr	r4, [r4, #4]
 800a1fc:	e7ae      	b.n	800a15c <_malloc_r+0x34>
 800a1fe:	463c      	mov	r4, r7
 800a200:	687f      	ldr	r7, [r7, #4]
 800a202:	e7b6      	b.n	800a172 <_malloc_r+0x4a>
 800a204:	461a      	mov	r2, r3
 800a206:	685b      	ldr	r3, [r3, #4]
 800a208:	42a3      	cmp	r3, r4
 800a20a:	d1fb      	bne.n	800a204 <_malloc_r+0xdc>
 800a20c:	2300      	movs	r3, #0
 800a20e:	6053      	str	r3, [r2, #4]
 800a210:	e7de      	b.n	800a1d0 <_malloc_r+0xa8>
 800a212:	230c      	movs	r3, #12
 800a214:	6033      	str	r3, [r6, #0]
 800a216:	4630      	mov	r0, r6
 800a218:	f000 f8b8 	bl	800a38c <__malloc_unlock>
 800a21c:	e794      	b.n	800a148 <_malloc_r+0x20>
 800a21e:	6005      	str	r5, [r0, #0]
 800a220:	e7d6      	b.n	800a1d0 <_malloc_r+0xa8>
 800a222:	bf00      	nop
 800a224:	200005cc 	.word	0x200005cc

0800a228 <__sflush_r>:
 800a228:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a22c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a230:	0716      	lsls	r6, r2, #28
 800a232:	4605      	mov	r5, r0
 800a234:	460c      	mov	r4, r1
 800a236:	d454      	bmi.n	800a2e2 <__sflush_r+0xba>
 800a238:	684b      	ldr	r3, [r1, #4]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	dc02      	bgt.n	800a244 <__sflush_r+0x1c>
 800a23e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a240:	2b00      	cmp	r3, #0
 800a242:	dd48      	ble.n	800a2d6 <__sflush_r+0xae>
 800a244:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a246:	2e00      	cmp	r6, #0
 800a248:	d045      	beq.n	800a2d6 <__sflush_r+0xae>
 800a24a:	2300      	movs	r3, #0
 800a24c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a250:	682f      	ldr	r7, [r5, #0]
 800a252:	6a21      	ldr	r1, [r4, #32]
 800a254:	602b      	str	r3, [r5, #0]
 800a256:	d030      	beq.n	800a2ba <__sflush_r+0x92>
 800a258:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a25a:	89a3      	ldrh	r3, [r4, #12]
 800a25c:	0759      	lsls	r1, r3, #29
 800a25e:	d505      	bpl.n	800a26c <__sflush_r+0x44>
 800a260:	6863      	ldr	r3, [r4, #4]
 800a262:	1ad2      	subs	r2, r2, r3
 800a264:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a266:	b10b      	cbz	r3, 800a26c <__sflush_r+0x44>
 800a268:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a26a:	1ad2      	subs	r2, r2, r3
 800a26c:	2300      	movs	r3, #0
 800a26e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a270:	6a21      	ldr	r1, [r4, #32]
 800a272:	4628      	mov	r0, r5
 800a274:	47b0      	blx	r6
 800a276:	1c43      	adds	r3, r0, #1
 800a278:	89a3      	ldrh	r3, [r4, #12]
 800a27a:	d106      	bne.n	800a28a <__sflush_r+0x62>
 800a27c:	6829      	ldr	r1, [r5, #0]
 800a27e:	291d      	cmp	r1, #29
 800a280:	d82b      	bhi.n	800a2da <__sflush_r+0xb2>
 800a282:	4a2a      	ldr	r2, [pc, #168]	@ (800a32c <__sflush_r+0x104>)
 800a284:	40ca      	lsrs	r2, r1
 800a286:	07d6      	lsls	r6, r2, #31
 800a288:	d527      	bpl.n	800a2da <__sflush_r+0xb2>
 800a28a:	2200      	movs	r2, #0
 800a28c:	6062      	str	r2, [r4, #4]
 800a28e:	04d9      	lsls	r1, r3, #19
 800a290:	6922      	ldr	r2, [r4, #16]
 800a292:	6022      	str	r2, [r4, #0]
 800a294:	d504      	bpl.n	800a2a0 <__sflush_r+0x78>
 800a296:	1c42      	adds	r2, r0, #1
 800a298:	d101      	bne.n	800a29e <__sflush_r+0x76>
 800a29a:	682b      	ldr	r3, [r5, #0]
 800a29c:	b903      	cbnz	r3, 800a2a0 <__sflush_r+0x78>
 800a29e:	6560      	str	r0, [r4, #84]	@ 0x54
 800a2a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a2a2:	602f      	str	r7, [r5, #0]
 800a2a4:	b1b9      	cbz	r1, 800a2d6 <__sflush_r+0xae>
 800a2a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a2aa:	4299      	cmp	r1, r3
 800a2ac:	d002      	beq.n	800a2b4 <__sflush_r+0x8c>
 800a2ae:	4628      	mov	r0, r5
 800a2b0:	f000 fdde 	bl	800ae70 <_free_r>
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	6363      	str	r3, [r4, #52]	@ 0x34
 800a2b8:	e00d      	b.n	800a2d6 <__sflush_r+0xae>
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	4628      	mov	r0, r5
 800a2be:	47b0      	blx	r6
 800a2c0:	4602      	mov	r2, r0
 800a2c2:	1c50      	adds	r0, r2, #1
 800a2c4:	d1c9      	bne.n	800a25a <__sflush_r+0x32>
 800a2c6:	682b      	ldr	r3, [r5, #0]
 800a2c8:	2b00      	cmp	r3, #0
 800a2ca:	d0c6      	beq.n	800a25a <__sflush_r+0x32>
 800a2cc:	2b1d      	cmp	r3, #29
 800a2ce:	d001      	beq.n	800a2d4 <__sflush_r+0xac>
 800a2d0:	2b16      	cmp	r3, #22
 800a2d2:	d11e      	bne.n	800a312 <__sflush_r+0xea>
 800a2d4:	602f      	str	r7, [r5, #0]
 800a2d6:	2000      	movs	r0, #0
 800a2d8:	e022      	b.n	800a320 <__sflush_r+0xf8>
 800a2da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2de:	b21b      	sxth	r3, r3
 800a2e0:	e01b      	b.n	800a31a <__sflush_r+0xf2>
 800a2e2:	690f      	ldr	r7, [r1, #16]
 800a2e4:	2f00      	cmp	r7, #0
 800a2e6:	d0f6      	beq.n	800a2d6 <__sflush_r+0xae>
 800a2e8:	0793      	lsls	r3, r2, #30
 800a2ea:	680e      	ldr	r6, [r1, #0]
 800a2ec:	bf08      	it	eq
 800a2ee:	694b      	ldreq	r3, [r1, #20]
 800a2f0:	600f      	str	r7, [r1, #0]
 800a2f2:	bf18      	it	ne
 800a2f4:	2300      	movne	r3, #0
 800a2f6:	eba6 0807 	sub.w	r8, r6, r7
 800a2fa:	608b      	str	r3, [r1, #8]
 800a2fc:	f1b8 0f00 	cmp.w	r8, #0
 800a300:	dde9      	ble.n	800a2d6 <__sflush_r+0xae>
 800a302:	6a21      	ldr	r1, [r4, #32]
 800a304:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a306:	4643      	mov	r3, r8
 800a308:	463a      	mov	r2, r7
 800a30a:	4628      	mov	r0, r5
 800a30c:	47b0      	blx	r6
 800a30e:	2800      	cmp	r0, #0
 800a310:	dc08      	bgt.n	800a324 <__sflush_r+0xfc>
 800a312:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a316:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a31a:	81a3      	strh	r3, [r4, #12]
 800a31c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a320:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a324:	4407      	add	r7, r0
 800a326:	eba8 0800 	sub.w	r8, r8, r0
 800a32a:	e7e7      	b.n	800a2fc <__sflush_r+0xd4>
 800a32c:	20400001 	.word	0x20400001

0800a330 <_fflush_r>:
 800a330:	b538      	push	{r3, r4, r5, lr}
 800a332:	690b      	ldr	r3, [r1, #16]
 800a334:	4605      	mov	r5, r0
 800a336:	460c      	mov	r4, r1
 800a338:	b913      	cbnz	r3, 800a340 <_fflush_r+0x10>
 800a33a:	2500      	movs	r5, #0
 800a33c:	4628      	mov	r0, r5
 800a33e:	bd38      	pop	{r3, r4, r5, pc}
 800a340:	b118      	cbz	r0, 800a34a <_fflush_r+0x1a>
 800a342:	6a03      	ldr	r3, [r0, #32]
 800a344:	b90b      	cbnz	r3, 800a34a <_fflush_r+0x1a>
 800a346:	f7fe fea7 	bl	8009098 <__sinit>
 800a34a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d0f3      	beq.n	800a33a <_fflush_r+0xa>
 800a352:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a354:	07d0      	lsls	r0, r2, #31
 800a356:	d404      	bmi.n	800a362 <_fflush_r+0x32>
 800a358:	0599      	lsls	r1, r3, #22
 800a35a:	d402      	bmi.n	800a362 <_fflush_r+0x32>
 800a35c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a35e:	f7fe ff16 	bl	800918e <__retarget_lock_acquire_recursive>
 800a362:	4628      	mov	r0, r5
 800a364:	4621      	mov	r1, r4
 800a366:	f7ff ff5f 	bl	800a228 <__sflush_r>
 800a36a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a36c:	07da      	lsls	r2, r3, #31
 800a36e:	4605      	mov	r5, r0
 800a370:	d4e4      	bmi.n	800a33c <_fflush_r+0xc>
 800a372:	89a3      	ldrh	r3, [r4, #12]
 800a374:	059b      	lsls	r3, r3, #22
 800a376:	d4e1      	bmi.n	800a33c <_fflush_r+0xc>
 800a378:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a37a:	f7fe ff09 	bl	8009190 <__retarget_lock_release_recursive>
 800a37e:	e7dd      	b.n	800a33c <_fflush_r+0xc>

0800a380 <__malloc_lock>:
 800a380:	4801      	ldr	r0, [pc, #4]	@ (800a388 <__malloc_lock+0x8>)
 800a382:	f7fe bf04 	b.w	800918e <__retarget_lock_acquire_recursive>
 800a386:	bf00      	nop
 800a388:	200005c4 	.word	0x200005c4

0800a38c <__malloc_unlock>:
 800a38c:	4801      	ldr	r0, [pc, #4]	@ (800a394 <__malloc_unlock+0x8>)
 800a38e:	f7fe beff 	b.w	8009190 <__retarget_lock_release_recursive>
 800a392:	bf00      	nop
 800a394:	200005c4 	.word	0x200005c4

0800a398 <_Balloc>:
 800a398:	b570      	push	{r4, r5, r6, lr}
 800a39a:	69c6      	ldr	r6, [r0, #28]
 800a39c:	4604      	mov	r4, r0
 800a39e:	460d      	mov	r5, r1
 800a3a0:	b976      	cbnz	r6, 800a3c0 <_Balloc+0x28>
 800a3a2:	2010      	movs	r0, #16
 800a3a4:	f7ff fe96 	bl	800a0d4 <malloc>
 800a3a8:	4602      	mov	r2, r0
 800a3aa:	61e0      	str	r0, [r4, #28]
 800a3ac:	b920      	cbnz	r0, 800a3b8 <_Balloc+0x20>
 800a3ae:	4b18      	ldr	r3, [pc, #96]	@ (800a410 <_Balloc+0x78>)
 800a3b0:	4818      	ldr	r0, [pc, #96]	@ (800a414 <_Balloc+0x7c>)
 800a3b2:	216b      	movs	r1, #107	@ 0x6b
 800a3b4:	f000 fd2a 	bl	800ae0c <__assert_func>
 800a3b8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a3bc:	6006      	str	r6, [r0, #0]
 800a3be:	60c6      	str	r6, [r0, #12]
 800a3c0:	69e6      	ldr	r6, [r4, #28]
 800a3c2:	68f3      	ldr	r3, [r6, #12]
 800a3c4:	b183      	cbz	r3, 800a3e8 <_Balloc+0x50>
 800a3c6:	69e3      	ldr	r3, [r4, #28]
 800a3c8:	68db      	ldr	r3, [r3, #12]
 800a3ca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a3ce:	b9b8      	cbnz	r0, 800a400 <_Balloc+0x68>
 800a3d0:	2101      	movs	r1, #1
 800a3d2:	fa01 f605 	lsl.w	r6, r1, r5
 800a3d6:	1d72      	adds	r2, r6, #5
 800a3d8:	0092      	lsls	r2, r2, #2
 800a3da:	4620      	mov	r0, r4
 800a3dc:	f000 fd34 	bl	800ae48 <_calloc_r>
 800a3e0:	b160      	cbz	r0, 800a3fc <_Balloc+0x64>
 800a3e2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a3e6:	e00e      	b.n	800a406 <_Balloc+0x6e>
 800a3e8:	2221      	movs	r2, #33	@ 0x21
 800a3ea:	2104      	movs	r1, #4
 800a3ec:	4620      	mov	r0, r4
 800a3ee:	f000 fd2b 	bl	800ae48 <_calloc_r>
 800a3f2:	69e3      	ldr	r3, [r4, #28]
 800a3f4:	60f0      	str	r0, [r6, #12]
 800a3f6:	68db      	ldr	r3, [r3, #12]
 800a3f8:	2b00      	cmp	r3, #0
 800a3fa:	d1e4      	bne.n	800a3c6 <_Balloc+0x2e>
 800a3fc:	2000      	movs	r0, #0
 800a3fe:	bd70      	pop	{r4, r5, r6, pc}
 800a400:	6802      	ldr	r2, [r0, #0]
 800a402:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a406:	2300      	movs	r3, #0
 800a408:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a40c:	e7f7      	b.n	800a3fe <_Balloc+0x66>
 800a40e:	bf00      	nop
 800a410:	0800b0f9 	.word	0x0800b0f9
 800a414:	0800b18a 	.word	0x0800b18a

0800a418 <_Bfree>:
 800a418:	b570      	push	{r4, r5, r6, lr}
 800a41a:	69c6      	ldr	r6, [r0, #28]
 800a41c:	4605      	mov	r5, r0
 800a41e:	460c      	mov	r4, r1
 800a420:	b976      	cbnz	r6, 800a440 <_Bfree+0x28>
 800a422:	2010      	movs	r0, #16
 800a424:	f7ff fe56 	bl	800a0d4 <malloc>
 800a428:	4602      	mov	r2, r0
 800a42a:	61e8      	str	r0, [r5, #28]
 800a42c:	b920      	cbnz	r0, 800a438 <_Bfree+0x20>
 800a42e:	4b09      	ldr	r3, [pc, #36]	@ (800a454 <_Bfree+0x3c>)
 800a430:	4809      	ldr	r0, [pc, #36]	@ (800a458 <_Bfree+0x40>)
 800a432:	218f      	movs	r1, #143	@ 0x8f
 800a434:	f000 fcea 	bl	800ae0c <__assert_func>
 800a438:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a43c:	6006      	str	r6, [r0, #0]
 800a43e:	60c6      	str	r6, [r0, #12]
 800a440:	b13c      	cbz	r4, 800a452 <_Bfree+0x3a>
 800a442:	69eb      	ldr	r3, [r5, #28]
 800a444:	6862      	ldr	r2, [r4, #4]
 800a446:	68db      	ldr	r3, [r3, #12]
 800a448:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a44c:	6021      	str	r1, [r4, #0]
 800a44e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a452:	bd70      	pop	{r4, r5, r6, pc}
 800a454:	0800b0f9 	.word	0x0800b0f9
 800a458:	0800b18a 	.word	0x0800b18a

0800a45c <__multadd>:
 800a45c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a460:	690d      	ldr	r5, [r1, #16]
 800a462:	4607      	mov	r7, r0
 800a464:	460c      	mov	r4, r1
 800a466:	461e      	mov	r6, r3
 800a468:	f101 0c14 	add.w	ip, r1, #20
 800a46c:	2000      	movs	r0, #0
 800a46e:	f8dc 3000 	ldr.w	r3, [ip]
 800a472:	b299      	uxth	r1, r3
 800a474:	fb02 6101 	mla	r1, r2, r1, r6
 800a478:	0c1e      	lsrs	r6, r3, #16
 800a47a:	0c0b      	lsrs	r3, r1, #16
 800a47c:	fb02 3306 	mla	r3, r2, r6, r3
 800a480:	b289      	uxth	r1, r1
 800a482:	3001      	adds	r0, #1
 800a484:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a488:	4285      	cmp	r5, r0
 800a48a:	f84c 1b04 	str.w	r1, [ip], #4
 800a48e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a492:	dcec      	bgt.n	800a46e <__multadd+0x12>
 800a494:	b30e      	cbz	r6, 800a4da <__multadd+0x7e>
 800a496:	68a3      	ldr	r3, [r4, #8]
 800a498:	42ab      	cmp	r3, r5
 800a49a:	dc19      	bgt.n	800a4d0 <__multadd+0x74>
 800a49c:	6861      	ldr	r1, [r4, #4]
 800a49e:	4638      	mov	r0, r7
 800a4a0:	3101      	adds	r1, #1
 800a4a2:	f7ff ff79 	bl	800a398 <_Balloc>
 800a4a6:	4680      	mov	r8, r0
 800a4a8:	b928      	cbnz	r0, 800a4b6 <__multadd+0x5a>
 800a4aa:	4602      	mov	r2, r0
 800a4ac:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e0 <__multadd+0x84>)
 800a4ae:	480d      	ldr	r0, [pc, #52]	@ (800a4e4 <__multadd+0x88>)
 800a4b0:	21ba      	movs	r1, #186	@ 0xba
 800a4b2:	f000 fcab 	bl	800ae0c <__assert_func>
 800a4b6:	6922      	ldr	r2, [r4, #16]
 800a4b8:	3202      	adds	r2, #2
 800a4ba:	f104 010c 	add.w	r1, r4, #12
 800a4be:	0092      	lsls	r2, r2, #2
 800a4c0:	300c      	adds	r0, #12
 800a4c2:	f000 fc95 	bl	800adf0 <memcpy>
 800a4c6:	4621      	mov	r1, r4
 800a4c8:	4638      	mov	r0, r7
 800a4ca:	f7ff ffa5 	bl	800a418 <_Bfree>
 800a4ce:	4644      	mov	r4, r8
 800a4d0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a4d4:	3501      	adds	r5, #1
 800a4d6:	615e      	str	r6, [r3, #20]
 800a4d8:	6125      	str	r5, [r4, #16]
 800a4da:	4620      	mov	r0, r4
 800a4dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4e0:	0800b168 	.word	0x0800b168
 800a4e4:	0800b18a 	.word	0x0800b18a

0800a4e8 <__hi0bits>:
 800a4e8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a4ec:	4603      	mov	r3, r0
 800a4ee:	bf36      	itet	cc
 800a4f0:	0403      	lslcc	r3, r0, #16
 800a4f2:	2000      	movcs	r0, #0
 800a4f4:	2010      	movcc	r0, #16
 800a4f6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a4fa:	bf3c      	itt	cc
 800a4fc:	021b      	lslcc	r3, r3, #8
 800a4fe:	3008      	addcc	r0, #8
 800a500:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a504:	bf3c      	itt	cc
 800a506:	011b      	lslcc	r3, r3, #4
 800a508:	3004      	addcc	r0, #4
 800a50a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a50e:	bf3c      	itt	cc
 800a510:	009b      	lslcc	r3, r3, #2
 800a512:	3002      	addcc	r0, #2
 800a514:	2b00      	cmp	r3, #0
 800a516:	db05      	blt.n	800a524 <__hi0bits+0x3c>
 800a518:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a51c:	f100 0001 	add.w	r0, r0, #1
 800a520:	bf08      	it	eq
 800a522:	2020      	moveq	r0, #32
 800a524:	4770      	bx	lr

0800a526 <__lo0bits>:
 800a526:	6803      	ldr	r3, [r0, #0]
 800a528:	4602      	mov	r2, r0
 800a52a:	f013 0007 	ands.w	r0, r3, #7
 800a52e:	d00b      	beq.n	800a548 <__lo0bits+0x22>
 800a530:	07d9      	lsls	r1, r3, #31
 800a532:	d421      	bmi.n	800a578 <__lo0bits+0x52>
 800a534:	0798      	lsls	r0, r3, #30
 800a536:	bf49      	itett	mi
 800a538:	085b      	lsrmi	r3, r3, #1
 800a53a:	089b      	lsrpl	r3, r3, #2
 800a53c:	2001      	movmi	r0, #1
 800a53e:	6013      	strmi	r3, [r2, #0]
 800a540:	bf5c      	itt	pl
 800a542:	6013      	strpl	r3, [r2, #0]
 800a544:	2002      	movpl	r0, #2
 800a546:	4770      	bx	lr
 800a548:	b299      	uxth	r1, r3
 800a54a:	b909      	cbnz	r1, 800a550 <__lo0bits+0x2a>
 800a54c:	0c1b      	lsrs	r3, r3, #16
 800a54e:	2010      	movs	r0, #16
 800a550:	b2d9      	uxtb	r1, r3
 800a552:	b909      	cbnz	r1, 800a558 <__lo0bits+0x32>
 800a554:	3008      	adds	r0, #8
 800a556:	0a1b      	lsrs	r3, r3, #8
 800a558:	0719      	lsls	r1, r3, #28
 800a55a:	bf04      	itt	eq
 800a55c:	091b      	lsreq	r3, r3, #4
 800a55e:	3004      	addeq	r0, #4
 800a560:	0799      	lsls	r1, r3, #30
 800a562:	bf04      	itt	eq
 800a564:	089b      	lsreq	r3, r3, #2
 800a566:	3002      	addeq	r0, #2
 800a568:	07d9      	lsls	r1, r3, #31
 800a56a:	d403      	bmi.n	800a574 <__lo0bits+0x4e>
 800a56c:	085b      	lsrs	r3, r3, #1
 800a56e:	f100 0001 	add.w	r0, r0, #1
 800a572:	d003      	beq.n	800a57c <__lo0bits+0x56>
 800a574:	6013      	str	r3, [r2, #0]
 800a576:	4770      	bx	lr
 800a578:	2000      	movs	r0, #0
 800a57a:	4770      	bx	lr
 800a57c:	2020      	movs	r0, #32
 800a57e:	4770      	bx	lr

0800a580 <__i2b>:
 800a580:	b510      	push	{r4, lr}
 800a582:	460c      	mov	r4, r1
 800a584:	2101      	movs	r1, #1
 800a586:	f7ff ff07 	bl	800a398 <_Balloc>
 800a58a:	4602      	mov	r2, r0
 800a58c:	b928      	cbnz	r0, 800a59a <__i2b+0x1a>
 800a58e:	4b05      	ldr	r3, [pc, #20]	@ (800a5a4 <__i2b+0x24>)
 800a590:	4805      	ldr	r0, [pc, #20]	@ (800a5a8 <__i2b+0x28>)
 800a592:	f240 1145 	movw	r1, #325	@ 0x145
 800a596:	f000 fc39 	bl	800ae0c <__assert_func>
 800a59a:	2301      	movs	r3, #1
 800a59c:	6144      	str	r4, [r0, #20]
 800a59e:	6103      	str	r3, [r0, #16]
 800a5a0:	bd10      	pop	{r4, pc}
 800a5a2:	bf00      	nop
 800a5a4:	0800b168 	.word	0x0800b168
 800a5a8:	0800b18a 	.word	0x0800b18a

0800a5ac <__multiply>:
 800a5ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a5b0:	4617      	mov	r7, r2
 800a5b2:	690a      	ldr	r2, [r1, #16]
 800a5b4:	693b      	ldr	r3, [r7, #16]
 800a5b6:	429a      	cmp	r2, r3
 800a5b8:	bfa8      	it	ge
 800a5ba:	463b      	movge	r3, r7
 800a5bc:	4689      	mov	r9, r1
 800a5be:	bfa4      	itt	ge
 800a5c0:	460f      	movge	r7, r1
 800a5c2:	4699      	movge	r9, r3
 800a5c4:	693d      	ldr	r5, [r7, #16]
 800a5c6:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5ca:	68bb      	ldr	r3, [r7, #8]
 800a5cc:	6879      	ldr	r1, [r7, #4]
 800a5ce:	eb05 060a 	add.w	r6, r5, sl
 800a5d2:	42b3      	cmp	r3, r6
 800a5d4:	b085      	sub	sp, #20
 800a5d6:	bfb8      	it	lt
 800a5d8:	3101      	addlt	r1, #1
 800a5da:	f7ff fedd 	bl	800a398 <_Balloc>
 800a5de:	b930      	cbnz	r0, 800a5ee <__multiply+0x42>
 800a5e0:	4602      	mov	r2, r0
 800a5e2:	4b41      	ldr	r3, [pc, #260]	@ (800a6e8 <__multiply+0x13c>)
 800a5e4:	4841      	ldr	r0, [pc, #260]	@ (800a6ec <__multiply+0x140>)
 800a5e6:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a5ea:	f000 fc0f 	bl	800ae0c <__assert_func>
 800a5ee:	f100 0414 	add.w	r4, r0, #20
 800a5f2:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a5f6:	4623      	mov	r3, r4
 800a5f8:	2200      	movs	r2, #0
 800a5fa:	4573      	cmp	r3, lr
 800a5fc:	d320      	bcc.n	800a640 <__multiply+0x94>
 800a5fe:	f107 0814 	add.w	r8, r7, #20
 800a602:	f109 0114 	add.w	r1, r9, #20
 800a606:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a60a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a60e:	9302      	str	r3, [sp, #8]
 800a610:	1beb      	subs	r3, r5, r7
 800a612:	3b15      	subs	r3, #21
 800a614:	f023 0303 	bic.w	r3, r3, #3
 800a618:	3304      	adds	r3, #4
 800a61a:	3715      	adds	r7, #21
 800a61c:	42bd      	cmp	r5, r7
 800a61e:	bf38      	it	cc
 800a620:	2304      	movcc	r3, #4
 800a622:	9301      	str	r3, [sp, #4]
 800a624:	9b02      	ldr	r3, [sp, #8]
 800a626:	9103      	str	r1, [sp, #12]
 800a628:	428b      	cmp	r3, r1
 800a62a:	d80c      	bhi.n	800a646 <__multiply+0x9a>
 800a62c:	2e00      	cmp	r6, #0
 800a62e:	dd03      	ble.n	800a638 <__multiply+0x8c>
 800a630:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a634:	2b00      	cmp	r3, #0
 800a636:	d055      	beq.n	800a6e4 <__multiply+0x138>
 800a638:	6106      	str	r6, [r0, #16]
 800a63a:	b005      	add	sp, #20
 800a63c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a640:	f843 2b04 	str.w	r2, [r3], #4
 800a644:	e7d9      	b.n	800a5fa <__multiply+0x4e>
 800a646:	f8b1 a000 	ldrh.w	sl, [r1]
 800a64a:	f1ba 0f00 	cmp.w	sl, #0
 800a64e:	d01f      	beq.n	800a690 <__multiply+0xe4>
 800a650:	46c4      	mov	ip, r8
 800a652:	46a1      	mov	r9, r4
 800a654:	2700      	movs	r7, #0
 800a656:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a65a:	f8d9 3000 	ldr.w	r3, [r9]
 800a65e:	fa1f fb82 	uxth.w	fp, r2
 800a662:	b29b      	uxth	r3, r3
 800a664:	fb0a 330b 	mla	r3, sl, fp, r3
 800a668:	443b      	add	r3, r7
 800a66a:	f8d9 7000 	ldr.w	r7, [r9]
 800a66e:	0c12      	lsrs	r2, r2, #16
 800a670:	0c3f      	lsrs	r7, r7, #16
 800a672:	fb0a 7202 	mla	r2, sl, r2, r7
 800a676:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a67a:	b29b      	uxth	r3, r3
 800a67c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a680:	4565      	cmp	r5, ip
 800a682:	f849 3b04 	str.w	r3, [r9], #4
 800a686:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a68a:	d8e4      	bhi.n	800a656 <__multiply+0xaa>
 800a68c:	9b01      	ldr	r3, [sp, #4]
 800a68e:	50e7      	str	r7, [r4, r3]
 800a690:	9b03      	ldr	r3, [sp, #12]
 800a692:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a696:	3104      	adds	r1, #4
 800a698:	f1b9 0f00 	cmp.w	r9, #0
 800a69c:	d020      	beq.n	800a6e0 <__multiply+0x134>
 800a69e:	6823      	ldr	r3, [r4, #0]
 800a6a0:	4647      	mov	r7, r8
 800a6a2:	46a4      	mov	ip, r4
 800a6a4:	f04f 0a00 	mov.w	sl, #0
 800a6a8:	f8b7 b000 	ldrh.w	fp, [r7]
 800a6ac:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a6b0:	fb09 220b 	mla	r2, r9, fp, r2
 800a6b4:	4452      	add	r2, sl
 800a6b6:	b29b      	uxth	r3, r3
 800a6b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6bc:	f84c 3b04 	str.w	r3, [ip], #4
 800a6c0:	f857 3b04 	ldr.w	r3, [r7], #4
 800a6c4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6c8:	f8bc 3000 	ldrh.w	r3, [ip]
 800a6cc:	fb09 330a 	mla	r3, r9, sl, r3
 800a6d0:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a6d4:	42bd      	cmp	r5, r7
 800a6d6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6da:	d8e5      	bhi.n	800a6a8 <__multiply+0xfc>
 800a6dc:	9a01      	ldr	r2, [sp, #4]
 800a6de:	50a3      	str	r3, [r4, r2]
 800a6e0:	3404      	adds	r4, #4
 800a6e2:	e79f      	b.n	800a624 <__multiply+0x78>
 800a6e4:	3e01      	subs	r6, #1
 800a6e6:	e7a1      	b.n	800a62c <__multiply+0x80>
 800a6e8:	0800b168 	.word	0x0800b168
 800a6ec:	0800b18a 	.word	0x0800b18a

0800a6f0 <__pow5mult>:
 800a6f0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6f4:	4615      	mov	r5, r2
 800a6f6:	f012 0203 	ands.w	r2, r2, #3
 800a6fa:	4607      	mov	r7, r0
 800a6fc:	460e      	mov	r6, r1
 800a6fe:	d007      	beq.n	800a710 <__pow5mult+0x20>
 800a700:	4c25      	ldr	r4, [pc, #148]	@ (800a798 <__pow5mult+0xa8>)
 800a702:	3a01      	subs	r2, #1
 800a704:	2300      	movs	r3, #0
 800a706:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a70a:	f7ff fea7 	bl	800a45c <__multadd>
 800a70e:	4606      	mov	r6, r0
 800a710:	10ad      	asrs	r5, r5, #2
 800a712:	d03d      	beq.n	800a790 <__pow5mult+0xa0>
 800a714:	69fc      	ldr	r4, [r7, #28]
 800a716:	b97c      	cbnz	r4, 800a738 <__pow5mult+0x48>
 800a718:	2010      	movs	r0, #16
 800a71a:	f7ff fcdb 	bl	800a0d4 <malloc>
 800a71e:	4602      	mov	r2, r0
 800a720:	61f8      	str	r0, [r7, #28]
 800a722:	b928      	cbnz	r0, 800a730 <__pow5mult+0x40>
 800a724:	4b1d      	ldr	r3, [pc, #116]	@ (800a79c <__pow5mult+0xac>)
 800a726:	481e      	ldr	r0, [pc, #120]	@ (800a7a0 <__pow5mult+0xb0>)
 800a728:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a72c:	f000 fb6e 	bl	800ae0c <__assert_func>
 800a730:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a734:	6004      	str	r4, [r0, #0]
 800a736:	60c4      	str	r4, [r0, #12]
 800a738:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a73c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a740:	b94c      	cbnz	r4, 800a756 <__pow5mult+0x66>
 800a742:	f240 2171 	movw	r1, #625	@ 0x271
 800a746:	4638      	mov	r0, r7
 800a748:	f7ff ff1a 	bl	800a580 <__i2b>
 800a74c:	2300      	movs	r3, #0
 800a74e:	f8c8 0008 	str.w	r0, [r8, #8]
 800a752:	4604      	mov	r4, r0
 800a754:	6003      	str	r3, [r0, #0]
 800a756:	f04f 0900 	mov.w	r9, #0
 800a75a:	07eb      	lsls	r3, r5, #31
 800a75c:	d50a      	bpl.n	800a774 <__pow5mult+0x84>
 800a75e:	4631      	mov	r1, r6
 800a760:	4622      	mov	r2, r4
 800a762:	4638      	mov	r0, r7
 800a764:	f7ff ff22 	bl	800a5ac <__multiply>
 800a768:	4631      	mov	r1, r6
 800a76a:	4680      	mov	r8, r0
 800a76c:	4638      	mov	r0, r7
 800a76e:	f7ff fe53 	bl	800a418 <_Bfree>
 800a772:	4646      	mov	r6, r8
 800a774:	106d      	asrs	r5, r5, #1
 800a776:	d00b      	beq.n	800a790 <__pow5mult+0xa0>
 800a778:	6820      	ldr	r0, [r4, #0]
 800a77a:	b938      	cbnz	r0, 800a78c <__pow5mult+0x9c>
 800a77c:	4622      	mov	r2, r4
 800a77e:	4621      	mov	r1, r4
 800a780:	4638      	mov	r0, r7
 800a782:	f7ff ff13 	bl	800a5ac <__multiply>
 800a786:	6020      	str	r0, [r4, #0]
 800a788:	f8c0 9000 	str.w	r9, [r0]
 800a78c:	4604      	mov	r4, r0
 800a78e:	e7e4      	b.n	800a75a <__pow5mult+0x6a>
 800a790:	4630      	mov	r0, r6
 800a792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a796:	bf00      	nop
 800a798:	0800b22c 	.word	0x0800b22c
 800a79c:	0800b0f9 	.word	0x0800b0f9
 800a7a0:	0800b18a 	.word	0x0800b18a

0800a7a4 <__lshift>:
 800a7a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a7a8:	460c      	mov	r4, r1
 800a7aa:	6849      	ldr	r1, [r1, #4]
 800a7ac:	6923      	ldr	r3, [r4, #16]
 800a7ae:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7b2:	68a3      	ldr	r3, [r4, #8]
 800a7b4:	4607      	mov	r7, r0
 800a7b6:	4691      	mov	r9, r2
 800a7b8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7bc:	f108 0601 	add.w	r6, r8, #1
 800a7c0:	42b3      	cmp	r3, r6
 800a7c2:	db0b      	blt.n	800a7dc <__lshift+0x38>
 800a7c4:	4638      	mov	r0, r7
 800a7c6:	f7ff fde7 	bl	800a398 <_Balloc>
 800a7ca:	4605      	mov	r5, r0
 800a7cc:	b948      	cbnz	r0, 800a7e2 <__lshift+0x3e>
 800a7ce:	4602      	mov	r2, r0
 800a7d0:	4b28      	ldr	r3, [pc, #160]	@ (800a874 <__lshift+0xd0>)
 800a7d2:	4829      	ldr	r0, [pc, #164]	@ (800a878 <__lshift+0xd4>)
 800a7d4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a7d8:	f000 fb18 	bl	800ae0c <__assert_func>
 800a7dc:	3101      	adds	r1, #1
 800a7de:	005b      	lsls	r3, r3, #1
 800a7e0:	e7ee      	b.n	800a7c0 <__lshift+0x1c>
 800a7e2:	2300      	movs	r3, #0
 800a7e4:	f100 0114 	add.w	r1, r0, #20
 800a7e8:	f100 0210 	add.w	r2, r0, #16
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	4553      	cmp	r3, sl
 800a7f0:	db33      	blt.n	800a85a <__lshift+0xb6>
 800a7f2:	6920      	ldr	r0, [r4, #16]
 800a7f4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7f8:	f104 0314 	add.w	r3, r4, #20
 800a7fc:	f019 091f 	ands.w	r9, r9, #31
 800a800:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a804:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a808:	d02b      	beq.n	800a862 <__lshift+0xbe>
 800a80a:	f1c9 0e20 	rsb	lr, r9, #32
 800a80e:	468a      	mov	sl, r1
 800a810:	2200      	movs	r2, #0
 800a812:	6818      	ldr	r0, [r3, #0]
 800a814:	fa00 f009 	lsl.w	r0, r0, r9
 800a818:	4310      	orrs	r0, r2
 800a81a:	f84a 0b04 	str.w	r0, [sl], #4
 800a81e:	f853 2b04 	ldr.w	r2, [r3], #4
 800a822:	459c      	cmp	ip, r3
 800a824:	fa22 f20e 	lsr.w	r2, r2, lr
 800a828:	d8f3      	bhi.n	800a812 <__lshift+0x6e>
 800a82a:	ebac 0304 	sub.w	r3, ip, r4
 800a82e:	3b15      	subs	r3, #21
 800a830:	f023 0303 	bic.w	r3, r3, #3
 800a834:	3304      	adds	r3, #4
 800a836:	f104 0015 	add.w	r0, r4, #21
 800a83a:	4560      	cmp	r0, ip
 800a83c:	bf88      	it	hi
 800a83e:	2304      	movhi	r3, #4
 800a840:	50ca      	str	r2, [r1, r3]
 800a842:	b10a      	cbz	r2, 800a848 <__lshift+0xa4>
 800a844:	f108 0602 	add.w	r6, r8, #2
 800a848:	3e01      	subs	r6, #1
 800a84a:	4638      	mov	r0, r7
 800a84c:	612e      	str	r6, [r5, #16]
 800a84e:	4621      	mov	r1, r4
 800a850:	f7ff fde2 	bl	800a418 <_Bfree>
 800a854:	4628      	mov	r0, r5
 800a856:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a85a:	f842 0f04 	str.w	r0, [r2, #4]!
 800a85e:	3301      	adds	r3, #1
 800a860:	e7c5      	b.n	800a7ee <__lshift+0x4a>
 800a862:	3904      	subs	r1, #4
 800a864:	f853 2b04 	ldr.w	r2, [r3], #4
 800a868:	f841 2f04 	str.w	r2, [r1, #4]!
 800a86c:	459c      	cmp	ip, r3
 800a86e:	d8f9      	bhi.n	800a864 <__lshift+0xc0>
 800a870:	e7ea      	b.n	800a848 <__lshift+0xa4>
 800a872:	bf00      	nop
 800a874:	0800b168 	.word	0x0800b168
 800a878:	0800b18a 	.word	0x0800b18a

0800a87c <__mcmp>:
 800a87c:	690a      	ldr	r2, [r1, #16]
 800a87e:	4603      	mov	r3, r0
 800a880:	6900      	ldr	r0, [r0, #16]
 800a882:	1a80      	subs	r0, r0, r2
 800a884:	b530      	push	{r4, r5, lr}
 800a886:	d10e      	bne.n	800a8a6 <__mcmp+0x2a>
 800a888:	3314      	adds	r3, #20
 800a88a:	3114      	adds	r1, #20
 800a88c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a890:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a894:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a898:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a89c:	4295      	cmp	r5, r2
 800a89e:	d003      	beq.n	800a8a8 <__mcmp+0x2c>
 800a8a0:	d205      	bcs.n	800a8ae <__mcmp+0x32>
 800a8a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a8a6:	bd30      	pop	{r4, r5, pc}
 800a8a8:	42a3      	cmp	r3, r4
 800a8aa:	d3f3      	bcc.n	800a894 <__mcmp+0x18>
 800a8ac:	e7fb      	b.n	800a8a6 <__mcmp+0x2a>
 800a8ae:	2001      	movs	r0, #1
 800a8b0:	e7f9      	b.n	800a8a6 <__mcmp+0x2a>
	...

0800a8b4 <__mdiff>:
 800a8b4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8b8:	4689      	mov	r9, r1
 800a8ba:	4606      	mov	r6, r0
 800a8bc:	4611      	mov	r1, r2
 800a8be:	4648      	mov	r0, r9
 800a8c0:	4614      	mov	r4, r2
 800a8c2:	f7ff ffdb 	bl	800a87c <__mcmp>
 800a8c6:	1e05      	subs	r5, r0, #0
 800a8c8:	d112      	bne.n	800a8f0 <__mdiff+0x3c>
 800a8ca:	4629      	mov	r1, r5
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	f7ff fd63 	bl	800a398 <_Balloc>
 800a8d2:	4602      	mov	r2, r0
 800a8d4:	b928      	cbnz	r0, 800a8e2 <__mdiff+0x2e>
 800a8d6:	4b3f      	ldr	r3, [pc, #252]	@ (800a9d4 <__mdiff+0x120>)
 800a8d8:	f240 2137 	movw	r1, #567	@ 0x237
 800a8dc:	483e      	ldr	r0, [pc, #248]	@ (800a9d8 <__mdiff+0x124>)
 800a8de:	f000 fa95 	bl	800ae0c <__assert_func>
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8e8:	4610      	mov	r0, r2
 800a8ea:	b003      	add	sp, #12
 800a8ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8f0:	bfbc      	itt	lt
 800a8f2:	464b      	movlt	r3, r9
 800a8f4:	46a1      	movlt	r9, r4
 800a8f6:	4630      	mov	r0, r6
 800a8f8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a8fc:	bfba      	itte	lt
 800a8fe:	461c      	movlt	r4, r3
 800a900:	2501      	movlt	r5, #1
 800a902:	2500      	movge	r5, #0
 800a904:	f7ff fd48 	bl	800a398 <_Balloc>
 800a908:	4602      	mov	r2, r0
 800a90a:	b918      	cbnz	r0, 800a914 <__mdiff+0x60>
 800a90c:	4b31      	ldr	r3, [pc, #196]	@ (800a9d4 <__mdiff+0x120>)
 800a90e:	f240 2145 	movw	r1, #581	@ 0x245
 800a912:	e7e3      	b.n	800a8dc <__mdiff+0x28>
 800a914:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a918:	6926      	ldr	r6, [r4, #16]
 800a91a:	60c5      	str	r5, [r0, #12]
 800a91c:	f109 0310 	add.w	r3, r9, #16
 800a920:	f109 0514 	add.w	r5, r9, #20
 800a924:	f104 0e14 	add.w	lr, r4, #20
 800a928:	f100 0b14 	add.w	fp, r0, #20
 800a92c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a930:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a934:	9301      	str	r3, [sp, #4]
 800a936:	46d9      	mov	r9, fp
 800a938:	f04f 0c00 	mov.w	ip, #0
 800a93c:	9b01      	ldr	r3, [sp, #4]
 800a93e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a942:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a946:	9301      	str	r3, [sp, #4]
 800a948:	fa1f f38a 	uxth.w	r3, sl
 800a94c:	4619      	mov	r1, r3
 800a94e:	b283      	uxth	r3, r0
 800a950:	1acb      	subs	r3, r1, r3
 800a952:	0c00      	lsrs	r0, r0, #16
 800a954:	4463      	add	r3, ip
 800a956:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a95a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a95e:	b29b      	uxth	r3, r3
 800a960:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a964:	4576      	cmp	r6, lr
 800a966:	f849 3b04 	str.w	r3, [r9], #4
 800a96a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a96e:	d8e5      	bhi.n	800a93c <__mdiff+0x88>
 800a970:	1b33      	subs	r3, r6, r4
 800a972:	3b15      	subs	r3, #21
 800a974:	f023 0303 	bic.w	r3, r3, #3
 800a978:	3415      	adds	r4, #21
 800a97a:	3304      	adds	r3, #4
 800a97c:	42a6      	cmp	r6, r4
 800a97e:	bf38      	it	cc
 800a980:	2304      	movcc	r3, #4
 800a982:	441d      	add	r5, r3
 800a984:	445b      	add	r3, fp
 800a986:	461e      	mov	r6, r3
 800a988:	462c      	mov	r4, r5
 800a98a:	4544      	cmp	r4, r8
 800a98c:	d30e      	bcc.n	800a9ac <__mdiff+0xf8>
 800a98e:	f108 0103 	add.w	r1, r8, #3
 800a992:	1b49      	subs	r1, r1, r5
 800a994:	f021 0103 	bic.w	r1, r1, #3
 800a998:	3d03      	subs	r5, #3
 800a99a:	45a8      	cmp	r8, r5
 800a99c:	bf38      	it	cc
 800a99e:	2100      	movcc	r1, #0
 800a9a0:	440b      	add	r3, r1
 800a9a2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a9a6:	b191      	cbz	r1, 800a9ce <__mdiff+0x11a>
 800a9a8:	6117      	str	r7, [r2, #16]
 800a9aa:	e79d      	b.n	800a8e8 <__mdiff+0x34>
 800a9ac:	f854 1b04 	ldr.w	r1, [r4], #4
 800a9b0:	46e6      	mov	lr, ip
 800a9b2:	0c08      	lsrs	r0, r1, #16
 800a9b4:	fa1c fc81 	uxtah	ip, ip, r1
 800a9b8:	4471      	add	r1, lr
 800a9ba:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a9be:	b289      	uxth	r1, r1
 800a9c0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a9c4:	f846 1b04 	str.w	r1, [r6], #4
 800a9c8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a9cc:	e7dd      	b.n	800a98a <__mdiff+0xd6>
 800a9ce:	3f01      	subs	r7, #1
 800a9d0:	e7e7      	b.n	800a9a2 <__mdiff+0xee>
 800a9d2:	bf00      	nop
 800a9d4:	0800b168 	.word	0x0800b168
 800a9d8:	0800b18a 	.word	0x0800b18a

0800a9dc <__d2b>:
 800a9dc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a9e0:	460f      	mov	r7, r1
 800a9e2:	2101      	movs	r1, #1
 800a9e4:	ec59 8b10 	vmov	r8, r9, d0
 800a9e8:	4616      	mov	r6, r2
 800a9ea:	f7ff fcd5 	bl	800a398 <_Balloc>
 800a9ee:	4604      	mov	r4, r0
 800a9f0:	b930      	cbnz	r0, 800aa00 <__d2b+0x24>
 800a9f2:	4602      	mov	r2, r0
 800a9f4:	4b23      	ldr	r3, [pc, #140]	@ (800aa84 <__d2b+0xa8>)
 800a9f6:	4824      	ldr	r0, [pc, #144]	@ (800aa88 <__d2b+0xac>)
 800a9f8:	f240 310f 	movw	r1, #783	@ 0x30f
 800a9fc:	f000 fa06 	bl	800ae0c <__assert_func>
 800aa00:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aa04:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aa08:	b10d      	cbz	r5, 800aa0e <__d2b+0x32>
 800aa0a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aa0e:	9301      	str	r3, [sp, #4]
 800aa10:	f1b8 0300 	subs.w	r3, r8, #0
 800aa14:	d023      	beq.n	800aa5e <__d2b+0x82>
 800aa16:	4668      	mov	r0, sp
 800aa18:	9300      	str	r3, [sp, #0]
 800aa1a:	f7ff fd84 	bl	800a526 <__lo0bits>
 800aa1e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aa22:	b1d0      	cbz	r0, 800aa5a <__d2b+0x7e>
 800aa24:	f1c0 0320 	rsb	r3, r0, #32
 800aa28:	fa02 f303 	lsl.w	r3, r2, r3
 800aa2c:	430b      	orrs	r3, r1
 800aa2e:	40c2      	lsrs	r2, r0
 800aa30:	6163      	str	r3, [r4, #20]
 800aa32:	9201      	str	r2, [sp, #4]
 800aa34:	9b01      	ldr	r3, [sp, #4]
 800aa36:	61a3      	str	r3, [r4, #24]
 800aa38:	2b00      	cmp	r3, #0
 800aa3a:	bf0c      	ite	eq
 800aa3c:	2201      	moveq	r2, #1
 800aa3e:	2202      	movne	r2, #2
 800aa40:	6122      	str	r2, [r4, #16]
 800aa42:	b1a5      	cbz	r5, 800aa6e <__d2b+0x92>
 800aa44:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800aa48:	4405      	add	r5, r0
 800aa4a:	603d      	str	r5, [r7, #0]
 800aa4c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800aa50:	6030      	str	r0, [r6, #0]
 800aa52:	4620      	mov	r0, r4
 800aa54:	b003      	add	sp, #12
 800aa56:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aa5a:	6161      	str	r1, [r4, #20]
 800aa5c:	e7ea      	b.n	800aa34 <__d2b+0x58>
 800aa5e:	a801      	add	r0, sp, #4
 800aa60:	f7ff fd61 	bl	800a526 <__lo0bits>
 800aa64:	9b01      	ldr	r3, [sp, #4]
 800aa66:	6163      	str	r3, [r4, #20]
 800aa68:	3020      	adds	r0, #32
 800aa6a:	2201      	movs	r2, #1
 800aa6c:	e7e8      	b.n	800aa40 <__d2b+0x64>
 800aa6e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aa72:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800aa76:	6038      	str	r0, [r7, #0]
 800aa78:	6918      	ldr	r0, [r3, #16]
 800aa7a:	f7ff fd35 	bl	800a4e8 <__hi0bits>
 800aa7e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aa82:	e7e5      	b.n	800aa50 <__d2b+0x74>
 800aa84:	0800b168 	.word	0x0800b168
 800aa88:	0800b18a 	.word	0x0800b18a

0800aa8c <__sread>:
 800aa8c:	b510      	push	{r4, lr}
 800aa8e:	460c      	mov	r4, r1
 800aa90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aa94:	f000 f956 	bl	800ad44 <_read_r>
 800aa98:	2800      	cmp	r0, #0
 800aa9a:	bfab      	itete	ge
 800aa9c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800aa9e:	89a3      	ldrhlt	r3, [r4, #12]
 800aaa0:	181b      	addge	r3, r3, r0
 800aaa2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800aaa6:	bfac      	ite	ge
 800aaa8:	6563      	strge	r3, [r4, #84]	@ 0x54
 800aaaa:	81a3      	strhlt	r3, [r4, #12]
 800aaac:	bd10      	pop	{r4, pc}

0800aaae <__swrite>:
 800aaae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aab2:	461f      	mov	r7, r3
 800aab4:	898b      	ldrh	r3, [r1, #12]
 800aab6:	05db      	lsls	r3, r3, #23
 800aab8:	4605      	mov	r5, r0
 800aaba:	460c      	mov	r4, r1
 800aabc:	4616      	mov	r6, r2
 800aabe:	d505      	bpl.n	800aacc <__swrite+0x1e>
 800aac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac4:	2302      	movs	r3, #2
 800aac6:	2200      	movs	r2, #0
 800aac8:	f000 f92a 	bl	800ad20 <_lseek_r>
 800aacc:	89a3      	ldrh	r3, [r4, #12]
 800aace:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800aad2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800aad6:	81a3      	strh	r3, [r4, #12]
 800aad8:	4632      	mov	r2, r6
 800aada:	463b      	mov	r3, r7
 800aadc:	4628      	mov	r0, r5
 800aade:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800aae2:	f000 b951 	b.w	800ad88 <_write_r>

0800aae6 <__sseek>:
 800aae6:	b510      	push	{r4, lr}
 800aae8:	460c      	mov	r4, r1
 800aaea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aaee:	f000 f917 	bl	800ad20 <_lseek_r>
 800aaf2:	1c43      	adds	r3, r0, #1
 800aaf4:	89a3      	ldrh	r3, [r4, #12]
 800aaf6:	bf15      	itete	ne
 800aaf8:	6560      	strne	r0, [r4, #84]	@ 0x54
 800aafa:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800aafe:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800ab02:	81a3      	strheq	r3, [r4, #12]
 800ab04:	bf18      	it	ne
 800ab06:	81a3      	strhne	r3, [r4, #12]
 800ab08:	bd10      	pop	{r4, pc}

0800ab0a <__sclose>:
 800ab0a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab0e:	f000 b94d 	b.w	800adac <_close_r>

0800ab12 <__swbuf_r>:
 800ab12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab14:	460e      	mov	r6, r1
 800ab16:	4614      	mov	r4, r2
 800ab18:	4605      	mov	r5, r0
 800ab1a:	b118      	cbz	r0, 800ab24 <__swbuf_r+0x12>
 800ab1c:	6a03      	ldr	r3, [r0, #32]
 800ab1e:	b90b      	cbnz	r3, 800ab24 <__swbuf_r+0x12>
 800ab20:	f7fe faba 	bl	8009098 <__sinit>
 800ab24:	69a3      	ldr	r3, [r4, #24]
 800ab26:	60a3      	str	r3, [r4, #8]
 800ab28:	89a3      	ldrh	r3, [r4, #12]
 800ab2a:	071a      	lsls	r2, r3, #28
 800ab2c:	d501      	bpl.n	800ab32 <__swbuf_r+0x20>
 800ab2e:	6923      	ldr	r3, [r4, #16]
 800ab30:	b943      	cbnz	r3, 800ab44 <__swbuf_r+0x32>
 800ab32:	4621      	mov	r1, r4
 800ab34:	4628      	mov	r0, r5
 800ab36:	f000 f82b 	bl	800ab90 <__swsetup_r>
 800ab3a:	b118      	cbz	r0, 800ab44 <__swbuf_r+0x32>
 800ab3c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800ab40:	4638      	mov	r0, r7
 800ab42:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ab44:	6823      	ldr	r3, [r4, #0]
 800ab46:	6922      	ldr	r2, [r4, #16]
 800ab48:	1a98      	subs	r0, r3, r2
 800ab4a:	6963      	ldr	r3, [r4, #20]
 800ab4c:	b2f6      	uxtb	r6, r6
 800ab4e:	4283      	cmp	r3, r0
 800ab50:	4637      	mov	r7, r6
 800ab52:	dc05      	bgt.n	800ab60 <__swbuf_r+0x4e>
 800ab54:	4621      	mov	r1, r4
 800ab56:	4628      	mov	r0, r5
 800ab58:	f7ff fbea 	bl	800a330 <_fflush_r>
 800ab5c:	2800      	cmp	r0, #0
 800ab5e:	d1ed      	bne.n	800ab3c <__swbuf_r+0x2a>
 800ab60:	68a3      	ldr	r3, [r4, #8]
 800ab62:	3b01      	subs	r3, #1
 800ab64:	60a3      	str	r3, [r4, #8]
 800ab66:	6823      	ldr	r3, [r4, #0]
 800ab68:	1c5a      	adds	r2, r3, #1
 800ab6a:	6022      	str	r2, [r4, #0]
 800ab6c:	701e      	strb	r6, [r3, #0]
 800ab6e:	6962      	ldr	r2, [r4, #20]
 800ab70:	1c43      	adds	r3, r0, #1
 800ab72:	429a      	cmp	r2, r3
 800ab74:	d004      	beq.n	800ab80 <__swbuf_r+0x6e>
 800ab76:	89a3      	ldrh	r3, [r4, #12]
 800ab78:	07db      	lsls	r3, r3, #31
 800ab7a:	d5e1      	bpl.n	800ab40 <__swbuf_r+0x2e>
 800ab7c:	2e0a      	cmp	r6, #10
 800ab7e:	d1df      	bne.n	800ab40 <__swbuf_r+0x2e>
 800ab80:	4621      	mov	r1, r4
 800ab82:	4628      	mov	r0, r5
 800ab84:	f7ff fbd4 	bl	800a330 <_fflush_r>
 800ab88:	2800      	cmp	r0, #0
 800ab8a:	d0d9      	beq.n	800ab40 <__swbuf_r+0x2e>
 800ab8c:	e7d6      	b.n	800ab3c <__swbuf_r+0x2a>
	...

0800ab90 <__swsetup_r>:
 800ab90:	b538      	push	{r3, r4, r5, lr}
 800ab92:	4b29      	ldr	r3, [pc, #164]	@ (800ac38 <__swsetup_r+0xa8>)
 800ab94:	4605      	mov	r5, r0
 800ab96:	6818      	ldr	r0, [r3, #0]
 800ab98:	460c      	mov	r4, r1
 800ab9a:	b118      	cbz	r0, 800aba4 <__swsetup_r+0x14>
 800ab9c:	6a03      	ldr	r3, [r0, #32]
 800ab9e:	b90b      	cbnz	r3, 800aba4 <__swsetup_r+0x14>
 800aba0:	f7fe fa7a 	bl	8009098 <__sinit>
 800aba4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aba8:	0719      	lsls	r1, r3, #28
 800abaa:	d422      	bmi.n	800abf2 <__swsetup_r+0x62>
 800abac:	06da      	lsls	r2, r3, #27
 800abae:	d407      	bmi.n	800abc0 <__swsetup_r+0x30>
 800abb0:	2209      	movs	r2, #9
 800abb2:	602a      	str	r2, [r5, #0]
 800abb4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800abb8:	81a3      	strh	r3, [r4, #12]
 800abba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800abbe:	e033      	b.n	800ac28 <__swsetup_r+0x98>
 800abc0:	0758      	lsls	r0, r3, #29
 800abc2:	d512      	bpl.n	800abea <__swsetup_r+0x5a>
 800abc4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800abc6:	b141      	cbz	r1, 800abda <__swsetup_r+0x4a>
 800abc8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800abcc:	4299      	cmp	r1, r3
 800abce:	d002      	beq.n	800abd6 <__swsetup_r+0x46>
 800abd0:	4628      	mov	r0, r5
 800abd2:	f000 f94d 	bl	800ae70 <_free_r>
 800abd6:	2300      	movs	r3, #0
 800abd8:	6363      	str	r3, [r4, #52]	@ 0x34
 800abda:	89a3      	ldrh	r3, [r4, #12]
 800abdc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800abe0:	81a3      	strh	r3, [r4, #12]
 800abe2:	2300      	movs	r3, #0
 800abe4:	6063      	str	r3, [r4, #4]
 800abe6:	6923      	ldr	r3, [r4, #16]
 800abe8:	6023      	str	r3, [r4, #0]
 800abea:	89a3      	ldrh	r3, [r4, #12]
 800abec:	f043 0308 	orr.w	r3, r3, #8
 800abf0:	81a3      	strh	r3, [r4, #12]
 800abf2:	6923      	ldr	r3, [r4, #16]
 800abf4:	b94b      	cbnz	r3, 800ac0a <__swsetup_r+0x7a>
 800abf6:	89a3      	ldrh	r3, [r4, #12]
 800abf8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800abfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ac00:	d003      	beq.n	800ac0a <__swsetup_r+0x7a>
 800ac02:	4621      	mov	r1, r4
 800ac04:	4628      	mov	r0, r5
 800ac06:	f000 f83f 	bl	800ac88 <__smakebuf_r>
 800ac0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ac0e:	f013 0201 	ands.w	r2, r3, #1
 800ac12:	d00a      	beq.n	800ac2a <__swsetup_r+0x9a>
 800ac14:	2200      	movs	r2, #0
 800ac16:	60a2      	str	r2, [r4, #8]
 800ac18:	6962      	ldr	r2, [r4, #20]
 800ac1a:	4252      	negs	r2, r2
 800ac1c:	61a2      	str	r2, [r4, #24]
 800ac1e:	6922      	ldr	r2, [r4, #16]
 800ac20:	b942      	cbnz	r2, 800ac34 <__swsetup_r+0xa4>
 800ac22:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ac26:	d1c5      	bne.n	800abb4 <__swsetup_r+0x24>
 800ac28:	bd38      	pop	{r3, r4, r5, pc}
 800ac2a:	0799      	lsls	r1, r3, #30
 800ac2c:	bf58      	it	pl
 800ac2e:	6962      	ldrpl	r2, [r4, #20]
 800ac30:	60a2      	str	r2, [r4, #8]
 800ac32:	e7f4      	b.n	800ac1e <__swsetup_r+0x8e>
 800ac34:	2000      	movs	r0, #0
 800ac36:	e7f7      	b.n	800ac28 <__swsetup_r+0x98>
 800ac38:	2000001c 	.word	0x2000001c

0800ac3c <__swhatbuf_r>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	460c      	mov	r4, r1
 800ac40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac44:	2900      	cmp	r1, #0
 800ac46:	b096      	sub	sp, #88	@ 0x58
 800ac48:	4615      	mov	r5, r2
 800ac4a:	461e      	mov	r6, r3
 800ac4c:	da0d      	bge.n	800ac6a <__swhatbuf_r+0x2e>
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac54:	f04f 0100 	mov.w	r1, #0
 800ac58:	bf14      	ite	ne
 800ac5a:	2340      	movne	r3, #64	@ 0x40
 800ac5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac60:	2000      	movs	r0, #0
 800ac62:	6031      	str	r1, [r6, #0]
 800ac64:	602b      	str	r3, [r5, #0]
 800ac66:	b016      	add	sp, #88	@ 0x58
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	466a      	mov	r2, sp
 800ac6c:	f000 f8ae 	bl	800adcc <_fstat_r>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	dbec      	blt.n	800ac4e <__swhatbuf_r+0x12>
 800ac74:	9901      	ldr	r1, [sp, #4]
 800ac76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac7e:	4259      	negs	r1, r3
 800ac80:	4159      	adcs	r1, r3
 800ac82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac86:	e7eb      	b.n	800ac60 <__swhatbuf_r+0x24>

0800ac88 <__smakebuf_r>:
 800ac88:	898b      	ldrh	r3, [r1, #12]
 800ac8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac8c:	079d      	lsls	r5, r3, #30
 800ac8e:	4606      	mov	r6, r0
 800ac90:	460c      	mov	r4, r1
 800ac92:	d507      	bpl.n	800aca4 <__smakebuf_r+0x1c>
 800ac94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac98:	6023      	str	r3, [r4, #0]
 800ac9a:	6123      	str	r3, [r4, #16]
 800ac9c:	2301      	movs	r3, #1
 800ac9e:	6163      	str	r3, [r4, #20]
 800aca0:	b003      	add	sp, #12
 800aca2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca4:	ab01      	add	r3, sp, #4
 800aca6:	466a      	mov	r2, sp
 800aca8:	f7ff ffc8 	bl	800ac3c <__swhatbuf_r>
 800acac:	9f00      	ldr	r7, [sp, #0]
 800acae:	4605      	mov	r5, r0
 800acb0:	4639      	mov	r1, r7
 800acb2:	4630      	mov	r0, r6
 800acb4:	f7ff fa38 	bl	800a128 <_malloc_r>
 800acb8:	b948      	cbnz	r0, 800acce <__smakebuf_r+0x46>
 800acba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acbe:	059a      	lsls	r2, r3, #22
 800acc0:	d4ee      	bmi.n	800aca0 <__smakebuf_r+0x18>
 800acc2:	f023 0303 	bic.w	r3, r3, #3
 800acc6:	f043 0302 	orr.w	r3, r3, #2
 800acca:	81a3      	strh	r3, [r4, #12]
 800accc:	e7e2      	b.n	800ac94 <__smakebuf_r+0xc>
 800acce:	89a3      	ldrh	r3, [r4, #12]
 800acd0:	6020      	str	r0, [r4, #0]
 800acd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acde:	b15b      	cbz	r3, 800acf8 <__smakebuf_r+0x70>
 800ace0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace4:	4630      	mov	r0, r6
 800ace6:	f000 f80b 	bl	800ad00 <_isatty_r>
 800acea:	b128      	cbz	r0, 800acf8 <__smakebuf_r+0x70>
 800acec:	89a3      	ldrh	r3, [r4, #12]
 800acee:	f023 0303 	bic.w	r3, r3, #3
 800acf2:	f043 0301 	orr.w	r3, r3, #1
 800acf6:	81a3      	strh	r3, [r4, #12]
 800acf8:	89a3      	ldrh	r3, [r4, #12]
 800acfa:	431d      	orrs	r5, r3
 800acfc:	81a5      	strh	r5, [r4, #12]
 800acfe:	e7cf      	b.n	800aca0 <__smakebuf_r+0x18>

0800ad00 <_isatty_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	4d06      	ldr	r5, [pc, #24]	@ (800ad1c <_isatty_r+0x1c>)
 800ad04:	2300      	movs	r3, #0
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	602b      	str	r3, [r5, #0]
 800ad0c:	f7f7 fa12 	bl	8002134 <_isatty>
 800ad10:	1c43      	adds	r3, r0, #1
 800ad12:	d102      	bne.n	800ad1a <_isatty_r+0x1a>
 800ad14:	682b      	ldr	r3, [r5, #0]
 800ad16:	b103      	cbz	r3, 800ad1a <_isatty_r+0x1a>
 800ad18:	6023      	str	r3, [r4, #0]
 800ad1a:	bd38      	pop	{r3, r4, r5, pc}
 800ad1c:	200005d0 	.word	0x200005d0

0800ad20 <_lseek_r>:
 800ad20:	b538      	push	{r3, r4, r5, lr}
 800ad22:	4d07      	ldr	r5, [pc, #28]	@ (800ad40 <_lseek_r+0x20>)
 800ad24:	4604      	mov	r4, r0
 800ad26:	4608      	mov	r0, r1
 800ad28:	4611      	mov	r1, r2
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	602a      	str	r2, [r5, #0]
 800ad2e:	461a      	mov	r2, r3
 800ad30:	f7f7 fa0b 	bl	800214a <_lseek>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_lseek_r+0x1e>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_lseek_r+0x1e>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	200005d0 	.word	0x200005d0

0800ad44 <_read_r>:
 800ad44:	b538      	push	{r3, r4, r5, lr}
 800ad46:	4d07      	ldr	r5, [pc, #28]	@ (800ad64 <_read_r+0x20>)
 800ad48:	4604      	mov	r4, r0
 800ad4a:	4608      	mov	r0, r1
 800ad4c:	4611      	mov	r1, r2
 800ad4e:	2200      	movs	r2, #0
 800ad50:	602a      	str	r2, [r5, #0]
 800ad52:	461a      	mov	r2, r3
 800ad54:	f7f7 f999 	bl	800208a <_read>
 800ad58:	1c43      	adds	r3, r0, #1
 800ad5a:	d102      	bne.n	800ad62 <_read_r+0x1e>
 800ad5c:	682b      	ldr	r3, [r5, #0]
 800ad5e:	b103      	cbz	r3, 800ad62 <_read_r+0x1e>
 800ad60:	6023      	str	r3, [r4, #0]
 800ad62:	bd38      	pop	{r3, r4, r5, pc}
 800ad64:	200005d0 	.word	0x200005d0

0800ad68 <_sbrk_r>:
 800ad68:	b538      	push	{r3, r4, r5, lr}
 800ad6a:	4d06      	ldr	r5, [pc, #24]	@ (800ad84 <_sbrk_r+0x1c>)
 800ad6c:	2300      	movs	r3, #0
 800ad6e:	4604      	mov	r4, r0
 800ad70:	4608      	mov	r0, r1
 800ad72:	602b      	str	r3, [r5, #0]
 800ad74:	f7f7 f9f6 	bl	8002164 <_sbrk>
 800ad78:	1c43      	adds	r3, r0, #1
 800ad7a:	d102      	bne.n	800ad82 <_sbrk_r+0x1a>
 800ad7c:	682b      	ldr	r3, [r5, #0]
 800ad7e:	b103      	cbz	r3, 800ad82 <_sbrk_r+0x1a>
 800ad80:	6023      	str	r3, [r4, #0]
 800ad82:	bd38      	pop	{r3, r4, r5, pc}
 800ad84:	200005d0 	.word	0x200005d0

0800ad88 <_write_r>:
 800ad88:	b538      	push	{r3, r4, r5, lr}
 800ad8a:	4d07      	ldr	r5, [pc, #28]	@ (800ada8 <_write_r+0x20>)
 800ad8c:	4604      	mov	r4, r0
 800ad8e:	4608      	mov	r0, r1
 800ad90:	4611      	mov	r1, r2
 800ad92:	2200      	movs	r2, #0
 800ad94:	602a      	str	r2, [r5, #0]
 800ad96:	461a      	mov	r2, r3
 800ad98:	f7f7 f994 	bl	80020c4 <_write>
 800ad9c:	1c43      	adds	r3, r0, #1
 800ad9e:	d102      	bne.n	800ada6 <_write_r+0x1e>
 800ada0:	682b      	ldr	r3, [r5, #0]
 800ada2:	b103      	cbz	r3, 800ada6 <_write_r+0x1e>
 800ada4:	6023      	str	r3, [r4, #0]
 800ada6:	bd38      	pop	{r3, r4, r5, pc}
 800ada8:	200005d0 	.word	0x200005d0

0800adac <_close_r>:
 800adac:	b538      	push	{r3, r4, r5, lr}
 800adae:	4d06      	ldr	r5, [pc, #24]	@ (800adc8 <_close_r+0x1c>)
 800adb0:	2300      	movs	r3, #0
 800adb2:	4604      	mov	r4, r0
 800adb4:	4608      	mov	r0, r1
 800adb6:	602b      	str	r3, [r5, #0]
 800adb8:	f7f7 f9a0 	bl	80020fc <_close>
 800adbc:	1c43      	adds	r3, r0, #1
 800adbe:	d102      	bne.n	800adc6 <_close_r+0x1a>
 800adc0:	682b      	ldr	r3, [r5, #0]
 800adc2:	b103      	cbz	r3, 800adc6 <_close_r+0x1a>
 800adc4:	6023      	str	r3, [r4, #0]
 800adc6:	bd38      	pop	{r3, r4, r5, pc}
 800adc8:	200005d0 	.word	0x200005d0

0800adcc <_fstat_r>:
 800adcc:	b538      	push	{r3, r4, r5, lr}
 800adce:	4d07      	ldr	r5, [pc, #28]	@ (800adec <_fstat_r+0x20>)
 800add0:	2300      	movs	r3, #0
 800add2:	4604      	mov	r4, r0
 800add4:	4608      	mov	r0, r1
 800add6:	4611      	mov	r1, r2
 800add8:	602b      	str	r3, [r5, #0]
 800adda:	f7f7 f99b 	bl	8002114 <_fstat>
 800adde:	1c43      	adds	r3, r0, #1
 800ade0:	d102      	bne.n	800ade8 <_fstat_r+0x1c>
 800ade2:	682b      	ldr	r3, [r5, #0]
 800ade4:	b103      	cbz	r3, 800ade8 <_fstat_r+0x1c>
 800ade6:	6023      	str	r3, [r4, #0]
 800ade8:	bd38      	pop	{r3, r4, r5, pc}
 800adea:	bf00      	nop
 800adec:	200005d0 	.word	0x200005d0

0800adf0 <memcpy>:
 800adf0:	440a      	add	r2, r1
 800adf2:	4291      	cmp	r1, r2
 800adf4:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800adf8:	d100      	bne.n	800adfc <memcpy+0xc>
 800adfa:	4770      	bx	lr
 800adfc:	b510      	push	{r4, lr}
 800adfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae06:	4291      	cmp	r1, r2
 800ae08:	d1f9      	bne.n	800adfe <memcpy+0xe>
 800ae0a:	bd10      	pop	{r4, pc}

0800ae0c <__assert_func>:
 800ae0c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae0e:	4614      	mov	r4, r2
 800ae10:	461a      	mov	r2, r3
 800ae12:	4b09      	ldr	r3, [pc, #36]	@ (800ae38 <__assert_func+0x2c>)
 800ae14:	681b      	ldr	r3, [r3, #0]
 800ae16:	4605      	mov	r5, r0
 800ae18:	68d8      	ldr	r0, [r3, #12]
 800ae1a:	b14c      	cbz	r4, 800ae30 <__assert_func+0x24>
 800ae1c:	4b07      	ldr	r3, [pc, #28]	@ (800ae3c <__assert_func+0x30>)
 800ae1e:	9100      	str	r1, [sp, #0]
 800ae20:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae24:	4906      	ldr	r1, [pc, #24]	@ (800ae40 <__assert_func+0x34>)
 800ae26:	462b      	mov	r3, r5
 800ae28:	f000 f87e 	bl	800af28 <fiprintf>
 800ae2c:	f000 f89b 	bl	800af66 <abort>
 800ae30:	4b04      	ldr	r3, [pc, #16]	@ (800ae44 <__assert_func+0x38>)
 800ae32:	461c      	mov	r4, r3
 800ae34:	e7f3      	b.n	800ae1e <__assert_func+0x12>
 800ae36:	bf00      	nop
 800ae38:	2000001c 	.word	0x2000001c
 800ae3c:	0800b1ed 	.word	0x0800b1ed
 800ae40:	0800b1fa 	.word	0x0800b1fa
 800ae44:	0800b228 	.word	0x0800b228

0800ae48 <_calloc_r>:
 800ae48:	b570      	push	{r4, r5, r6, lr}
 800ae4a:	fba1 5402 	umull	r5, r4, r1, r2
 800ae4e:	b934      	cbnz	r4, 800ae5e <_calloc_r+0x16>
 800ae50:	4629      	mov	r1, r5
 800ae52:	f7ff f969 	bl	800a128 <_malloc_r>
 800ae56:	4606      	mov	r6, r0
 800ae58:	b928      	cbnz	r0, 800ae66 <_calloc_r+0x1e>
 800ae5a:	4630      	mov	r0, r6
 800ae5c:	bd70      	pop	{r4, r5, r6, pc}
 800ae5e:	220c      	movs	r2, #12
 800ae60:	6002      	str	r2, [r0, #0]
 800ae62:	2600      	movs	r6, #0
 800ae64:	e7f9      	b.n	800ae5a <_calloc_r+0x12>
 800ae66:	462a      	mov	r2, r5
 800ae68:	4621      	mov	r1, r4
 800ae6a:	f7fe f95d 	bl	8009128 <memset>
 800ae6e:	e7f4      	b.n	800ae5a <_calloc_r+0x12>

0800ae70 <_free_r>:
 800ae70:	b538      	push	{r3, r4, r5, lr}
 800ae72:	4605      	mov	r5, r0
 800ae74:	2900      	cmp	r1, #0
 800ae76:	d041      	beq.n	800aefc <_free_r+0x8c>
 800ae78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ae7c:	1f0c      	subs	r4, r1, #4
 800ae7e:	2b00      	cmp	r3, #0
 800ae80:	bfb8      	it	lt
 800ae82:	18e4      	addlt	r4, r4, r3
 800ae84:	f7ff fa7c 	bl	800a380 <__malloc_lock>
 800ae88:	4a1d      	ldr	r2, [pc, #116]	@ (800af00 <_free_r+0x90>)
 800ae8a:	6813      	ldr	r3, [r2, #0]
 800ae8c:	b933      	cbnz	r3, 800ae9c <_free_r+0x2c>
 800ae8e:	6063      	str	r3, [r4, #4]
 800ae90:	6014      	str	r4, [r2, #0]
 800ae92:	4628      	mov	r0, r5
 800ae94:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae98:	f7ff ba78 	b.w	800a38c <__malloc_unlock>
 800ae9c:	42a3      	cmp	r3, r4
 800ae9e:	d908      	bls.n	800aeb2 <_free_r+0x42>
 800aea0:	6820      	ldr	r0, [r4, #0]
 800aea2:	1821      	adds	r1, r4, r0
 800aea4:	428b      	cmp	r3, r1
 800aea6:	bf01      	itttt	eq
 800aea8:	6819      	ldreq	r1, [r3, #0]
 800aeaa:	685b      	ldreq	r3, [r3, #4]
 800aeac:	1809      	addeq	r1, r1, r0
 800aeae:	6021      	streq	r1, [r4, #0]
 800aeb0:	e7ed      	b.n	800ae8e <_free_r+0x1e>
 800aeb2:	461a      	mov	r2, r3
 800aeb4:	685b      	ldr	r3, [r3, #4]
 800aeb6:	b10b      	cbz	r3, 800aebc <_free_r+0x4c>
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	d9fa      	bls.n	800aeb2 <_free_r+0x42>
 800aebc:	6811      	ldr	r1, [r2, #0]
 800aebe:	1850      	adds	r0, r2, r1
 800aec0:	42a0      	cmp	r0, r4
 800aec2:	d10b      	bne.n	800aedc <_free_r+0x6c>
 800aec4:	6820      	ldr	r0, [r4, #0]
 800aec6:	4401      	add	r1, r0
 800aec8:	1850      	adds	r0, r2, r1
 800aeca:	4283      	cmp	r3, r0
 800aecc:	6011      	str	r1, [r2, #0]
 800aece:	d1e0      	bne.n	800ae92 <_free_r+0x22>
 800aed0:	6818      	ldr	r0, [r3, #0]
 800aed2:	685b      	ldr	r3, [r3, #4]
 800aed4:	6053      	str	r3, [r2, #4]
 800aed6:	4408      	add	r0, r1
 800aed8:	6010      	str	r0, [r2, #0]
 800aeda:	e7da      	b.n	800ae92 <_free_r+0x22>
 800aedc:	d902      	bls.n	800aee4 <_free_r+0x74>
 800aede:	230c      	movs	r3, #12
 800aee0:	602b      	str	r3, [r5, #0]
 800aee2:	e7d6      	b.n	800ae92 <_free_r+0x22>
 800aee4:	6820      	ldr	r0, [r4, #0]
 800aee6:	1821      	adds	r1, r4, r0
 800aee8:	428b      	cmp	r3, r1
 800aeea:	bf04      	itt	eq
 800aeec:	6819      	ldreq	r1, [r3, #0]
 800aeee:	685b      	ldreq	r3, [r3, #4]
 800aef0:	6063      	str	r3, [r4, #4]
 800aef2:	bf04      	itt	eq
 800aef4:	1809      	addeq	r1, r1, r0
 800aef6:	6021      	streq	r1, [r4, #0]
 800aef8:	6054      	str	r4, [r2, #4]
 800aefa:	e7ca      	b.n	800ae92 <_free_r+0x22>
 800aefc:	bd38      	pop	{r3, r4, r5, pc}
 800aefe:	bf00      	nop
 800af00:	200005cc 	.word	0x200005cc

0800af04 <__ascii_mbtowc>:
 800af04:	b082      	sub	sp, #8
 800af06:	b901      	cbnz	r1, 800af0a <__ascii_mbtowc+0x6>
 800af08:	a901      	add	r1, sp, #4
 800af0a:	b142      	cbz	r2, 800af1e <__ascii_mbtowc+0x1a>
 800af0c:	b14b      	cbz	r3, 800af22 <__ascii_mbtowc+0x1e>
 800af0e:	7813      	ldrb	r3, [r2, #0]
 800af10:	600b      	str	r3, [r1, #0]
 800af12:	7812      	ldrb	r2, [r2, #0]
 800af14:	1e10      	subs	r0, r2, #0
 800af16:	bf18      	it	ne
 800af18:	2001      	movne	r0, #1
 800af1a:	b002      	add	sp, #8
 800af1c:	4770      	bx	lr
 800af1e:	4610      	mov	r0, r2
 800af20:	e7fb      	b.n	800af1a <__ascii_mbtowc+0x16>
 800af22:	f06f 0001 	mvn.w	r0, #1
 800af26:	e7f8      	b.n	800af1a <__ascii_mbtowc+0x16>

0800af28 <fiprintf>:
 800af28:	b40e      	push	{r1, r2, r3}
 800af2a:	b503      	push	{r0, r1, lr}
 800af2c:	4601      	mov	r1, r0
 800af2e:	ab03      	add	r3, sp, #12
 800af30:	4805      	ldr	r0, [pc, #20]	@ (800af48 <fiprintf+0x20>)
 800af32:	f853 2b04 	ldr.w	r2, [r3], #4
 800af36:	6800      	ldr	r0, [r0, #0]
 800af38:	9301      	str	r3, [sp, #4]
 800af3a:	f7fe ffb3 	bl	8009ea4 <_vfiprintf_r>
 800af3e:	b002      	add	sp, #8
 800af40:	f85d eb04 	ldr.w	lr, [sp], #4
 800af44:	b003      	add	sp, #12
 800af46:	4770      	bx	lr
 800af48:	2000001c 	.word	0x2000001c

0800af4c <__ascii_wctomb>:
 800af4c:	4603      	mov	r3, r0
 800af4e:	4608      	mov	r0, r1
 800af50:	b141      	cbz	r1, 800af64 <__ascii_wctomb+0x18>
 800af52:	2aff      	cmp	r2, #255	@ 0xff
 800af54:	d904      	bls.n	800af60 <__ascii_wctomb+0x14>
 800af56:	228a      	movs	r2, #138	@ 0x8a
 800af58:	601a      	str	r2, [r3, #0]
 800af5a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af5e:	4770      	bx	lr
 800af60:	700a      	strb	r2, [r1, #0]
 800af62:	2001      	movs	r0, #1
 800af64:	4770      	bx	lr

0800af66 <abort>:
 800af66:	b508      	push	{r3, lr}
 800af68:	2006      	movs	r0, #6
 800af6a:	f000 f82b 	bl	800afc4 <raise>
 800af6e:	2001      	movs	r0, #1
 800af70:	f7f7 f880 	bl	8002074 <_exit>

0800af74 <_raise_r>:
 800af74:	291f      	cmp	r1, #31
 800af76:	b538      	push	{r3, r4, r5, lr}
 800af78:	4605      	mov	r5, r0
 800af7a:	460c      	mov	r4, r1
 800af7c:	d904      	bls.n	800af88 <_raise_r+0x14>
 800af7e:	2316      	movs	r3, #22
 800af80:	6003      	str	r3, [r0, #0]
 800af82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af86:	bd38      	pop	{r3, r4, r5, pc}
 800af88:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800af8a:	b112      	cbz	r2, 800af92 <_raise_r+0x1e>
 800af8c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af90:	b94b      	cbnz	r3, 800afa6 <_raise_r+0x32>
 800af92:	4628      	mov	r0, r5
 800af94:	f000 f830 	bl	800aff8 <_getpid_r>
 800af98:	4622      	mov	r2, r4
 800af9a:	4601      	mov	r1, r0
 800af9c:	4628      	mov	r0, r5
 800af9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800afa2:	f000 b817 	b.w	800afd4 <_kill_r>
 800afa6:	2b01      	cmp	r3, #1
 800afa8:	d00a      	beq.n	800afc0 <_raise_r+0x4c>
 800afaa:	1c59      	adds	r1, r3, #1
 800afac:	d103      	bne.n	800afb6 <_raise_r+0x42>
 800afae:	2316      	movs	r3, #22
 800afb0:	6003      	str	r3, [r0, #0]
 800afb2:	2001      	movs	r0, #1
 800afb4:	e7e7      	b.n	800af86 <_raise_r+0x12>
 800afb6:	2100      	movs	r1, #0
 800afb8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800afbc:	4620      	mov	r0, r4
 800afbe:	4798      	blx	r3
 800afc0:	2000      	movs	r0, #0
 800afc2:	e7e0      	b.n	800af86 <_raise_r+0x12>

0800afc4 <raise>:
 800afc4:	4b02      	ldr	r3, [pc, #8]	@ (800afd0 <raise+0xc>)
 800afc6:	4601      	mov	r1, r0
 800afc8:	6818      	ldr	r0, [r3, #0]
 800afca:	f7ff bfd3 	b.w	800af74 <_raise_r>
 800afce:	bf00      	nop
 800afd0:	2000001c 	.word	0x2000001c

0800afd4 <_kill_r>:
 800afd4:	b538      	push	{r3, r4, r5, lr}
 800afd6:	4d07      	ldr	r5, [pc, #28]	@ (800aff4 <_kill_r+0x20>)
 800afd8:	2300      	movs	r3, #0
 800afda:	4604      	mov	r4, r0
 800afdc:	4608      	mov	r0, r1
 800afde:	4611      	mov	r1, r2
 800afe0:	602b      	str	r3, [r5, #0]
 800afe2:	f7f7 f837 	bl	8002054 <_kill>
 800afe6:	1c43      	adds	r3, r0, #1
 800afe8:	d102      	bne.n	800aff0 <_kill_r+0x1c>
 800afea:	682b      	ldr	r3, [r5, #0]
 800afec:	b103      	cbz	r3, 800aff0 <_kill_r+0x1c>
 800afee:	6023      	str	r3, [r4, #0]
 800aff0:	bd38      	pop	{r3, r4, r5, pc}
 800aff2:	bf00      	nop
 800aff4:	200005d0 	.word	0x200005d0

0800aff8 <_getpid_r>:
 800aff8:	f7f7 b824 	b.w	8002044 <_getpid>

0800affc <_init>:
 800affc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800affe:	bf00      	nop
 800b000:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b002:	bc08      	pop	{r3}
 800b004:	469e      	mov	lr, r3
 800b006:	4770      	bx	lr

0800b008 <_fini>:
 800b008:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b00a:	bf00      	nop
 800b00c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b00e:	bc08      	pop	{r3}
 800b010:	469e      	mov	lr, r3
 800b012:	4770      	bx	lr
